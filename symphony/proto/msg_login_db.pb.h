// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_login_db.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
namespace symphony {
namespace proto {
class DBActivityData;
struct DBActivityDataDefaultTypeInternal;
extern DBActivityDataDefaultTypeInternal _DBActivityData_default_instance_;
class DBActivityItem;
struct DBActivityItemDefaultTypeInternal;
extern DBActivityItemDefaultTypeInternal _DBActivityItem_default_instance_;
class DBBagData;
struct DBBagDataDefaultTypeInternal;
extern DBBagDataDefaultTypeInternal _DBBagData_default_instance_;
class DBBagItem;
struct DBBagItemDefaultTypeInternal;
extern DBBagItemDefaultTypeInternal _DBBagItem_default_instance_;
class DBChapterItem;
struct DBChapterItemDefaultTypeInternal;
extern DBChapterItemDefaultTypeInternal _DBChapterItem_default_instance_;
class DBCopyData;
struct DBCopyDataDefaultTypeInternal;
extern DBCopyDataDefaultTypeInternal _DBCopyData_default_instance_;
class DBCopyItem;
struct DBCopyItemDefaultTypeInternal;
extern DBCopyItemDefaultTypeInternal _DBCopyItem_default_instance_;
class DBCounterData;
struct DBCounterDataDefaultTypeInternal;
extern DBCounterDataDefaultTypeInternal _DBCounterData_default_instance_;
class DBCounterItem;
struct DBCounterItemDefaultTypeInternal;
extern DBCounterItemDefaultTypeInternal _DBCounterItem_default_instance_;
class DBEquipData;
struct DBEquipDataDefaultTypeInternal;
extern DBEquipDataDefaultTypeInternal _DBEquipData_default_instance_;
class DBEquipItem;
struct DBEquipItemDefaultTypeInternal;
extern DBEquipItemDefaultTypeInternal _DBEquipItem_default_instance_;
class DBFriendData;
struct DBFriendDataDefaultTypeInternal;
extern DBFriendDataDefaultTypeInternal _DBFriendData_default_instance_;
class DBFriendItem;
struct DBFriendItemDefaultTypeInternal;
extern DBFriendItemDefaultTypeInternal _DBFriendItem_default_instance_;
class DBGemData;
struct DBGemDataDefaultTypeInternal;
extern DBGemDataDefaultTypeInternal _DBGemData_default_instance_;
class DBGemItem;
struct DBGemItemDefaultTypeInternal;
extern DBGemItemDefaultTypeInternal _DBGemItem_default_instance_;
class DBMailData;
struct DBMailDataDefaultTypeInternal;
extern DBMailDataDefaultTypeInternal _DBMailData_default_instance_;
class DBMailItem;
struct DBMailItemDefaultTypeInternal;
extern DBMailItemDefaultTypeInternal _DBMailItem_default_instance_;
class DBMountData;
struct DBMountDataDefaultTypeInternal;
extern DBMountDataDefaultTypeInternal _DBMountData_default_instance_;
class DBMountItem;
struct DBMountItemDefaultTypeInternal;
extern DBMountItemDefaultTypeInternal _DBMountItem_default_instance_;
class DBPartnerData;
struct DBPartnerDataDefaultTypeInternal;
extern DBPartnerDataDefaultTypeInternal _DBPartnerData_default_instance_;
class DBPartnerItem;
struct DBPartnerItemDefaultTypeInternal;
extern DBPartnerItemDefaultTypeInternal _DBPartnerItem_default_instance_;
class DBPetData;
struct DBPetDataDefaultTypeInternal;
extern DBPetDataDefaultTypeInternal _DBPetData_default_instance_;
class DBPetItem;
struct DBPetItemDefaultTypeInternal;
extern DBPetItemDefaultTypeInternal _DBPetItem_default_instance_;
class DBRoleData;
struct DBRoleDataDefaultTypeInternal;
extern DBRoleDataDefaultTypeInternal _DBRoleData_default_instance_;
class DBRoleLoginAck;
struct DBRoleLoginAckDefaultTypeInternal;
extern DBRoleLoginAckDefaultTypeInternal _DBRoleLoginAck_default_instance_;
class DBSkillData;
struct DBSkillDataDefaultTypeInternal;
extern DBSkillDataDefaultTypeInternal _DBSkillData_default_instance_;
class DBSkillItem;
struct DBSkillItemDefaultTypeInternal;
extern DBSkillItemDefaultTypeInternal _DBSkillItem_default_instance_;
class DBTaskData;
struct DBTaskDataDefaultTypeInternal;
extern DBTaskDataDefaultTypeInternal _DBTaskData_default_instance_;
class DBTaskItem;
struct DBTaskItemDefaultTypeInternal;
extern DBTaskItemDefaultTypeInternal _DBTaskItem_default_instance_;
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> ::symphony::proto::DBActivityData* Arena::CreateMaybeMessage<::symphony::proto::DBActivityData>(Arena*);
template<> ::symphony::proto::DBActivityItem* Arena::CreateMaybeMessage<::symphony::proto::DBActivityItem>(Arena*);
template<> ::symphony::proto::DBBagData* Arena::CreateMaybeMessage<::symphony::proto::DBBagData>(Arena*);
template<> ::symphony::proto::DBBagItem* Arena::CreateMaybeMessage<::symphony::proto::DBBagItem>(Arena*);
template<> ::symphony::proto::DBChapterItem* Arena::CreateMaybeMessage<::symphony::proto::DBChapterItem>(Arena*);
template<> ::symphony::proto::DBCopyData* Arena::CreateMaybeMessage<::symphony::proto::DBCopyData>(Arena*);
template<> ::symphony::proto::DBCopyItem* Arena::CreateMaybeMessage<::symphony::proto::DBCopyItem>(Arena*);
template<> ::symphony::proto::DBCounterData* Arena::CreateMaybeMessage<::symphony::proto::DBCounterData>(Arena*);
template<> ::symphony::proto::DBCounterItem* Arena::CreateMaybeMessage<::symphony::proto::DBCounterItem>(Arena*);
template<> ::symphony::proto::DBEquipData* Arena::CreateMaybeMessage<::symphony::proto::DBEquipData>(Arena*);
template<> ::symphony::proto::DBEquipItem* Arena::CreateMaybeMessage<::symphony::proto::DBEquipItem>(Arena*);
template<> ::symphony::proto::DBFriendData* Arena::CreateMaybeMessage<::symphony::proto::DBFriendData>(Arena*);
template<> ::symphony::proto::DBFriendItem* Arena::CreateMaybeMessage<::symphony::proto::DBFriendItem>(Arena*);
template<> ::symphony::proto::DBGemData* Arena::CreateMaybeMessage<::symphony::proto::DBGemData>(Arena*);
template<> ::symphony::proto::DBGemItem* Arena::CreateMaybeMessage<::symphony::proto::DBGemItem>(Arena*);
template<> ::symphony::proto::DBMailData* Arena::CreateMaybeMessage<::symphony::proto::DBMailData>(Arena*);
template<> ::symphony::proto::DBMailItem* Arena::CreateMaybeMessage<::symphony::proto::DBMailItem>(Arena*);
template<> ::symphony::proto::DBMountData* Arena::CreateMaybeMessage<::symphony::proto::DBMountData>(Arena*);
template<> ::symphony::proto::DBMountItem* Arena::CreateMaybeMessage<::symphony::proto::DBMountItem>(Arena*);
template<> ::symphony::proto::DBPartnerData* Arena::CreateMaybeMessage<::symphony::proto::DBPartnerData>(Arena*);
template<> ::symphony::proto::DBPartnerItem* Arena::CreateMaybeMessage<::symphony::proto::DBPartnerItem>(Arena*);
template<> ::symphony::proto::DBPetData* Arena::CreateMaybeMessage<::symphony::proto::DBPetData>(Arena*);
template<> ::symphony::proto::DBPetItem* Arena::CreateMaybeMessage<::symphony::proto::DBPetItem>(Arena*);
template<> ::symphony::proto::DBRoleData* Arena::CreateMaybeMessage<::symphony::proto::DBRoleData>(Arena*);
template<> ::symphony::proto::DBRoleLoginAck* Arena::CreateMaybeMessage<::symphony::proto::DBRoleLoginAck>(Arena*);
template<> ::symphony::proto::DBSkillData* Arena::CreateMaybeMessage<::symphony::proto::DBSkillData>(Arena*);
template<> ::symphony::proto::DBSkillItem* Arena::CreateMaybeMessage<::symphony::proto::DBSkillItem>(Arena*);
template<> ::symphony::proto::DBTaskData* Arena::CreateMaybeMessage<::symphony::proto::DBTaskData>(Arena*);
template<> ::symphony::proto::DBTaskItem* Arena::CreateMaybeMessage<::symphony::proto::DBTaskItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace symphony {
namespace proto {

// ===================================================================

class DBRoleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBRoleData) */ {
 public:
  inline DBRoleData() : DBRoleData(nullptr) {}
  ~DBRoleData() override;
  explicit PROTOBUF_CONSTEXPR DBRoleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRoleData(const DBRoleData& from);
  DBRoleData(DBRoleData&& from) noexcept
    : DBRoleData() {
    *this = ::std::move(from);
  }

  inline DBRoleData& operator=(const DBRoleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRoleData& operator=(DBRoleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRoleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRoleData* internal_default_instance() {
    return reinterpret_cast<const DBRoleData*>(
               &_DBRoleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DBRoleData& a, DBRoleData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRoleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRoleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRoleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRoleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRoleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBRoleData& from) {
    DBRoleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRoleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBRoleData";
  }
  protected:
  explicit DBRoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 12,
    kActimeFieldNumber = 13,
    kNameFieldNumber = 6,
    kAccountIDFieldNumber = 1,
    kRoleIDFieldNumber = 2,
    kCarrerIDFieldNumber = 3,
    kLevelFieldNumber = 4,
    kExpFieldNumber = 5,
    kLangIDFieldNumber = 7,
    kVipLvlFieldNumber = 8,
    kFightValueFieldNumber = 10,
    kVipExpFieldNumber = 9,
    kCityCopyIDFieldNumber = 11,
    kCreateTimeFieldNumber = 14,
    kLogonTimeFieldNumber = 15,
    kLogoffTimeFieldNumber = 16,
    kGuildIDFieldNumber = 17,
    kChannelFieldNumber = 18,
    kOnlineTimeFieldNumber = 19,
  };
  // repeated int64 Action = 12;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  private:
  int64_t _internal_action(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_action() const;
  void _internal_add_action(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_action();
  public:
  int64_t action(int index) const;
  void set_action(int index, int64_t value);
  void add_action(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      action() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_action();

  // repeated int64 Actime = 13;
  int actime_size() const;
  private:
  int _internal_actime_size() const;
  public:
  void clear_actime();
  private:
  int64_t _internal_actime(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_actime() const;
  void _internal_add_actime(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_actime();
  public:
  int64_t actime(int index) const;
  void set_actime(int index, int64_t value);
  void add_actime(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      actime() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_actime();

  // optional string Name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 AccountID = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  uint64_t accountid() const;
  void set_accountid(uint64_t value);
  private:
  uint64_t _internal_accountid() const;
  void _internal_set_accountid(uint64_t value);
  public:

  // optional uint64 RoleID = 2;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional int32 CarrerID = 3;
  bool has_carrerid() const;
  private:
  bool _internal_has_carrerid() const;
  public:
  void clear_carrerid();
  int32_t carrerid() const;
  void set_carrerid(int32_t value);
  private:
  int32_t _internal_carrerid() const;
  void _internal_set_carrerid(int32_t value);
  public:

  // optional int32 Level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // optional int64 Exp = 5;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  int64_t exp() const;
  void set_exp(int64_t value);
  private:
  int64_t _internal_exp() const;
  void _internal_set_exp(int64_t value);
  public:

  // optional int32 LangID = 7;
  bool has_langid() const;
  private:
  bool _internal_has_langid() const;
  public:
  void clear_langid();
  int32_t langid() const;
  void set_langid(int32_t value);
  private:
  int32_t _internal_langid() const;
  void _internal_set_langid(int32_t value);
  public:

  // optional int32 VipLvl = 8;
  bool has_viplvl() const;
  private:
  bool _internal_has_viplvl() const;
  public:
  void clear_viplvl();
  int32_t viplvl() const;
  void set_viplvl(int32_t value);
  private:
  int32_t _internal_viplvl() const;
  void _internal_set_viplvl(int32_t value);
  public:

  // optional int64 FightValue = 10;
  bool has_fightvalue() const;
  private:
  bool _internal_has_fightvalue() const;
  public:
  void clear_fightvalue();
  int64_t fightvalue() const;
  void set_fightvalue(int64_t value);
  private:
  int64_t _internal_fightvalue() const;
  void _internal_set_fightvalue(int64_t value);
  public:

  // optional int32 VipExp = 9;
  bool has_vipexp() const;
  private:
  bool _internal_has_vipexp() const;
  public:
  void clear_vipexp();
  int32_t vipexp() const;
  void set_vipexp(int32_t value);
  private:
  int32_t _internal_vipexp() const;
  void _internal_set_vipexp(int32_t value);
  public:

  // optional int32 CityCopyID = 11;
  bool has_citycopyid() const;
  private:
  bool _internal_has_citycopyid() const;
  public:
  void clear_citycopyid();
  int32_t citycopyid() const;
  void set_citycopyid(int32_t value);
  private:
  int32_t _internal_citycopyid() const;
  void _internal_set_citycopyid(int32_t value);
  public:

  // optional uint64 CreateTime = 14;
  bool has_createtime() const;
  private:
  bool _internal_has_createtime() const;
  public:
  void clear_createtime();
  uint64_t createtime() const;
  void set_createtime(uint64_t value);
  private:
  uint64_t _internal_createtime() const;
  void _internal_set_createtime(uint64_t value);
  public:

  // optional uint64 LogonTime = 15;
  bool has_logontime() const;
  private:
  bool _internal_has_logontime() const;
  public:
  void clear_logontime();
  uint64_t logontime() const;
  void set_logontime(uint64_t value);
  private:
  uint64_t _internal_logontime() const;
  void _internal_set_logontime(uint64_t value);
  public:

  // optional uint64 LogoffTime = 16;
  bool has_logofftime() const;
  private:
  bool _internal_has_logofftime() const;
  public:
  void clear_logofftime();
  uint64_t logofftime() const;
  void set_logofftime(uint64_t value);
  private:
  uint64_t _internal_logofftime() const;
  void _internal_set_logofftime(uint64_t value);
  public:

  // optional uint64 GuildID = 17;
  bool has_guildid() const;
  private:
  bool _internal_has_guildid() const;
  public:
  void clear_guildid();
  uint64_t guildid() const;
  void set_guildid(uint64_t value);
  private:
  uint64_t _internal_guildid() const;
  void _internal_set_guildid(uint64_t value);
  public:

  // optional int32 Channel = 18;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // optional uint32 OnlineTime = 19;
  bool has_onlinetime() const;
  private:
  bool _internal_has_onlinetime() const;
  public:
  void clear_onlinetime();
  uint32_t onlinetime() const;
  void set_onlinetime(uint32_t value);
  private:
  uint32_t _internal_onlinetime() const;
  void _internal_set_onlinetime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBRoleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > action_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > actime_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t accountid_;
    uint64_t roleid_;
    int32_t carrerid_;
    int32_t level_;
    int64_t exp_;
    int32_t langid_;
    int32_t viplvl_;
    int64_t fightvalue_;
    int32_t vipexp_;
    int32_t citycopyid_;
    uint64_t createtime_;
    uint64_t logontime_;
    uint64_t logofftime_;
    uint64_t guildid_;
    int32_t channel_;
    uint32_t onlinetime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBBagItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBBagItem) */ {
 public:
  inline DBBagItem() : DBBagItem(nullptr) {}
  ~DBBagItem() override;
  explicit PROTOBUF_CONSTEXPR DBBagItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBBagItem(const DBBagItem& from);
  DBBagItem(DBBagItem&& from) noexcept
    : DBBagItem() {
    *this = ::std::move(from);
  }

  inline DBBagItem& operator=(const DBBagItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBBagItem& operator=(DBBagItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBBagItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBBagItem* internal_default_instance() {
    return reinterpret_cast<const DBBagItem*>(
               &_DBBagItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DBBagItem& a, DBBagItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBBagItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBBagItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBBagItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBBagItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBBagItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBBagItem& from) {
    DBBagItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBBagItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBBagItem";
  }
  protected:
  explicit DBBagItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 1,
    kRoleIDFieldNumber = 2,
    kItemGuidFieldNumber = 3,
    kCountFieldNumber = 5,
    kItemIDFieldNumber = 4,
    kBindFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // optional uint64 Guid = 1;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional uint64 RoleID = 2;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 ItemGuid = 3;
  bool has_itemguid() const;
  private:
  bool _internal_has_itemguid() const;
  public:
  void clear_itemguid();
  uint64_t itemguid() const;
  void set_itemguid(uint64_t value);
  private:
  uint64_t _internal_itemguid() const;
  void _internal_set_itemguid(uint64_t value);
  public:

  // optional int64 Count = 5;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // optional uint32 ItemID = 4;
  bool has_itemid() const;
  private:
  bool _internal_has_itemid() const;
  public:
  void clear_itemid();
  uint32_t itemid() const;
  void set_itemid(uint32_t value);
  private:
  uint32_t _internal_itemid() const;
  void _internal_set_itemid(uint32_t value);
  public:

  // optional int32 Bind = 6;
  bool has_bind() const;
  private:
  bool _internal_has_bind() const;
  public:
  void clear_bind();
  int32_t bind() const;
  void set_bind(int32_t value);
  private:
  int32_t _internal_bind() const;
  void _internal_set_bind(int32_t value);
  public:

  // optional int32 Status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBBagItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t guid_;
    uint64_t roleid_;
    uint64_t itemguid_;
    int64_t count_;
    uint32_t itemid_;
    int32_t bind_;
    int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBBagData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBBagData) */ {
 public:
  inline DBBagData() : DBBagData(nullptr) {}
  ~DBBagData() override;
  explicit PROTOBUF_CONSTEXPR DBBagData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBBagData(const DBBagData& from);
  DBBagData(DBBagData&& from) noexcept
    : DBBagData() {
    *this = ::std::move(from);
  }

  inline DBBagData& operator=(const DBBagData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBBagData& operator=(DBBagData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBBagData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBBagData* internal_default_instance() {
    return reinterpret_cast<const DBBagData*>(
               &_DBBagData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DBBagData& a, DBBagData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBBagData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBBagData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBBagData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBBagData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBBagData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBBagData& from) {
    DBBagData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBBagData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBBagData";
  }
  protected:
  explicit DBBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBBagItem ItemList = 1;
  int itemlist_size() const;
  private:
  int _internal_itemlist_size() const;
  public:
  void clear_itemlist();
  ::symphony::proto::DBBagItem* mutable_itemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBBagItem >*
      mutable_itemlist();
  private:
  const ::symphony::proto::DBBagItem& _internal_itemlist(int index) const;
  ::symphony::proto::DBBagItem* _internal_add_itemlist();
  public:
  const ::symphony::proto::DBBagItem& itemlist(int index) const;
  ::symphony::proto::DBBagItem* add_itemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBBagItem >&
      itemlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBBagData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBBagItem > itemlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBCopyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBCopyItem) */ {
 public:
  inline DBCopyItem() : DBCopyItem(nullptr) {}
  ~DBCopyItem() override;
  explicit PROTOBUF_CONSTEXPR DBCopyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBCopyItem(const DBCopyItem& from);
  DBCopyItem(DBCopyItem&& from) noexcept
    : DBCopyItem() {
    *this = ::std::move(from);
  }

  inline DBCopyItem& operator=(const DBCopyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCopyItem& operator=(DBCopyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBCopyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBCopyItem* internal_default_instance() {
    return reinterpret_cast<const DBCopyItem*>(
               &_DBCopyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DBCopyItem& a, DBCopyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCopyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBCopyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBCopyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBCopyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBCopyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBCopyItem& from) {
    DBCopyItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCopyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBCopyItem";
  }
  protected:
  explicit DBCopyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kCopyIDFieldNumber = 2,
    kStarNumFieldNumber = 3,
    kBattleCntFieldNumber = 4,
    kResetCntFieldNumber = 5,
    kBattleTimeFieldNumber = 6,
    kResetTimeFieldNumber = 7,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 CopyID = 2;
  bool has_copyid() const;
  private:
  bool _internal_has_copyid() const;
  public:
  void clear_copyid();
  uint32_t copyid() const;
  void set_copyid(uint32_t value);
  private:
  uint32_t _internal_copyid() const;
  void _internal_set_copyid(uint32_t value);
  public:

  // optional int32 StarNum = 3;
  bool has_starnum() const;
  private:
  bool _internal_has_starnum() const;
  public:
  void clear_starnum();
  int32_t starnum() const;
  void set_starnum(int32_t value);
  private:
  int32_t _internal_starnum() const;
  void _internal_set_starnum(int32_t value);
  public:

  // optional int32 BattleCnt = 4;
  bool has_battlecnt() const;
  private:
  bool _internal_has_battlecnt() const;
  public:
  void clear_battlecnt();
  int32_t battlecnt() const;
  void set_battlecnt(int32_t value);
  private:
  int32_t _internal_battlecnt() const;
  void _internal_set_battlecnt(int32_t value);
  public:

  // optional int32 ResetCnt = 5;
  bool has_resetcnt() const;
  private:
  bool _internal_has_resetcnt() const;
  public:
  void clear_resetcnt();
  int32_t resetcnt() const;
  void set_resetcnt(int32_t value);
  private:
  int32_t _internal_resetcnt() const;
  void _internal_set_resetcnt(int32_t value);
  public:

  // optional uint64 BattleTime = 6;
  bool has_battletime() const;
  private:
  bool _internal_has_battletime() const;
  public:
  void clear_battletime();
  uint64_t battletime() const;
  void set_battletime(uint64_t value);
  private:
  uint64_t _internal_battletime() const;
  void _internal_set_battletime(uint64_t value);
  public:

  // optional uint64 ResetTime = 7;
  bool has_resettime() const;
  private:
  bool _internal_has_resettime() const;
  public:
  void clear_resettime();
  uint64_t resettime() const;
  void set_resettime(uint64_t value);
  private:
  uint64_t _internal_resettime() const;
  void _internal_set_resettime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBCopyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint32_t copyid_;
    int32_t starnum_;
    int32_t battlecnt_;
    int32_t resetcnt_;
    uint64_t battletime_;
    uint64_t resettime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBChapterItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBChapterItem) */ {
 public:
  inline DBChapterItem() : DBChapterItem(nullptr) {}
  ~DBChapterItem() override;
  explicit PROTOBUF_CONSTEXPR DBChapterItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBChapterItem(const DBChapterItem& from);
  DBChapterItem(DBChapterItem&& from) noexcept
    : DBChapterItem() {
    *this = ::std::move(from);
  }

  inline DBChapterItem& operator=(const DBChapterItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBChapterItem& operator=(DBChapterItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBChapterItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBChapterItem* internal_default_instance() {
    return reinterpret_cast<const DBChapterItem*>(
               &_DBChapterItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DBChapterItem& a, DBChapterItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBChapterItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBChapterItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBChapterItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBChapterItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBChapterItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBChapterItem& from) {
    DBChapterItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBChapterItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBChapterItem";
  }
  protected:
  explicit DBChapterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kCopyTypeFieldNumber = 2,
    kChapterIDFieldNumber = 3,
    kStarAwardFieldNumber = 4,
    kSceneAwardFieldNumber = 5,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 CopyType = 2;
  bool has_copytype() const;
  private:
  bool _internal_has_copytype() const;
  public:
  void clear_copytype();
  uint32_t copytype() const;
  void set_copytype(uint32_t value);
  private:
  uint32_t _internal_copytype() const;
  void _internal_set_copytype(uint32_t value);
  public:

  // optional uint32 ChapterID = 3;
  bool has_chapterid() const;
  private:
  bool _internal_has_chapterid() const;
  public:
  void clear_chapterid();
  uint32_t chapterid() const;
  void set_chapterid(uint32_t value);
  private:
  uint32_t _internal_chapterid() const;
  void _internal_set_chapterid(uint32_t value);
  public:

  // optional uint32 StarAward = 4;
  bool has_staraward() const;
  private:
  bool _internal_has_staraward() const;
  public:
  void clear_staraward();
  uint32_t staraward() const;
  void set_staraward(uint32_t value);
  private:
  uint32_t _internal_staraward() const;
  void _internal_set_staraward(uint32_t value);
  public:

  // optional uint32 SceneAward = 5;
  bool has_sceneaward() const;
  private:
  bool _internal_has_sceneaward() const;
  public:
  void clear_sceneaward();
  uint32_t sceneaward() const;
  void set_sceneaward(uint32_t value);
  private:
  uint32_t _internal_sceneaward() const;
  void _internal_set_sceneaward(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBChapterItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint32_t copytype_;
    uint32_t chapterid_;
    uint32_t staraward_;
    uint32_t sceneaward_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBCopyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBCopyData) */ {
 public:
  inline DBCopyData() : DBCopyData(nullptr) {}
  ~DBCopyData() override;
  explicit PROTOBUF_CONSTEXPR DBCopyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBCopyData(const DBCopyData& from);
  DBCopyData(DBCopyData&& from) noexcept
    : DBCopyData() {
    *this = ::std::move(from);
  }

  inline DBCopyData& operator=(const DBCopyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCopyData& operator=(DBCopyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBCopyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBCopyData* internal_default_instance() {
    return reinterpret_cast<const DBCopyData*>(
               &_DBCopyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DBCopyData& a, DBCopyData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCopyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBCopyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBCopyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBCopyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBCopyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBCopyData& from) {
    DBCopyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCopyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBCopyData";
  }
  protected:
  explicit DBCopyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyListFieldNumber = 1,
    kChapterListFieldNumber = 2,
  };
  // repeated .symphony.proto.DBCopyItem CopyList = 1;
  int copylist_size() const;
  private:
  int _internal_copylist_size() const;
  public:
  void clear_copylist();
  ::symphony::proto::DBCopyItem* mutable_copylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCopyItem >*
      mutable_copylist();
  private:
  const ::symphony::proto::DBCopyItem& _internal_copylist(int index) const;
  ::symphony::proto::DBCopyItem* _internal_add_copylist();
  public:
  const ::symphony::proto::DBCopyItem& copylist(int index) const;
  ::symphony::proto::DBCopyItem* add_copylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCopyItem >&
      copylist() const;

  // repeated .symphony.proto.DBChapterItem ChapterList = 2;
  int chapterlist_size() const;
  private:
  int _internal_chapterlist_size() const;
  public:
  void clear_chapterlist();
  ::symphony::proto::DBChapterItem* mutable_chapterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBChapterItem >*
      mutable_chapterlist();
  private:
  const ::symphony::proto::DBChapterItem& _internal_chapterlist(int index) const;
  ::symphony::proto::DBChapterItem* _internal_add_chapterlist();
  public:
  const ::symphony::proto::DBChapterItem& chapterlist(int index) const;
  ::symphony::proto::DBChapterItem* add_chapterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBChapterItem >&
      chapterlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBCopyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCopyItem > copylist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBChapterItem > chapterlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBEquipItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBEquipItem) */ {
 public:
  inline DBEquipItem() : DBEquipItem(nullptr) {}
  ~DBEquipItem() override;
  explicit PROTOBUF_CONSTEXPR DBEquipItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBEquipItem(const DBEquipItem& from);
  DBEquipItem(DBEquipItem&& from) noexcept
    : DBEquipItem() {
    *this = ::std::move(from);
  }

  inline DBEquipItem& operator=(const DBEquipItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBEquipItem& operator=(DBEquipItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBEquipItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBEquipItem* internal_default_instance() {
    return reinterpret_cast<const DBEquipItem*>(
               &_DBEquipItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DBEquipItem& a, DBEquipItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBEquipItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBEquipItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBEquipItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBEquipItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBEquipItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBEquipItem& from) {
    DBEquipItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBEquipItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBEquipItem";
  }
  protected:
  explicit DBEquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kEquipIDFieldNumber = 3,
    kStrengthLvlFieldNumber = 4,
    kRefineLevelFieldNumber = 5,
    kStarLevelFieldNumber = 6,
    kRefineExpFieldNumber = 7,
    kStarExpFieldNumber = 8,
    kIsUsingFieldNumber = 9,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional int32 EquipID = 3;
  bool has_equipid() const;
  private:
  bool _internal_has_equipid() const;
  public:
  void clear_equipid();
  int32_t equipid() const;
  void set_equipid(int32_t value);
  private:
  int32_t _internal_equipid() const;
  void _internal_set_equipid(int32_t value);
  public:

  // optional int32 StrengthLvl = 4;
  bool has_strengthlvl() const;
  private:
  bool _internal_has_strengthlvl() const;
  public:
  void clear_strengthlvl();
  int32_t strengthlvl() const;
  void set_strengthlvl(int32_t value);
  private:
  int32_t _internal_strengthlvl() const;
  void _internal_set_strengthlvl(int32_t value);
  public:

  // optional int32 RefineLevel = 5;
  bool has_refinelevel() const;
  private:
  bool _internal_has_refinelevel() const;
  public:
  void clear_refinelevel();
  int32_t refinelevel() const;
  void set_refinelevel(int32_t value);
  private:
  int32_t _internal_refinelevel() const;
  void _internal_set_refinelevel(int32_t value);
  public:

  // optional int32 StarLevel = 6;
  bool has_starlevel() const;
  private:
  bool _internal_has_starlevel() const;
  public:
  void clear_starlevel();
  int32_t starlevel() const;
  void set_starlevel(int32_t value);
  private:
  int32_t _internal_starlevel() const;
  void _internal_set_starlevel(int32_t value);
  public:

  // optional int32 RefineExp = 7;
  bool has_refineexp() const;
  private:
  bool _internal_has_refineexp() const;
  public:
  void clear_refineexp();
  int32_t refineexp() const;
  void set_refineexp(int32_t value);
  private:
  int32_t _internal_refineexp() const;
  void _internal_set_refineexp(int32_t value);
  public:

  // optional int32 StarExp = 8;
  bool has_starexp() const;
  private:
  bool _internal_has_starexp() const;
  public:
  void clear_starexp();
  int32_t starexp() const;
  void set_starexp(int32_t value);
  private:
  int32_t _internal_starexp() const;
  void _internal_set_starexp(int32_t value);
  public:

  // optional bool IsUsing = 9;
  bool has_isusing() const;
  private:
  bool _internal_has_isusing() const;
  public:
  void clear_isusing();
  bool isusing() const;
  void set_isusing(bool value);
  private:
  bool _internal_isusing() const;
  void _internal_set_isusing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBEquipItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t guid_;
    int32_t equipid_;
    int32_t strengthlvl_;
    int32_t refinelevel_;
    int32_t starlevel_;
    int32_t refineexp_;
    int32_t starexp_;
    bool isusing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBEquipData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBEquipData) */ {
 public:
  inline DBEquipData() : DBEquipData(nullptr) {}
  ~DBEquipData() override;
  explicit PROTOBUF_CONSTEXPR DBEquipData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBEquipData(const DBEquipData& from);
  DBEquipData(DBEquipData&& from) noexcept
    : DBEquipData() {
    *this = ::std::move(from);
  }

  inline DBEquipData& operator=(const DBEquipData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBEquipData& operator=(DBEquipData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBEquipData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBEquipData* internal_default_instance() {
    return reinterpret_cast<const DBEquipData*>(
               &_DBEquipData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DBEquipData& a, DBEquipData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBEquipData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBEquipData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBEquipData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBEquipData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBEquipData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBEquipData& from) {
    DBEquipData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBEquipData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBEquipData";
  }
  protected:
  explicit DBEquipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBEquipItem EquipList = 1;
  int equiplist_size() const;
  private:
  int _internal_equiplist_size() const;
  public:
  void clear_equiplist();
  ::symphony::proto::DBEquipItem* mutable_equiplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBEquipItem >*
      mutable_equiplist();
  private:
  const ::symphony::proto::DBEquipItem& _internal_equiplist(int index) const;
  ::symphony::proto::DBEquipItem* _internal_add_equiplist();
  public:
  const ::symphony::proto::DBEquipItem& equiplist(int index) const;
  ::symphony::proto::DBEquipItem* add_equiplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBEquipItem >&
      equiplist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBEquipData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBEquipItem > equiplist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBGemItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBGemItem) */ {
 public:
  inline DBGemItem() : DBGemItem(nullptr) {}
  ~DBGemItem() override;
  explicit PROTOBUF_CONSTEXPR DBGemItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBGemItem(const DBGemItem& from);
  DBGemItem(DBGemItem&& from) noexcept
    : DBGemItem() {
    *this = ::std::move(from);
  }

  inline DBGemItem& operator=(const DBGemItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBGemItem& operator=(DBGemItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBGemItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBGemItem* internal_default_instance() {
    return reinterpret_cast<const DBGemItem*>(
               &_DBGemItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DBGemItem& a, DBGemItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBGemItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBGemItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBGemItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBGemItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBGemItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBGemItem& from) {
    DBGemItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBGemItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBGemItem";
  }
  protected:
  explicit DBGemItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kGemIDFieldNumber = 3,
    kStrengthLvlFieldNumber = 4,
    kRefineLevelFieldNumber = 5,
    kStarLevelFieldNumber = 6,
    kRefineExpFieldNumber = 7,
    kStarExpFieldNumber = 8,
    kPosFieldNumber = 9,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional int32 GemID = 3;
  bool has_gemid() const;
  private:
  bool _internal_has_gemid() const;
  public:
  void clear_gemid();
  int32_t gemid() const;
  void set_gemid(int32_t value);
  private:
  int32_t _internal_gemid() const;
  void _internal_set_gemid(int32_t value);
  public:

  // optional int32 StrengthLvl = 4;
  bool has_strengthlvl() const;
  private:
  bool _internal_has_strengthlvl() const;
  public:
  void clear_strengthlvl();
  int32_t strengthlvl() const;
  void set_strengthlvl(int32_t value);
  private:
  int32_t _internal_strengthlvl() const;
  void _internal_set_strengthlvl(int32_t value);
  public:

  // optional int32 RefineLevel = 5;
  bool has_refinelevel() const;
  private:
  bool _internal_has_refinelevel() const;
  public:
  void clear_refinelevel();
  int32_t refinelevel() const;
  void set_refinelevel(int32_t value);
  private:
  int32_t _internal_refinelevel() const;
  void _internal_set_refinelevel(int32_t value);
  public:

  // optional int32 StarLevel = 6;
  bool has_starlevel() const;
  private:
  bool _internal_has_starlevel() const;
  public:
  void clear_starlevel();
  int32_t starlevel() const;
  void set_starlevel(int32_t value);
  private:
  int32_t _internal_starlevel() const;
  void _internal_set_starlevel(int32_t value);
  public:

  // optional int32 RefineExp = 7;
  bool has_refineexp() const;
  private:
  bool _internal_has_refineexp() const;
  public:
  void clear_refineexp();
  int32_t refineexp() const;
  void set_refineexp(int32_t value);
  private:
  int32_t _internal_refineexp() const;
  void _internal_set_refineexp(int32_t value);
  public:

  // optional int32 StarExp = 8;
  bool has_starexp() const;
  private:
  bool _internal_has_starexp() const;
  public:
  void clear_starexp();
  int32_t starexp() const;
  void set_starexp(int32_t value);
  private:
  int32_t _internal_starexp() const;
  void _internal_set_starexp(int32_t value);
  public:

  // optional int32 Pos = 9;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  int32_t pos() const;
  void set_pos(int32_t value);
  private:
  int32_t _internal_pos() const;
  void _internal_set_pos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBGemItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t guid_;
    int32_t gemid_;
    int32_t strengthlvl_;
    int32_t refinelevel_;
    int32_t starlevel_;
    int32_t refineexp_;
    int32_t starexp_;
    int32_t pos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBGemData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBGemData) */ {
 public:
  inline DBGemData() : DBGemData(nullptr) {}
  ~DBGemData() override;
  explicit PROTOBUF_CONSTEXPR DBGemData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBGemData(const DBGemData& from);
  DBGemData(DBGemData&& from) noexcept
    : DBGemData() {
    *this = ::std::move(from);
  }

  inline DBGemData& operator=(const DBGemData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBGemData& operator=(DBGemData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBGemData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBGemData* internal_default_instance() {
    return reinterpret_cast<const DBGemData*>(
               &_DBGemData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DBGemData& a, DBGemData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBGemData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBGemData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBGemData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBGemData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBGemData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBGemData& from) {
    DBGemData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBGemData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBGemData";
  }
  protected:
  explicit DBGemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBGemItem GemList = 1;
  int gemlist_size() const;
  private:
  int _internal_gemlist_size() const;
  public:
  void clear_gemlist();
  ::symphony::proto::DBGemItem* mutable_gemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBGemItem >*
      mutable_gemlist();
  private:
  const ::symphony::proto::DBGemItem& _internal_gemlist(int index) const;
  ::symphony::proto::DBGemItem* _internal_add_gemlist();
  public:
  const ::symphony::proto::DBGemItem& gemlist(int index) const;
  ::symphony::proto::DBGemItem* add_gemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBGemItem >&
      gemlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBGemData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBGemItem > gemlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBSkillItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBSkillItem) */ {
 public:
  inline DBSkillItem() : DBSkillItem(nullptr) {}
  ~DBSkillItem() override;
  explicit PROTOBUF_CONSTEXPR DBSkillItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBSkillItem(const DBSkillItem& from);
  DBSkillItem(DBSkillItem&& from) noexcept
    : DBSkillItem() {
    *this = ::std::move(from);
  }

  inline DBSkillItem& operator=(const DBSkillItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSkillItem& operator=(DBSkillItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBSkillItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBSkillItem* internal_default_instance() {
    return reinterpret_cast<const DBSkillItem*>(
               &_DBSkillItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DBSkillItem& a, DBSkillItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSkillItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBSkillItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBSkillItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBSkillItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBSkillItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBSkillItem& from) {
    DBSkillItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSkillItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBSkillItem";
  }
  protected:
  explicit DBSkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kSkillIDFieldNumber = 2,
    kLevelFieldNumber = 3,
    kKeyPosFieldNumber = 4,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 SkillID = 2;
  bool has_skillid() const;
  private:
  bool _internal_has_skillid() const;
  public:
  void clear_skillid();
  uint32_t skillid() const;
  void set_skillid(uint32_t value);
  private:
  uint32_t _internal_skillid() const;
  void _internal_set_skillid(uint32_t value);
  public:

  // optional int32 Level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // optional int32 KeyPos = 4;
  bool has_keypos() const;
  private:
  bool _internal_has_keypos() const;
  public:
  void clear_keypos();
  int32_t keypos() const;
  void set_keypos(int32_t value);
  private:
  int32_t _internal_keypos() const;
  void _internal_set_keypos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBSkillItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint32_t skillid_;
    int32_t level_;
    int32_t keypos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBSkillData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBSkillData) */ {
 public:
  inline DBSkillData() : DBSkillData(nullptr) {}
  ~DBSkillData() override;
  explicit PROTOBUF_CONSTEXPR DBSkillData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBSkillData(const DBSkillData& from);
  DBSkillData(DBSkillData&& from) noexcept
    : DBSkillData() {
    *this = ::std::move(from);
  }

  inline DBSkillData& operator=(const DBSkillData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBSkillData& operator=(DBSkillData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBSkillData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBSkillData* internal_default_instance() {
    return reinterpret_cast<const DBSkillData*>(
               &_DBSkillData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DBSkillData& a, DBSkillData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBSkillData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBSkillData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBSkillData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBSkillData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBSkillData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBSkillData& from) {
    DBSkillData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBSkillData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBSkillData";
  }
  protected:
  explicit DBSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBSkillItem SkillList = 1;
  int skilllist_size() const;
  private:
  int _internal_skilllist_size() const;
  public:
  void clear_skilllist();
  ::symphony::proto::DBSkillItem* mutable_skilllist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBSkillItem >*
      mutable_skilllist();
  private:
  const ::symphony::proto::DBSkillItem& _internal_skilllist(int index) const;
  ::symphony::proto::DBSkillItem* _internal_add_skilllist();
  public:
  const ::symphony::proto::DBSkillItem& skilllist(int index) const;
  ::symphony::proto::DBSkillItem* add_skilllist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBSkillItem >&
      skilllist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBSkillData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBSkillItem > skilllist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBPetItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBPetItem) */ {
 public:
  inline DBPetItem() : DBPetItem(nullptr) {}
  ~DBPetItem() override;
  explicit PROTOBUF_CONSTEXPR DBPetItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPetItem(const DBPetItem& from);
  DBPetItem(DBPetItem&& from) noexcept
    : DBPetItem() {
    *this = ::std::move(from);
  }

  inline DBPetItem& operator=(const DBPetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPetItem& operator=(DBPetItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPetItem* internal_default_instance() {
    return reinterpret_cast<const DBPetItem*>(
               &_DBPetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DBPetItem& a, DBPetItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPetItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPetItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPetItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPetItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPetItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPetItem& from) {
    DBPetItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPetItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBPetItem";
  }
  protected:
  explicit DBPetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kPetIDFieldNumber = 3,
    kStrengthLvlFieldNumber = 4,
    kRefineLevelFieldNumber = 5,
    kStarLevelFieldNumber = 6,
    kIsUsingFieldNumber = 7,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional int32 PetID = 3;
  bool has_petid() const;
  private:
  bool _internal_has_petid() const;
  public:
  void clear_petid();
  int32_t petid() const;
  void set_petid(int32_t value);
  private:
  int32_t _internal_petid() const;
  void _internal_set_petid(int32_t value);
  public:

  // optional int32 StrengthLvl = 4;
  bool has_strengthlvl() const;
  private:
  bool _internal_has_strengthlvl() const;
  public:
  void clear_strengthlvl();
  int32_t strengthlvl() const;
  void set_strengthlvl(int32_t value);
  private:
  int32_t _internal_strengthlvl() const;
  void _internal_set_strengthlvl(int32_t value);
  public:

  // optional int32 RefineLevel = 5;
  bool has_refinelevel() const;
  private:
  bool _internal_has_refinelevel() const;
  public:
  void clear_refinelevel();
  int32_t refinelevel() const;
  void set_refinelevel(int32_t value);
  private:
  int32_t _internal_refinelevel() const;
  void _internal_set_refinelevel(int32_t value);
  public:

  // optional int32 StarLevel = 6;
  bool has_starlevel() const;
  private:
  bool _internal_has_starlevel() const;
  public:
  void clear_starlevel();
  int32_t starlevel() const;
  void set_starlevel(int32_t value);
  private:
  int32_t _internal_starlevel() const;
  void _internal_set_starlevel(int32_t value);
  public:

  // optional bool IsUsing = 7;
  bool has_isusing() const;
  private:
  bool _internal_has_isusing() const;
  public:
  void clear_isusing();
  bool isusing() const;
  void set_isusing(bool value);
  private:
  bool _internal_isusing() const;
  void _internal_set_isusing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBPetItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t guid_;
    int32_t petid_;
    int32_t strengthlvl_;
    int32_t refinelevel_;
    int32_t starlevel_;
    bool isusing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBPetData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBPetData) */ {
 public:
  inline DBPetData() : DBPetData(nullptr) {}
  ~DBPetData() override;
  explicit PROTOBUF_CONSTEXPR DBPetData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPetData(const DBPetData& from);
  DBPetData(DBPetData&& from) noexcept
    : DBPetData() {
    *this = ::std::move(from);
  }

  inline DBPetData& operator=(const DBPetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPetData& operator=(DBPetData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPetData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPetData* internal_default_instance() {
    return reinterpret_cast<const DBPetData*>(
               &_DBPetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DBPetData& a, DBPetData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPetData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPetData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPetData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPetData& from) {
    DBPetData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPetData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBPetData";
  }
  protected:
  explicit DBPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPetListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBPetItem PetList = 1;
  int petlist_size() const;
  private:
  int _internal_petlist_size() const;
  public:
  void clear_petlist();
  ::symphony::proto::DBPetItem* mutable_petlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPetItem >*
      mutable_petlist();
  private:
  const ::symphony::proto::DBPetItem& _internal_petlist(int index) const;
  ::symphony::proto::DBPetItem* _internal_add_petlist();
  public:
  const ::symphony::proto::DBPetItem& petlist(int index) const;
  ::symphony::proto::DBPetItem* add_petlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPetItem >&
      petlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBPetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPetItem > petlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBMountItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBMountItem) */ {
 public:
  inline DBMountItem() : DBMountItem(nullptr) {}
  ~DBMountItem() override;
  explicit PROTOBUF_CONSTEXPR DBMountItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMountItem(const DBMountItem& from);
  DBMountItem(DBMountItem&& from) noexcept
    : DBMountItem() {
    *this = ::std::move(from);
  }

  inline DBMountItem& operator=(const DBMountItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMountItem& operator=(DBMountItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMountItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMountItem* internal_default_instance() {
    return reinterpret_cast<const DBMountItem*>(
               &_DBMountItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DBMountItem& a, DBMountItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMountItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMountItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMountItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMountItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMountItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBMountItem& from) {
    DBMountItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMountItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBMountItem";
  }
  protected:
  explicit DBMountItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kMountIDFieldNumber = 3,
    kStrengthLvlFieldNumber = 4,
    kRefineLevelFieldNumber = 5,
    kStarLevelFieldNumber = 6,
    kIsUsingFieldNumber = 7,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional int32 MountID = 3;
  bool has_mountid() const;
  private:
  bool _internal_has_mountid() const;
  public:
  void clear_mountid();
  int32_t mountid() const;
  void set_mountid(int32_t value);
  private:
  int32_t _internal_mountid() const;
  void _internal_set_mountid(int32_t value);
  public:

  // optional int32 StrengthLvl = 4;
  bool has_strengthlvl() const;
  private:
  bool _internal_has_strengthlvl() const;
  public:
  void clear_strengthlvl();
  int32_t strengthlvl() const;
  void set_strengthlvl(int32_t value);
  private:
  int32_t _internal_strengthlvl() const;
  void _internal_set_strengthlvl(int32_t value);
  public:

  // optional int32 RefineLevel = 5;
  bool has_refinelevel() const;
  private:
  bool _internal_has_refinelevel() const;
  public:
  void clear_refinelevel();
  int32_t refinelevel() const;
  void set_refinelevel(int32_t value);
  private:
  int32_t _internal_refinelevel() const;
  void _internal_set_refinelevel(int32_t value);
  public:

  // optional int32 StarLevel = 6;
  bool has_starlevel() const;
  private:
  bool _internal_has_starlevel() const;
  public:
  void clear_starlevel();
  int32_t starlevel() const;
  void set_starlevel(int32_t value);
  private:
  int32_t _internal_starlevel() const;
  void _internal_set_starlevel(int32_t value);
  public:

  // optional bool IsUsing = 7;
  bool has_isusing() const;
  private:
  bool _internal_has_isusing() const;
  public:
  void clear_isusing();
  bool isusing() const;
  void set_isusing(bool value);
  private:
  bool _internal_isusing() const;
  void _internal_set_isusing(bool value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBMountItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t guid_;
    int32_t mountid_;
    int32_t strengthlvl_;
    int32_t refinelevel_;
    int32_t starlevel_;
    bool isusing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBMountData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBMountData) */ {
 public:
  inline DBMountData() : DBMountData(nullptr) {}
  ~DBMountData() override;
  explicit PROTOBUF_CONSTEXPR DBMountData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMountData(const DBMountData& from);
  DBMountData(DBMountData&& from) noexcept
    : DBMountData() {
    *this = ::std::move(from);
  }

  inline DBMountData& operator=(const DBMountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMountData& operator=(DBMountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMountData* internal_default_instance() {
    return reinterpret_cast<const DBMountData*>(
               &_DBMountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DBMountData& a, DBMountData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMountData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMountData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMountData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBMountData& from) {
    DBMountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMountData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBMountData";
  }
  protected:
  explicit DBMountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMountListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBMountItem MountList = 1;
  int mountlist_size() const;
  private:
  int _internal_mountlist_size() const;
  public:
  void clear_mountlist();
  ::symphony::proto::DBMountItem* mutable_mountlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMountItem >*
      mutable_mountlist();
  private:
  const ::symphony::proto::DBMountItem& _internal_mountlist(int index) const;
  ::symphony::proto::DBMountItem* _internal_add_mountlist();
  public:
  const ::symphony::proto::DBMountItem& mountlist(int index) const;
  ::symphony::proto::DBMountItem* add_mountlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMountItem >&
      mountlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBMountData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMountItem > mountlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBPartnerItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBPartnerItem) */ {
 public:
  inline DBPartnerItem() : DBPartnerItem(nullptr) {}
  ~DBPartnerItem() override;
  explicit PROTOBUF_CONSTEXPR DBPartnerItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPartnerItem(const DBPartnerItem& from);
  DBPartnerItem(DBPartnerItem&& from) noexcept
    : DBPartnerItem() {
    *this = ::std::move(from);
  }

  inline DBPartnerItem& operator=(const DBPartnerItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPartnerItem& operator=(DBPartnerItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPartnerItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPartnerItem* internal_default_instance() {
    return reinterpret_cast<const DBPartnerItem*>(
               &_DBPartnerItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DBPartnerItem& a, DBPartnerItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPartnerItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPartnerItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPartnerItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPartnerItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPartnerItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPartnerItem& from) {
    DBPartnerItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPartnerItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBPartnerItem";
  }
  protected:
  explicit DBPartnerItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kPartnerIDFieldNumber = 3,
    kStrengthLvlFieldNumber = 4,
    kRefineLevelFieldNumber = 5,
    kStarLevelFieldNumber = 6,
    kSetPosFieldNumber = 7,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional int32 PartnerID = 3;
  bool has_partnerid() const;
  private:
  bool _internal_has_partnerid() const;
  public:
  void clear_partnerid();
  int32_t partnerid() const;
  void set_partnerid(int32_t value);
  private:
  int32_t _internal_partnerid() const;
  void _internal_set_partnerid(int32_t value);
  public:

  // optional int32 StrengthLvl = 4;
  bool has_strengthlvl() const;
  private:
  bool _internal_has_strengthlvl() const;
  public:
  void clear_strengthlvl();
  int32_t strengthlvl() const;
  void set_strengthlvl(int32_t value);
  private:
  int32_t _internal_strengthlvl() const;
  void _internal_set_strengthlvl(int32_t value);
  public:

  // optional int32 RefineLevel = 5;
  bool has_refinelevel() const;
  private:
  bool _internal_has_refinelevel() const;
  public:
  void clear_refinelevel();
  int32_t refinelevel() const;
  void set_refinelevel(int32_t value);
  private:
  int32_t _internal_refinelevel() const;
  void _internal_set_refinelevel(int32_t value);
  public:

  // optional int32 StarLevel = 6;
  bool has_starlevel() const;
  private:
  bool _internal_has_starlevel() const;
  public:
  void clear_starlevel();
  int32_t starlevel() const;
  void set_starlevel(int32_t value);
  private:
  int32_t _internal_starlevel() const;
  void _internal_set_starlevel(int32_t value);
  public:

  // optional int32 SetPos = 7;
  bool has_setpos() const;
  private:
  bool _internal_has_setpos() const;
  public:
  void clear_setpos();
  int32_t setpos() const;
  void set_setpos(int32_t value);
  private:
  int32_t _internal_setpos() const;
  void _internal_set_setpos(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBPartnerItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t guid_;
    int32_t partnerid_;
    int32_t strengthlvl_;
    int32_t refinelevel_;
    int32_t starlevel_;
    int32_t setpos_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBPartnerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBPartnerData) */ {
 public:
  inline DBPartnerData() : DBPartnerData(nullptr) {}
  ~DBPartnerData() override;
  explicit PROTOBUF_CONSTEXPR DBPartnerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBPartnerData(const DBPartnerData& from);
  DBPartnerData(DBPartnerData&& from) noexcept
    : DBPartnerData() {
    *this = ::std::move(from);
  }

  inline DBPartnerData& operator=(const DBPartnerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBPartnerData& operator=(DBPartnerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBPartnerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBPartnerData* internal_default_instance() {
    return reinterpret_cast<const DBPartnerData*>(
               &_DBPartnerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DBPartnerData& a, DBPartnerData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBPartnerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBPartnerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBPartnerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBPartnerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBPartnerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBPartnerData& from) {
    DBPartnerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBPartnerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBPartnerData";
  }
  protected:
  explicit DBPartnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartnerListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBPartnerItem PartnerList = 1;
  int partnerlist_size() const;
  private:
  int _internal_partnerlist_size() const;
  public:
  void clear_partnerlist();
  ::symphony::proto::DBPartnerItem* mutable_partnerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPartnerItem >*
      mutable_partnerlist();
  private:
  const ::symphony::proto::DBPartnerItem& _internal_partnerlist(int index) const;
  ::symphony::proto::DBPartnerItem* _internal_add_partnerlist();
  public:
  const ::symphony::proto::DBPartnerItem& partnerlist(int index) const;
  ::symphony::proto::DBPartnerItem* add_partnerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPartnerItem >&
      partnerlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBPartnerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPartnerItem > partnerlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBTaskItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBTaskItem) */ {
 public:
  inline DBTaskItem() : DBTaskItem(nullptr) {}
  ~DBTaskItem() override;
  explicit PROTOBUF_CONSTEXPR DBTaskItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBTaskItem(const DBTaskItem& from);
  DBTaskItem(DBTaskItem&& from) noexcept
    : DBTaskItem() {
    *this = ::std::move(from);
  }

  inline DBTaskItem& operator=(const DBTaskItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBTaskItem& operator=(DBTaskItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBTaskItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBTaskItem* internal_default_instance() {
    return reinterpret_cast<const DBTaskItem*>(
               &_DBTaskItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DBTaskItem& a, DBTaskItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBTaskItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBTaskItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBTaskItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBTaskItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBTaskItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBTaskItem& from) {
    DBTaskItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBTaskItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBTaskItem";
  }
  protected:
  explicit DBTaskItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kTaskIDFieldNumber = 2,
    kStatusFieldNumber = 3,
    kProgressFieldNumber = 4,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 TaskID = 2;
  bool has_taskid() const;
  private:
  bool _internal_has_taskid() const;
  public:
  void clear_taskid();
  uint32_t taskid() const;
  void set_taskid(uint32_t value);
  private:
  uint32_t _internal_taskid() const;
  void _internal_set_taskid(uint32_t value);
  public:

  // optional int32 Status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // optional int32 Progress = 4;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  int32_t progress() const;
  void set_progress(int32_t value);
  private:
  int32_t _internal_progress() const;
  void _internal_set_progress(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBTaskItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint32_t taskid_;
    int32_t status_;
    int32_t progress_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBTaskData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBTaskData) */ {
 public:
  inline DBTaskData() : DBTaskData(nullptr) {}
  ~DBTaskData() override;
  explicit PROTOBUF_CONSTEXPR DBTaskData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBTaskData(const DBTaskData& from);
  DBTaskData(DBTaskData&& from) noexcept
    : DBTaskData() {
    *this = ::std::move(from);
  }

  inline DBTaskData& operator=(const DBTaskData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBTaskData& operator=(DBTaskData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBTaskData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBTaskData* internal_default_instance() {
    return reinterpret_cast<const DBTaskData*>(
               &_DBTaskData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DBTaskData& a, DBTaskData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBTaskData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBTaskData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBTaskData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBTaskData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBTaskData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBTaskData& from) {
    DBTaskData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBTaskData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBTaskData";
  }
  protected:
  explicit DBTaskData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBTaskItem TaskList = 1;
  int tasklist_size() const;
  private:
  int _internal_tasklist_size() const;
  public:
  void clear_tasklist();
  ::symphony::proto::DBTaskItem* mutable_tasklist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBTaskItem >*
      mutable_tasklist();
  private:
  const ::symphony::proto::DBTaskItem& _internal_tasklist(int index) const;
  ::symphony::proto::DBTaskItem* _internal_add_tasklist();
  public:
  const ::symphony::proto::DBTaskItem& tasklist(int index) const;
  ::symphony::proto::DBTaskItem* add_tasklist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBTaskItem >&
      tasklist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBTaskData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBTaskItem > tasklist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBMailItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBMailItem) */ {
 public:
  inline DBMailItem() : DBMailItem(nullptr) {}
  ~DBMailItem() override;
  explicit PROTOBUF_CONSTEXPR DBMailItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMailItem(const DBMailItem& from);
  DBMailItem(DBMailItem&& from) noexcept
    : DBMailItem() {
    *this = ::std::move(from);
  }

  inline DBMailItem& operator=(const DBMailItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMailItem& operator=(DBMailItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMailItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMailItem* internal_default_instance() {
    return reinterpret_cast<const DBMailItem*>(
               &_DBMailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DBMailItem& a, DBMailItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMailItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMailItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMailItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMailItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMailItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBMailItem& from) {
    DBMailItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMailItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBMailItem";
  }
  protected:
  explicit DBMailItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderFieldNumber = 6,
    kTitleFieldNumber = 9,
    kContentFieldNumber = 10,
    kItemsFieldNumber = 11,
    kRoleIDFieldNumber = 1,
    kGuidFieldNumber = 2,
    kGroupIDFieldNumber = 3,
    kTimeFieldNumber = 4,
    kSenderIDFieldNumber = 5,
    kMailTypeFieldNumber = 7,
    kStatusFieldNumber = 8,
  };
  // optional string Sender = 6;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // optional string Title = 9;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string Content = 10;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional bytes Items = 11;
  bool has_items() const;
  private:
  bool _internal_has_items() const;
  public:
  void clear_items();
  const std::string& items() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_items(ArgT0&& arg0, ArgT... args);
  std::string* mutable_items();
  PROTOBUF_NODISCARD std::string* release_items();
  void set_allocated_items(std::string* items);
  private:
  const std::string& _internal_items() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_items(const std::string& value);
  std::string* _internal_mutable_items();
  public:

  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 Guid = 2;
  bool has_guid() const;
  private:
  bool _internal_has_guid() const;
  public:
  void clear_guid();
  uint64_t guid() const;
  void set_guid(uint64_t value);
  private:
  uint64_t _internal_guid() const;
  void _internal_set_guid(uint64_t value);
  public:

  // optional uint64 GroupID = 3;
  bool has_groupid() const;
  private:
  bool _internal_has_groupid() const;
  public:
  void clear_groupid();
  uint64_t groupid() const;
  void set_groupid(uint64_t value);
  private:
  uint64_t _internal_groupid() const;
  void _internal_set_groupid(uint64_t value);
  public:

  // optional uint64 Time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // optional uint64 SenderID = 5;
  bool has_senderid() const;
  private:
  bool _internal_has_senderid() const;
  public:
  void clear_senderid();
  uint64_t senderid() const;
  void set_senderid(uint64_t value);
  private:
  uint64_t _internal_senderid() const;
  void _internal_set_senderid(uint64_t value);
  public:

  // optional uint32 MailType = 7;
  bool has_mailtype() const;
  private:
  bool _internal_has_mailtype() const;
  public:
  void clear_mailtype();
  uint32_t mailtype() const;
  void set_mailtype(uint32_t value);
  private:
  uint32_t _internal_mailtype() const;
  void _internal_set_mailtype(uint32_t value);
  public:

  // optional uint32 Status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBMailItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr items_;
    uint64_t roleid_;
    uint64_t guid_;
    uint64_t groupid_;
    uint64_t time_;
    uint64_t senderid_;
    uint32_t mailtype_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBMailData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBMailData) */ {
 public:
  inline DBMailData() : DBMailData(nullptr) {}
  ~DBMailData() override;
  explicit PROTOBUF_CONSTEXPR DBMailData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBMailData(const DBMailData& from);
  DBMailData(DBMailData&& from) noexcept
    : DBMailData() {
    *this = ::std::move(from);
  }

  inline DBMailData& operator=(const DBMailData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBMailData& operator=(DBMailData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBMailData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBMailData* internal_default_instance() {
    return reinterpret_cast<const DBMailData*>(
               &_DBMailData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DBMailData& a, DBMailData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBMailData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBMailData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBMailData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBMailData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBMailData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBMailData& from) {
    DBMailData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBMailData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBMailData";
  }
  protected:
  explicit DBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBMailItem MailList = 1;
  int maillist_size() const;
  private:
  int _internal_maillist_size() const;
  public:
  void clear_maillist();
  ::symphony::proto::DBMailItem* mutable_maillist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMailItem >*
      mutable_maillist();
  private:
  const ::symphony::proto::DBMailItem& _internal_maillist(int index) const;
  ::symphony::proto::DBMailItem* _internal_add_maillist();
  public:
  const ::symphony::proto::DBMailItem& maillist(int index) const;
  ::symphony::proto::DBMailItem* add_maillist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMailItem >&
      maillist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBMailData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMailItem > maillist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBActivityItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBActivityItem) */ {
 public:
  inline DBActivityItem() : DBActivityItem(nullptr) {}
  ~DBActivityItem() override;
  explicit PROTOBUF_CONSTEXPR DBActivityItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBActivityItem(const DBActivityItem& from);
  DBActivityItem(DBActivityItem&& from) noexcept
    : DBActivityItem() {
    *this = ::std::move(from);
  }

  inline DBActivityItem& operator=(const DBActivityItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBActivityItem& operator=(DBActivityItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBActivityItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBActivityItem* internal_default_instance() {
    return reinterpret_cast<const DBActivityItem*>(
               &_DBActivityItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DBActivityItem& a, DBActivityItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBActivityItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBActivityItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBActivityItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBActivityItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBActivityItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBActivityItem& from) {
    DBActivityItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBActivityItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBActivityItem";
  }
  protected:
  explicit DBActivityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 6,
    kRoleIDFieldNumber = 1,
    kActivityIDFieldNumber = 2,
    kActivityTypeFieldNumber = 3,
    kJoinTimeFieldNumber = 4,
    kDataLenFieldNumber = 5,
  };
  // optional bytes Data = 6;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 ActivityID = 2;
  bool has_activityid() const;
  private:
  bool _internal_has_activityid() const;
  public:
  void clear_activityid();
  uint32_t activityid() const;
  void set_activityid(uint32_t value);
  private:
  uint32_t _internal_activityid() const;
  void _internal_set_activityid(uint32_t value);
  public:

  // optional uint32 ActivityType = 3;
  bool has_activitytype() const;
  private:
  bool _internal_has_activitytype() const;
  public:
  void clear_activitytype();
  uint32_t activitytype() const;
  void set_activitytype(uint32_t value);
  private:
  uint32_t _internal_activitytype() const;
  void _internal_set_activitytype(uint32_t value);
  public:

  // optional uint32 JoinTime = 4;
  bool has_jointime() const;
  private:
  bool _internal_has_jointime() const;
  public:
  void clear_jointime();
  uint32_t jointime() const;
  void set_jointime(uint32_t value);
  private:
  uint32_t _internal_jointime() const;
  void _internal_set_jointime(uint32_t value);
  public:

  // optional uint32 DataLen = 5;
  bool has_datalen() const;
  private:
  bool _internal_has_datalen() const;
  public:
  void clear_datalen();
  uint32_t datalen() const;
  void set_datalen(uint32_t value);
  private:
  uint32_t _internal_datalen() const;
  void _internal_set_datalen(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBActivityItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    uint64_t roleid_;
    uint32_t activityid_;
    uint32_t activitytype_;
    uint32_t jointime_;
    uint32_t datalen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBActivityData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBActivityData) */ {
 public:
  inline DBActivityData() : DBActivityData(nullptr) {}
  ~DBActivityData() override;
  explicit PROTOBUF_CONSTEXPR DBActivityData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBActivityData(const DBActivityData& from);
  DBActivityData(DBActivityData&& from) noexcept
    : DBActivityData() {
    *this = ::std::move(from);
  }

  inline DBActivityData& operator=(const DBActivityData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBActivityData& operator=(DBActivityData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBActivityData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBActivityData* internal_default_instance() {
    return reinterpret_cast<const DBActivityData*>(
               &_DBActivityData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DBActivityData& a, DBActivityData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBActivityData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBActivityData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBActivityData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBActivityData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBActivityData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBActivityData& from) {
    DBActivityData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBActivityData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBActivityData";
  }
  protected:
  explicit DBActivityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivityListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBActivityItem ActivityList = 1;
  int activitylist_size() const;
  private:
  int _internal_activitylist_size() const;
  public:
  void clear_activitylist();
  ::symphony::proto::DBActivityItem* mutable_activitylist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBActivityItem >*
      mutable_activitylist();
  private:
  const ::symphony::proto::DBActivityItem& _internal_activitylist(int index) const;
  ::symphony::proto::DBActivityItem* _internal_add_activitylist();
  public:
  const ::symphony::proto::DBActivityItem& activitylist(int index) const;
  ::symphony::proto::DBActivityItem* add_activitylist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBActivityItem >&
      activitylist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBActivityData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBActivityItem > activitylist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBCounterItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBCounterItem) */ {
 public:
  inline DBCounterItem() : DBCounterItem(nullptr) {}
  ~DBCounterItem() override;
  explicit PROTOBUF_CONSTEXPR DBCounterItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBCounterItem(const DBCounterItem& from);
  DBCounterItem(DBCounterItem&& from) noexcept
    : DBCounterItem() {
    *this = ::std::move(from);
  }

  inline DBCounterItem& operator=(const DBCounterItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCounterItem& operator=(DBCounterItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBCounterItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBCounterItem* internal_default_instance() {
    return reinterpret_cast<const DBCounterItem*>(
               &_DBCounterItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(DBCounterItem& a, DBCounterItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCounterItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBCounterItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBCounterItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBCounterItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBCounterItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBCounterItem& from) {
    DBCounterItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCounterItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBCounterItem";
  }
  protected:
  explicit DBCounterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kCounterIDFieldNumber = 2,
    kIndexFieldNumber = 3,
    kValueFieldNumber = 4,
    kTimeFieldNumber = 5,
    kParam1FieldNumber = 6,
    kParam2FieldNumber = 7,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 CounterID = 2;
  bool has_counterid() const;
  private:
  bool _internal_has_counterid() const;
  public:
  void clear_counterid();
  uint32_t counterid() const;
  void set_counterid(uint32_t value);
  private:
  uint32_t _internal_counterid() const;
  void _internal_set_counterid(uint32_t value);
  public:

  // optional uint32 Index = 3;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // optional int64 Value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // optional uint64 Time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // optional uint32 Param1 = 6;
  bool has_param1() const;
  private:
  bool _internal_has_param1() const;
  public:
  void clear_param1();
  uint32_t param1() const;
  void set_param1(uint32_t value);
  private:
  uint32_t _internal_param1() const;
  void _internal_set_param1(uint32_t value);
  public:

  // optional uint32 Param2 = 7;
  bool has_param2() const;
  private:
  bool _internal_has_param2() const;
  public:
  void clear_param2();
  uint32_t param2() const;
  void set_param2(uint32_t value);
  private:
  uint32_t _internal_param2() const;
  void _internal_set_param2(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBCounterItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint32_t counterid_;
    uint32_t index_;
    int64_t value_;
    uint64_t time_;
    uint32_t param1_;
    uint32_t param2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBCounterData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBCounterData) */ {
 public:
  inline DBCounterData() : DBCounterData(nullptr) {}
  ~DBCounterData() override;
  explicit PROTOBUF_CONSTEXPR DBCounterData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBCounterData(const DBCounterData& from);
  DBCounterData(DBCounterData&& from) noexcept
    : DBCounterData() {
    *this = ::std::move(from);
  }

  inline DBCounterData& operator=(const DBCounterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBCounterData& operator=(DBCounterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBCounterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBCounterData* internal_default_instance() {
    return reinterpret_cast<const DBCounterData*>(
               &_DBCounterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DBCounterData& a, DBCounterData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBCounterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBCounterData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBCounterData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBCounterData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBCounterData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBCounterData& from) {
    DBCounterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBCounterData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBCounterData";
  }
  protected:
  explicit DBCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBCounterItem CounterList = 1;
  int counterlist_size() const;
  private:
  int _internal_counterlist_size() const;
  public:
  void clear_counterlist();
  ::symphony::proto::DBCounterItem* mutable_counterlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCounterItem >*
      mutable_counterlist();
  private:
  const ::symphony::proto::DBCounterItem& _internal_counterlist(int index) const;
  ::symphony::proto::DBCounterItem* _internal_add_counterlist();
  public:
  const ::symphony::proto::DBCounterItem& counterlist(int index) const;
  ::symphony::proto::DBCounterItem* add_counterlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCounterItem >&
      counterlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBCounterData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCounterItem > counterlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBFriendItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBFriendItem) */ {
 public:
  inline DBFriendItem() : DBFriendItem(nullptr) {}
  ~DBFriendItem() override;
  explicit PROTOBUF_CONSTEXPR DBFriendItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBFriendItem(const DBFriendItem& from);
  DBFriendItem(DBFriendItem&& from) noexcept
    : DBFriendItem() {
    *this = ::std::move(from);
  }

  inline DBFriendItem& operator=(const DBFriendItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBFriendItem& operator=(DBFriendItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBFriendItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBFriendItem* internal_default_instance() {
    return reinterpret_cast<const DBFriendItem*>(
               &_DBFriendItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DBFriendItem& a, DBFriendItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DBFriendItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBFriendItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBFriendItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBFriendItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBFriendItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBFriendItem& from) {
    DBFriendItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBFriendItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBFriendItem";
  }
  protected:
  explicit DBFriendItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kFriendIDFieldNumber = 2,
  };
  // optional uint64 RoleID = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint64 FriendID = 2;
  bool has_friendid() const;
  private:
  bool _internal_has_friendid() const;
  public:
  void clear_friendid();
  uint64_t friendid() const;
  void set_friendid(uint64_t value);
  private:
  uint64_t _internal_friendid() const;
  void _internal_set_friendid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBFriendItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t roleid_;
    uint64_t friendid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBFriendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBFriendData) */ {
 public:
  inline DBFriendData() : DBFriendData(nullptr) {}
  ~DBFriendData() override;
  explicit PROTOBUF_CONSTEXPR DBFriendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBFriendData(const DBFriendData& from);
  DBFriendData(DBFriendData&& from) noexcept
    : DBFriendData() {
    *this = ::std::move(from);
  }

  inline DBFriendData& operator=(const DBFriendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBFriendData& operator=(DBFriendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBFriendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBFriendData* internal_default_instance() {
    return reinterpret_cast<const DBFriendData*>(
               &_DBFriendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DBFriendData& a, DBFriendData& b) {
    a.Swap(&b);
  }
  inline void Swap(DBFriendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBFriendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBFriendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBFriendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBFriendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBFriendData& from) {
    DBFriendData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBFriendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBFriendData";
  }
  protected:
  explicit DBFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendListFieldNumber = 1,
  };
  // repeated .symphony.proto.DBFriendItem FriendList = 1;
  int friendlist_size() const;
  private:
  int _internal_friendlist_size() const;
  public:
  void clear_friendlist();
  ::symphony::proto::DBFriendItem* mutable_friendlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBFriendItem >*
      mutable_friendlist();
  private:
  const ::symphony::proto::DBFriendItem& _internal_friendlist(int index) const;
  ::symphony::proto::DBFriendItem* _internal_add_friendlist();
  public:
  const ::symphony::proto::DBFriendItem& friendlist(int index) const;
  ::symphony::proto::DBFriendItem* add_friendlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBFriendItem >&
      friendlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.DBFriendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBFriendItem > friendlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// -------------------------------------------------------------------

class DBRoleLoginAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.DBRoleLoginAck) */ {
 public:
  inline DBRoleLoginAck() : DBRoleLoginAck(nullptr) {}
  ~DBRoleLoginAck() override;
  explicit PROTOBUF_CONSTEXPR DBRoleLoginAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DBRoleLoginAck(const DBRoleLoginAck& from);
  DBRoleLoginAck(DBRoleLoginAck&& from) noexcept
    : DBRoleLoginAck() {
    *this = ::std::move(from);
  }

  inline DBRoleLoginAck& operator=(const DBRoleLoginAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline DBRoleLoginAck& operator=(DBRoleLoginAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DBRoleLoginAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const DBRoleLoginAck* internal_default_instance() {
    return reinterpret_cast<const DBRoleLoginAck*>(
               &_DBRoleLoginAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DBRoleLoginAck& a, DBRoleLoginAck& b) {
    a.Swap(&b);
  }
  inline void Swap(DBRoleLoginAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DBRoleLoginAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DBRoleLoginAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DBRoleLoginAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DBRoleLoginAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DBRoleLoginAck& from) {
    DBRoleLoginAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DBRoleLoginAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.DBRoleLoginAck";
  }
  protected:
  explicit DBRoleLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleDataFieldNumber = 3,
    kBagDataFieldNumber = 4,
    kCopyDataFieldNumber = 5,
    kEquipDataFieldNumber = 6,
    kGemDataFieldNumber = 7,
    kPetDataFieldNumber = 8,
    kPartnerDataFieldNumber = 9,
    kTaskDataFieldNumber = 10,
    kMailDataFieldNumber = 11,
    kMountDataFieldNumber = 12,
    kActivityDataFieldNumber = 13,
    kCounterDataFieldNumber = 14,
    kFriendDataFieldNumber = 15,
    kSkillDataFieldNumber = 16,
    kRoleIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // optional .symphony.proto.DBRoleData RoleData = 3;
  bool has_roledata() const;
  private:
  bool _internal_has_roledata() const;
  public:
  void clear_roledata();
  const ::symphony::proto::DBRoleData& roledata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBRoleData* release_roledata();
  ::symphony::proto::DBRoleData* mutable_roledata();
  void set_allocated_roledata(::symphony::proto::DBRoleData* roledata);
  private:
  const ::symphony::proto::DBRoleData& _internal_roledata() const;
  ::symphony::proto::DBRoleData* _internal_mutable_roledata();
  public:
  void unsafe_arena_set_allocated_roledata(
      ::symphony::proto::DBRoleData* roledata);
  ::symphony::proto::DBRoleData* unsafe_arena_release_roledata();

  // optional .symphony.proto.DBBagData BagData = 4;
  bool has_bagdata() const;
  private:
  bool _internal_has_bagdata() const;
  public:
  void clear_bagdata();
  const ::symphony::proto::DBBagData& bagdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBBagData* release_bagdata();
  ::symphony::proto::DBBagData* mutable_bagdata();
  void set_allocated_bagdata(::symphony::proto::DBBagData* bagdata);
  private:
  const ::symphony::proto::DBBagData& _internal_bagdata() const;
  ::symphony::proto::DBBagData* _internal_mutable_bagdata();
  public:
  void unsafe_arena_set_allocated_bagdata(
      ::symphony::proto::DBBagData* bagdata);
  ::symphony::proto::DBBagData* unsafe_arena_release_bagdata();

  // optional .symphony.proto.DBCopyData CopyData = 5;
  bool has_copydata() const;
  private:
  bool _internal_has_copydata() const;
  public:
  void clear_copydata();
  const ::symphony::proto::DBCopyData& copydata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBCopyData* release_copydata();
  ::symphony::proto::DBCopyData* mutable_copydata();
  void set_allocated_copydata(::symphony::proto::DBCopyData* copydata);
  private:
  const ::symphony::proto::DBCopyData& _internal_copydata() const;
  ::symphony::proto::DBCopyData* _internal_mutable_copydata();
  public:
  void unsafe_arena_set_allocated_copydata(
      ::symphony::proto::DBCopyData* copydata);
  ::symphony::proto::DBCopyData* unsafe_arena_release_copydata();

  // optional .symphony.proto.DBEquipData EquipData = 6;
  bool has_equipdata() const;
  private:
  bool _internal_has_equipdata() const;
  public:
  void clear_equipdata();
  const ::symphony::proto::DBEquipData& equipdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBEquipData* release_equipdata();
  ::symphony::proto::DBEquipData* mutable_equipdata();
  void set_allocated_equipdata(::symphony::proto::DBEquipData* equipdata);
  private:
  const ::symphony::proto::DBEquipData& _internal_equipdata() const;
  ::symphony::proto::DBEquipData* _internal_mutable_equipdata();
  public:
  void unsafe_arena_set_allocated_equipdata(
      ::symphony::proto::DBEquipData* equipdata);
  ::symphony::proto::DBEquipData* unsafe_arena_release_equipdata();

  // optional .symphony.proto.DBGemData GemData = 7;
  bool has_gemdata() const;
  private:
  bool _internal_has_gemdata() const;
  public:
  void clear_gemdata();
  const ::symphony::proto::DBGemData& gemdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBGemData* release_gemdata();
  ::symphony::proto::DBGemData* mutable_gemdata();
  void set_allocated_gemdata(::symphony::proto::DBGemData* gemdata);
  private:
  const ::symphony::proto::DBGemData& _internal_gemdata() const;
  ::symphony::proto::DBGemData* _internal_mutable_gemdata();
  public:
  void unsafe_arena_set_allocated_gemdata(
      ::symphony::proto::DBGemData* gemdata);
  ::symphony::proto::DBGemData* unsafe_arena_release_gemdata();

  // optional .symphony.proto.DBPetData PetData = 8;
  bool has_petdata() const;
  private:
  bool _internal_has_petdata() const;
  public:
  void clear_petdata();
  const ::symphony::proto::DBPetData& petdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBPetData* release_petdata();
  ::symphony::proto::DBPetData* mutable_petdata();
  void set_allocated_petdata(::symphony::proto::DBPetData* petdata);
  private:
  const ::symphony::proto::DBPetData& _internal_petdata() const;
  ::symphony::proto::DBPetData* _internal_mutable_petdata();
  public:
  void unsafe_arena_set_allocated_petdata(
      ::symphony::proto::DBPetData* petdata);
  ::symphony::proto::DBPetData* unsafe_arena_release_petdata();

  // optional .symphony.proto.DBPartnerData PartnerData = 9;
  bool has_partnerdata() const;
  private:
  bool _internal_has_partnerdata() const;
  public:
  void clear_partnerdata();
  const ::symphony::proto::DBPartnerData& partnerdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBPartnerData* release_partnerdata();
  ::symphony::proto::DBPartnerData* mutable_partnerdata();
  void set_allocated_partnerdata(::symphony::proto::DBPartnerData* partnerdata);
  private:
  const ::symphony::proto::DBPartnerData& _internal_partnerdata() const;
  ::symphony::proto::DBPartnerData* _internal_mutable_partnerdata();
  public:
  void unsafe_arena_set_allocated_partnerdata(
      ::symphony::proto::DBPartnerData* partnerdata);
  ::symphony::proto::DBPartnerData* unsafe_arena_release_partnerdata();

  // optional .symphony.proto.DBTaskData TaskData = 10;
  bool has_taskdata() const;
  private:
  bool _internal_has_taskdata() const;
  public:
  void clear_taskdata();
  const ::symphony::proto::DBTaskData& taskdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBTaskData* release_taskdata();
  ::symphony::proto::DBTaskData* mutable_taskdata();
  void set_allocated_taskdata(::symphony::proto::DBTaskData* taskdata);
  private:
  const ::symphony::proto::DBTaskData& _internal_taskdata() const;
  ::symphony::proto::DBTaskData* _internal_mutable_taskdata();
  public:
  void unsafe_arena_set_allocated_taskdata(
      ::symphony::proto::DBTaskData* taskdata);
  ::symphony::proto::DBTaskData* unsafe_arena_release_taskdata();

  // optional .symphony.proto.DBMailData MailData = 11;
  bool has_maildata() const;
  private:
  bool _internal_has_maildata() const;
  public:
  void clear_maildata();
  const ::symphony::proto::DBMailData& maildata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBMailData* release_maildata();
  ::symphony::proto::DBMailData* mutable_maildata();
  void set_allocated_maildata(::symphony::proto::DBMailData* maildata);
  private:
  const ::symphony::proto::DBMailData& _internal_maildata() const;
  ::symphony::proto::DBMailData* _internal_mutable_maildata();
  public:
  void unsafe_arena_set_allocated_maildata(
      ::symphony::proto::DBMailData* maildata);
  ::symphony::proto::DBMailData* unsafe_arena_release_maildata();

  // optional .symphony.proto.DBMountData MountData = 12;
  bool has_mountdata() const;
  private:
  bool _internal_has_mountdata() const;
  public:
  void clear_mountdata();
  const ::symphony::proto::DBMountData& mountdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBMountData* release_mountdata();
  ::symphony::proto::DBMountData* mutable_mountdata();
  void set_allocated_mountdata(::symphony::proto::DBMountData* mountdata);
  private:
  const ::symphony::proto::DBMountData& _internal_mountdata() const;
  ::symphony::proto::DBMountData* _internal_mutable_mountdata();
  public:
  void unsafe_arena_set_allocated_mountdata(
      ::symphony::proto::DBMountData* mountdata);
  ::symphony::proto::DBMountData* unsafe_arena_release_mountdata();

  // optional .symphony.proto.DBActivityData ActivityData = 13;
  bool has_activitydata() const;
  private:
  bool _internal_has_activitydata() const;
  public:
  void clear_activitydata();
  const ::symphony::proto::DBActivityData& activitydata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBActivityData* release_activitydata();
  ::symphony::proto::DBActivityData* mutable_activitydata();
  void set_allocated_activitydata(::symphony::proto::DBActivityData* activitydata);
  private:
  const ::symphony::proto::DBActivityData& _internal_activitydata() const;
  ::symphony::proto::DBActivityData* _internal_mutable_activitydata();
  public:
  void unsafe_arena_set_allocated_activitydata(
      ::symphony::proto::DBActivityData* activitydata);
  ::symphony::proto::DBActivityData* unsafe_arena_release_activitydata();

  // optional .symphony.proto.DBCounterData CounterData = 14;
  bool has_counterdata() const;
  private:
  bool _internal_has_counterdata() const;
  public:
  void clear_counterdata();
  const ::symphony::proto::DBCounterData& counterdata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBCounterData* release_counterdata();
  ::symphony::proto::DBCounterData* mutable_counterdata();
  void set_allocated_counterdata(::symphony::proto::DBCounterData* counterdata);
  private:
  const ::symphony::proto::DBCounterData& _internal_counterdata() const;
  ::symphony::proto::DBCounterData* _internal_mutable_counterdata();
  public:
  void unsafe_arena_set_allocated_counterdata(
      ::symphony::proto::DBCounterData* counterdata);
  ::symphony::proto::DBCounterData* unsafe_arena_release_counterdata();

  // optional .symphony.proto.DBFriendData FriendData = 15;
  bool has_frienddata() const;
  private:
  bool _internal_has_frienddata() const;
  public:
  void clear_frienddata();
  const ::symphony::proto::DBFriendData& frienddata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBFriendData* release_frienddata();
  ::symphony::proto::DBFriendData* mutable_frienddata();
  void set_allocated_frienddata(::symphony::proto::DBFriendData* frienddata);
  private:
  const ::symphony::proto::DBFriendData& _internal_frienddata() const;
  ::symphony::proto::DBFriendData* _internal_mutable_frienddata();
  public:
  void unsafe_arena_set_allocated_frienddata(
      ::symphony::proto::DBFriendData* frienddata);
  ::symphony::proto::DBFriendData* unsafe_arena_release_frienddata();

  // optional .symphony.proto.DBSkillData SkillData = 16;
  bool has_skilldata() const;
  private:
  bool _internal_has_skilldata() const;
  public:
  void clear_skilldata();
  const ::symphony::proto::DBSkillData& skilldata() const;
  PROTOBUF_NODISCARD ::symphony::proto::DBSkillData* release_skilldata();
  ::symphony::proto::DBSkillData* mutable_skilldata();
  void set_allocated_skilldata(::symphony::proto::DBSkillData* skilldata);
  private:
  const ::symphony::proto::DBSkillData& _internal_skilldata() const;
  ::symphony::proto::DBSkillData* _internal_mutable_skilldata();
  public:
  void unsafe_arena_set_allocated_skilldata(
      ::symphony::proto::DBSkillData* skilldata);
  ::symphony::proto::DBSkillData* unsafe_arena_release_skilldata();

  // optional uint64 RoleID = 2;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // optional uint32 RetCode = 1;
  bool has_retcode() const;
  private:
  bool _internal_has_retcode() const;
  public:
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.DBRoleLoginAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::symphony::proto::DBRoleData* roledata_;
    ::symphony::proto::DBBagData* bagdata_;
    ::symphony::proto::DBCopyData* copydata_;
    ::symphony::proto::DBEquipData* equipdata_;
    ::symphony::proto::DBGemData* gemdata_;
    ::symphony::proto::DBPetData* petdata_;
    ::symphony::proto::DBPartnerData* partnerdata_;
    ::symphony::proto::DBTaskData* taskdata_;
    ::symphony::proto::DBMailData* maildata_;
    ::symphony::proto::DBMountData* mountdata_;
    ::symphony::proto::DBActivityData* activitydata_;
    ::symphony::proto::DBCounterData* counterdata_;
    ::symphony::proto::DBFriendData* frienddata_;
    ::symphony::proto::DBSkillData* skilldata_;
    uint64_t roleid_;
    uint32_t retcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DBRoleData

// optional uint64 AccountID = 1;
inline bool DBRoleData::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBRoleData::has_accountid() const {
  return _internal_has_accountid();
}
inline void DBRoleData::clear_accountid() {
  _impl_.accountid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBRoleData::_internal_accountid() const {
  return _impl_.accountid_;
}
inline uint64_t DBRoleData::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.AccountID)
  return _internal_accountid();
}
inline void DBRoleData::_internal_set_accountid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accountid_ = value;
}
inline void DBRoleData::set_accountid(uint64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.AccountID)
}

// optional uint64 RoleID = 2;
inline bool DBRoleData::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBRoleData::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBRoleData::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t DBRoleData::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBRoleData::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.RoleID)
  return _internal_roleid();
}
inline void DBRoleData::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.roleid_ = value;
}
inline void DBRoleData::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.RoleID)
}

// optional int32 CarrerID = 3;
inline bool DBRoleData::_internal_has_carrerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBRoleData::has_carrerid() const {
  return _internal_has_carrerid();
}
inline void DBRoleData::clear_carrerid() {
  _impl_.carrerid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBRoleData::_internal_carrerid() const {
  return _impl_.carrerid_;
}
inline int32_t DBRoleData::carrerid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.CarrerID)
  return _internal_carrerid();
}
inline void DBRoleData::_internal_set_carrerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.carrerid_ = value;
}
inline void DBRoleData::set_carrerid(int32_t value) {
  _internal_set_carrerid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.CarrerID)
}

// optional int32 Level = 4;
inline bool DBRoleData::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBRoleData::has_level() const {
  return _internal_has_level();
}
inline void DBRoleData::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBRoleData::_internal_level() const {
  return _impl_.level_;
}
inline int32_t DBRoleData::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Level)
  return _internal_level();
}
inline void DBRoleData::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}
inline void DBRoleData::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Level)
}

// optional int64 Exp = 5;
inline bool DBRoleData::_internal_has_exp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBRoleData::has_exp() const {
  return _internal_has_exp();
}
inline void DBRoleData::clear_exp() {
  _impl_.exp_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t DBRoleData::_internal_exp() const {
  return _impl_.exp_;
}
inline int64_t DBRoleData::exp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Exp)
  return _internal_exp();
}
inline void DBRoleData::_internal_set_exp(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.exp_ = value;
}
inline void DBRoleData::set_exp(int64_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Exp)
}

// optional string Name = 6;
inline bool DBRoleData::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBRoleData::has_name() const {
  return _internal_has_name();
}
inline void DBRoleData::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBRoleData::name() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBRoleData::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Name)
}
inline std::string* DBRoleData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleData.Name)
  return _s;
}
inline const std::string& DBRoleData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DBRoleData::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DBRoleData::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DBRoleData::release_name() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleData.Name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBRoleData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleData.Name)
}

// optional int32 LangID = 7;
inline bool DBRoleData::_internal_has_langid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBRoleData::has_langid() const {
  return _internal_has_langid();
}
inline void DBRoleData::clear_langid() {
  _impl_.langid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DBRoleData::_internal_langid() const {
  return _impl_.langid_;
}
inline int32_t DBRoleData::langid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.LangID)
  return _internal_langid();
}
inline void DBRoleData::_internal_set_langid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.langid_ = value;
}
inline void DBRoleData::set_langid(int32_t value) {
  _internal_set_langid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.LangID)
}

// optional int32 VipLvl = 8;
inline bool DBRoleData::_internal_has_viplvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DBRoleData::has_viplvl() const {
  return _internal_has_viplvl();
}
inline void DBRoleData::clear_viplvl() {
  _impl_.viplvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DBRoleData::_internal_viplvl() const {
  return _impl_.viplvl_;
}
inline int32_t DBRoleData::viplvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.VipLvl)
  return _internal_viplvl();
}
inline void DBRoleData::_internal_set_viplvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.viplvl_ = value;
}
inline void DBRoleData::set_viplvl(int32_t value) {
  _internal_set_viplvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.VipLvl)
}

// optional int32 VipExp = 9;
inline bool DBRoleData::_internal_has_vipexp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DBRoleData::has_vipexp() const {
  return _internal_has_vipexp();
}
inline void DBRoleData::clear_vipexp() {
  _impl_.vipexp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t DBRoleData::_internal_vipexp() const {
  return _impl_.vipexp_;
}
inline int32_t DBRoleData::vipexp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.VipExp)
  return _internal_vipexp();
}
inline void DBRoleData::_internal_set_vipexp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.vipexp_ = value;
}
inline void DBRoleData::set_vipexp(int32_t value) {
  _internal_set_vipexp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.VipExp)
}

// optional int64 FightValue = 10;
inline bool DBRoleData::_internal_has_fightvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DBRoleData::has_fightvalue() const {
  return _internal_has_fightvalue();
}
inline void DBRoleData::clear_fightvalue() {
  _impl_.fightvalue_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t DBRoleData::_internal_fightvalue() const {
  return _impl_.fightvalue_;
}
inline int64_t DBRoleData::fightvalue() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.FightValue)
  return _internal_fightvalue();
}
inline void DBRoleData::_internal_set_fightvalue(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.fightvalue_ = value;
}
inline void DBRoleData::set_fightvalue(int64_t value) {
  _internal_set_fightvalue(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.FightValue)
}

// optional int32 CityCopyID = 11;
inline bool DBRoleData::_internal_has_citycopyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DBRoleData::has_citycopyid() const {
  return _internal_has_citycopyid();
}
inline void DBRoleData::clear_citycopyid() {
  _impl_.citycopyid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t DBRoleData::_internal_citycopyid() const {
  return _impl_.citycopyid_;
}
inline int32_t DBRoleData::citycopyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.CityCopyID)
  return _internal_citycopyid();
}
inline void DBRoleData::_internal_set_citycopyid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.citycopyid_ = value;
}
inline void DBRoleData::set_citycopyid(int32_t value) {
  _internal_set_citycopyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.CityCopyID)
}

// repeated int64 Action = 12;
inline int DBRoleData::_internal_action_size() const {
  return _impl_.action_.size();
}
inline int DBRoleData::action_size() const {
  return _internal_action_size();
}
inline void DBRoleData::clear_action() {
  _impl_.action_.Clear();
}
inline int64_t DBRoleData::_internal_action(int index) const {
  return _impl_.action_.Get(index);
}
inline int64_t DBRoleData::action(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Action)
  return _internal_action(index);
}
inline void DBRoleData::set_action(int index, int64_t value) {
  _impl_.action_.Set(index, value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Action)
}
inline void DBRoleData::_internal_add_action(int64_t value) {
  _impl_.action_.Add(value);
}
inline void DBRoleData::add_action(int64_t value) {
  _internal_add_action(value);
  // @@protoc_insertion_point(field_add:symphony.proto.DBRoleData.Action)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DBRoleData::_internal_action() const {
  return _impl_.action_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DBRoleData::action() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBRoleData.Action)
  return _internal_action();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DBRoleData::_internal_mutable_action() {
  return &_impl_.action_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DBRoleData::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBRoleData.Action)
  return _internal_mutable_action();
}

// repeated int64 Actime = 13;
inline int DBRoleData::_internal_actime_size() const {
  return _impl_.actime_.size();
}
inline int DBRoleData::actime_size() const {
  return _internal_actime_size();
}
inline void DBRoleData::clear_actime() {
  _impl_.actime_.Clear();
}
inline int64_t DBRoleData::_internal_actime(int index) const {
  return _impl_.actime_.Get(index);
}
inline int64_t DBRoleData::actime(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Actime)
  return _internal_actime(index);
}
inline void DBRoleData::set_actime(int index, int64_t value) {
  _impl_.actime_.Set(index, value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Actime)
}
inline void DBRoleData::_internal_add_actime(int64_t value) {
  _impl_.actime_.Add(value);
}
inline void DBRoleData::add_actime(int64_t value) {
  _internal_add_actime(value);
  // @@protoc_insertion_point(field_add:symphony.proto.DBRoleData.Actime)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DBRoleData::_internal_actime() const {
  return _impl_.actime_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
DBRoleData::actime() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBRoleData.Actime)
  return _internal_actime();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DBRoleData::_internal_mutable_actime() {
  return &_impl_.actime_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
DBRoleData::mutable_actime() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBRoleData.Actime)
  return _internal_mutable_actime();
}

// optional uint64 CreateTime = 14;
inline bool DBRoleData::_internal_has_createtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DBRoleData::has_createtime() const {
  return _internal_has_createtime();
}
inline void DBRoleData::clear_createtime() {
  _impl_.createtime_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t DBRoleData::_internal_createtime() const {
  return _impl_.createtime_;
}
inline uint64_t DBRoleData::createtime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.CreateTime)
  return _internal_createtime();
}
inline void DBRoleData::_internal_set_createtime(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.createtime_ = value;
}
inline void DBRoleData::set_createtime(uint64_t value) {
  _internal_set_createtime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.CreateTime)
}

// optional uint64 LogonTime = 15;
inline bool DBRoleData::_internal_has_logontime() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DBRoleData::has_logontime() const {
  return _internal_has_logontime();
}
inline void DBRoleData::clear_logontime() {
  _impl_.logontime_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t DBRoleData::_internal_logontime() const {
  return _impl_.logontime_;
}
inline uint64_t DBRoleData::logontime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.LogonTime)
  return _internal_logontime();
}
inline void DBRoleData::_internal_set_logontime(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.logontime_ = value;
}
inline void DBRoleData::set_logontime(uint64_t value) {
  _internal_set_logontime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.LogonTime)
}

// optional uint64 LogoffTime = 16;
inline bool DBRoleData::_internal_has_logofftime() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DBRoleData::has_logofftime() const {
  return _internal_has_logofftime();
}
inline void DBRoleData::clear_logofftime() {
  _impl_.logofftime_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t DBRoleData::_internal_logofftime() const {
  return _impl_.logofftime_;
}
inline uint64_t DBRoleData::logofftime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.LogoffTime)
  return _internal_logofftime();
}
inline void DBRoleData::_internal_set_logofftime(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.logofftime_ = value;
}
inline void DBRoleData::set_logofftime(uint64_t value) {
  _internal_set_logofftime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.LogoffTime)
}

// optional uint64 GuildID = 17;
inline bool DBRoleData::_internal_has_guildid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DBRoleData::has_guildid() const {
  return _internal_has_guildid();
}
inline void DBRoleData::clear_guildid() {
  _impl_.guildid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t DBRoleData::_internal_guildid() const {
  return _impl_.guildid_;
}
inline uint64_t DBRoleData::guildid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.GuildID)
  return _internal_guildid();
}
inline void DBRoleData::_internal_set_guildid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.guildid_ = value;
}
inline void DBRoleData::set_guildid(uint64_t value) {
  _internal_set_guildid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.GuildID)
}

// optional int32 Channel = 18;
inline bool DBRoleData::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DBRoleData::has_channel() const {
  return _internal_has_channel();
}
inline void DBRoleData::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t DBRoleData::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t DBRoleData::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.Channel)
  return _internal_channel();
}
inline void DBRoleData::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.channel_ = value;
}
inline void DBRoleData::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.Channel)
}

// optional uint32 OnlineTime = 19;
inline bool DBRoleData::_internal_has_onlinetime() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DBRoleData::has_onlinetime() const {
  return _internal_has_onlinetime();
}
inline void DBRoleData::clear_onlinetime() {
  _impl_.onlinetime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t DBRoleData::_internal_onlinetime() const {
  return _impl_.onlinetime_;
}
inline uint32_t DBRoleData::onlinetime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleData.OnlineTime)
  return _internal_onlinetime();
}
inline void DBRoleData::_internal_set_onlinetime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.onlinetime_ = value;
}
inline void DBRoleData::set_onlinetime(uint32_t value) {
  _internal_set_onlinetime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleData.OnlineTime)
}

// -------------------------------------------------------------------

// DBBagItem

// optional uint64 Guid = 1;
inline bool DBBagItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBBagItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBBagItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBBagItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBBagItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.Guid)
  return _internal_guid();
}
inline void DBBagItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guid_ = value;
}
inline void DBBagItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.Guid)
}

// optional uint64 RoleID = 2;
inline bool DBBagItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBBagItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBBagItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBBagItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBBagItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.RoleID)
  return _internal_roleid();
}
inline void DBBagItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roleid_ = value;
}
inline void DBBagItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.RoleID)
}

// optional uint64 ItemGuid = 3;
inline bool DBBagItem::_internal_has_itemguid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBBagItem::has_itemguid() const {
  return _internal_has_itemguid();
}
inline void DBBagItem::clear_itemguid() {
  _impl_.itemguid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t DBBagItem::_internal_itemguid() const {
  return _impl_.itemguid_;
}
inline uint64_t DBBagItem::itemguid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.ItemGuid)
  return _internal_itemguid();
}
inline void DBBagItem::_internal_set_itemguid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.itemguid_ = value;
}
inline void DBBagItem::set_itemguid(uint64_t value) {
  _internal_set_itemguid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.ItemGuid)
}

// optional uint32 ItemID = 4;
inline bool DBBagItem::_internal_has_itemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBBagItem::has_itemid() const {
  return _internal_has_itemid();
}
inline void DBBagItem::clear_itemid() {
  _impl_.itemid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DBBagItem::_internal_itemid() const {
  return _impl_.itemid_;
}
inline uint32_t DBBagItem::itemid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.ItemID)
  return _internal_itemid();
}
inline void DBBagItem::_internal_set_itemid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.itemid_ = value;
}
inline void DBBagItem::set_itemid(uint32_t value) {
  _internal_set_itemid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.ItemID)
}

// optional int64 Count = 5;
inline bool DBBagItem::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBBagItem::has_count() const {
  return _internal_has_count();
}
inline void DBBagItem::clear_count() {
  _impl_.count_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t DBBagItem::_internal_count() const {
  return _impl_.count_;
}
inline int64_t DBBagItem::count() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.Count)
  return _internal_count();
}
inline void DBBagItem::_internal_set_count(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.count_ = value;
}
inline void DBBagItem::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.Count)
}

// optional int32 Bind = 6;
inline bool DBBagItem::_internal_has_bind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBBagItem::has_bind() const {
  return _internal_has_bind();
}
inline void DBBagItem::clear_bind() {
  _impl_.bind_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBBagItem::_internal_bind() const {
  return _impl_.bind_;
}
inline int32_t DBBagItem::bind() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.Bind)
  return _internal_bind();
}
inline void DBBagItem::_internal_set_bind(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.bind_ = value;
}
inline void DBBagItem::set_bind(int32_t value) {
  _internal_set_bind(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.Bind)
}

// optional int32 Status = 7;
inline bool DBBagItem::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBBagItem::has_status() const {
  return _internal_has_status();
}
inline void DBBagItem::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DBBagItem::_internal_status() const {
  return _impl_.status_;
}
inline int32_t DBBagItem::status() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagItem.Status)
  return _internal_status();
}
inline void DBBagItem::_internal_set_status(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.status_ = value;
}
inline void DBBagItem::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBBagItem.Status)
}

// -------------------------------------------------------------------

// DBBagData

// repeated .symphony.proto.DBBagItem ItemList = 1;
inline int DBBagData::_internal_itemlist_size() const {
  return _impl_.itemlist_.size();
}
inline int DBBagData::itemlist_size() const {
  return _internal_itemlist_size();
}
inline void DBBagData::clear_itemlist() {
  _impl_.itemlist_.Clear();
}
inline ::symphony::proto::DBBagItem* DBBagData::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBBagData.ItemList)
  return _impl_.itemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBBagItem >*
DBBagData::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBBagData.ItemList)
  return &_impl_.itemlist_;
}
inline const ::symphony::proto::DBBagItem& DBBagData::_internal_itemlist(int index) const {
  return _impl_.itemlist_.Get(index);
}
inline const ::symphony::proto::DBBagItem& DBBagData::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBBagData.ItemList)
  return _internal_itemlist(index);
}
inline ::symphony::proto::DBBagItem* DBBagData::_internal_add_itemlist() {
  return _impl_.itemlist_.Add();
}
inline ::symphony::proto::DBBagItem* DBBagData::add_itemlist() {
  ::symphony::proto::DBBagItem* _add = _internal_add_itemlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBBagData.ItemList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBBagItem >&
DBBagData::itemlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBBagData.ItemList)
  return _impl_.itemlist_;
}

// -------------------------------------------------------------------

// DBCopyItem

// optional uint64 RoleID = 1;
inline bool DBCopyItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBCopyItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBCopyItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBCopyItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBCopyItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.RoleID)
  return _internal_roleid();
}
inline void DBCopyItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBCopyItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.RoleID)
}

// optional uint32 CopyID = 2;
inline bool DBCopyItem::_internal_has_copyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBCopyItem::has_copyid() const {
  return _internal_has_copyid();
}
inline void DBCopyItem::clear_copyid() {
  _impl_.copyid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DBCopyItem::_internal_copyid() const {
  return _impl_.copyid_;
}
inline uint32_t DBCopyItem::copyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.CopyID)
  return _internal_copyid();
}
inline void DBCopyItem::_internal_set_copyid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.copyid_ = value;
}
inline void DBCopyItem::set_copyid(uint32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.CopyID)
}

// optional int32 StarNum = 3;
inline bool DBCopyItem::_internal_has_starnum() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBCopyItem::has_starnum() const {
  return _internal_has_starnum();
}
inline void DBCopyItem::clear_starnum() {
  _impl_.starnum_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBCopyItem::_internal_starnum() const {
  return _impl_.starnum_;
}
inline int32_t DBCopyItem::starnum() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.StarNum)
  return _internal_starnum();
}
inline void DBCopyItem::_internal_set_starnum(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.starnum_ = value;
}
inline void DBCopyItem::set_starnum(int32_t value) {
  _internal_set_starnum(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.StarNum)
}

// optional int32 BattleCnt = 4;
inline bool DBCopyItem::_internal_has_battlecnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBCopyItem::has_battlecnt() const {
  return _internal_has_battlecnt();
}
inline void DBCopyItem::clear_battlecnt() {
  _impl_.battlecnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBCopyItem::_internal_battlecnt() const {
  return _impl_.battlecnt_;
}
inline int32_t DBCopyItem::battlecnt() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.BattleCnt)
  return _internal_battlecnt();
}
inline void DBCopyItem::_internal_set_battlecnt(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.battlecnt_ = value;
}
inline void DBCopyItem::set_battlecnt(int32_t value) {
  _internal_set_battlecnt(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.BattleCnt)
}

// optional int32 ResetCnt = 5;
inline bool DBCopyItem::_internal_has_resetcnt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBCopyItem::has_resetcnt() const {
  return _internal_has_resetcnt();
}
inline void DBCopyItem::clear_resetcnt() {
  _impl_.resetcnt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBCopyItem::_internal_resetcnt() const {
  return _impl_.resetcnt_;
}
inline int32_t DBCopyItem::resetcnt() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.ResetCnt)
  return _internal_resetcnt();
}
inline void DBCopyItem::_internal_set_resetcnt(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.resetcnt_ = value;
}
inline void DBCopyItem::set_resetcnt(int32_t value) {
  _internal_set_resetcnt(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.ResetCnt)
}

// optional uint64 BattleTime = 6;
inline bool DBCopyItem::_internal_has_battletime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBCopyItem::has_battletime() const {
  return _internal_has_battletime();
}
inline void DBCopyItem::clear_battletime() {
  _impl_.battletime_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t DBCopyItem::_internal_battletime() const {
  return _impl_.battletime_;
}
inline uint64_t DBCopyItem::battletime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.BattleTime)
  return _internal_battletime();
}
inline void DBCopyItem::_internal_set_battletime(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.battletime_ = value;
}
inline void DBCopyItem::set_battletime(uint64_t value) {
  _internal_set_battletime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.BattleTime)
}

// optional uint64 ResetTime = 7;
inline bool DBCopyItem::_internal_has_resettime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBCopyItem::has_resettime() const {
  return _internal_has_resettime();
}
inline void DBCopyItem::clear_resettime() {
  _impl_.resettime_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t DBCopyItem::_internal_resettime() const {
  return _impl_.resettime_;
}
inline uint64_t DBCopyItem::resettime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyItem.ResetTime)
  return _internal_resettime();
}
inline void DBCopyItem::_internal_set_resettime(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.resettime_ = value;
}
inline void DBCopyItem::set_resettime(uint64_t value) {
  _internal_set_resettime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCopyItem.ResetTime)
}

// -------------------------------------------------------------------

// DBChapterItem

// optional uint64 RoleID = 1;
inline bool DBChapterItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBChapterItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBChapterItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBChapterItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBChapterItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBChapterItem.RoleID)
  return _internal_roleid();
}
inline void DBChapterItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBChapterItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBChapterItem.RoleID)
}

// optional uint32 CopyType = 2;
inline bool DBChapterItem::_internal_has_copytype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBChapterItem::has_copytype() const {
  return _internal_has_copytype();
}
inline void DBChapterItem::clear_copytype() {
  _impl_.copytype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DBChapterItem::_internal_copytype() const {
  return _impl_.copytype_;
}
inline uint32_t DBChapterItem::copytype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBChapterItem.CopyType)
  return _internal_copytype();
}
inline void DBChapterItem::_internal_set_copytype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.copytype_ = value;
}
inline void DBChapterItem::set_copytype(uint32_t value) {
  _internal_set_copytype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBChapterItem.CopyType)
}

// optional uint32 ChapterID = 3;
inline bool DBChapterItem::_internal_has_chapterid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBChapterItem::has_chapterid() const {
  return _internal_has_chapterid();
}
inline void DBChapterItem::clear_chapterid() {
  _impl_.chapterid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DBChapterItem::_internal_chapterid() const {
  return _impl_.chapterid_;
}
inline uint32_t DBChapterItem::chapterid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBChapterItem.ChapterID)
  return _internal_chapterid();
}
inline void DBChapterItem::_internal_set_chapterid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chapterid_ = value;
}
inline void DBChapterItem::set_chapterid(uint32_t value) {
  _internal_set_chapterid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBChapterItem.ChapterID)
}

// optional uint32 StarAward = 4;
inline bool DBChapterItem::_internal_has_staraward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBChapterItem::has_staraward() const {
  return _internal_has_staraward();
}
inline void DBChapterItem::clear_staraward() {
  _impl_.staraward_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DBChapterItem::_internal_staraward() const {
  return _impl_.staraward_;
}
inline uint32_t DBChapterItem::staraward() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBChapterItem.StarAward)
  return _internal_staraward();
}
inline void DBChapterItem::_internal_set_staraward(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.staraward_ = value;
}
inline void DBChapterItem::set_staraward(uint32_t value) {
  _internal_set_staraward(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBChapterItem.StarAward)
}

// optional uint32 SceneAward = 5;
inline bool DBChapterItem::_internal_has_sceneaward() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBChapterItem::has_sceneaward() const {
  return _internal_has_sceneaward();
}
inline void DBChapterItem::clear_sceneaward() {
  _impl_.sceneaward_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DBChapterItem::_internal_sceneaward() const {
  return _impl_.sceneaward_;
}
inline uint32_t DBChapterItem::sceneaward() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBChapterItem.SceneAward)
  return _internal_sceneaward();
}
inline void DBChapterItem::_internal_set_sceneaward(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sceneaward_ = value;
}
inline void DBChapterItem::set_sceneaward(uint32_t value) {
  _internal_set_sceneaward(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBChapterItem.SceneAward)
}

// -------------------------------------------------------------------

// DBCopyData

// repeated .symphony.proto.DBCopyItem CopyList = 1;
inline int DBCopyData::_internal_copylist_size() const {
  return _impl_.copylist_.size();
}
inline int DBCopyData::copylist_size() const {
  return _internal_copylist_size();
}
inline void DBCopyData::clear_copylist() {
  _impl_.copylist_.Clear();
}
inline ::symphony::proto::DBCopyItem* DBCopyData::mutable_copylist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBCopyData.CopyList)
  return _impl_.copylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCopyItem >*
DBCopyData::mutable_copylist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBCopyData.CopyList)
  return &_impl_.copylist_;
}
inline const ::symphony::proto::DBCopyItem& DBCopyData::_internal_copylist(int index) const {
  return _impl_.copylist_.Get(index);
}
inline const ::symphony::proto::DBCopyItem& DBCopyData::copylist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyData.CopyList)
  return _internal_copylist(index);
}
inline ::symphony::proto::DBCopyItem* DBCopyData::_internal_add_copylist() {
  return _impl_.copylist_.Add();
}
inline ::symphony::proto::DBCopyItem* DBCopyData::add_copylist() {
  ::symphony::proto::DBCopyItem* _add = _internal_add_copylist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBCopyData.CopyList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCopyItem >&
DBCopyData::copylist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBCopyData.CopyList)
  return _impl_.copylist_;
}

// repeated .symphony.proto.DBChapterItem ChapterList = 2;
inline int DBCopyData::_internal_chapterlist_size() const {
  return _impl_.chapterlist_.size();
}
inline int DBCopyData::chapterlist_size() const {
  return _internal_chapterlist_size();
}
inline void DBCopyData::clear_chapterlist() {
  _impl_.chapterlist_.Clear();
}
inline ::symphony::proto::DBChapterItem* DBCopyData::mutable_chapterlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBCopyData.ChapterList)
  return _impl_.chapterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBChapterItem >*
DBCopyData::mutable_chapterlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBCopyData.ChapterList)
  return &_impl_.chapterlist_;
}
inline const ::symphony::proto::DBChapterItem& DBCopyData::_internal_chapterlist(int index) const {
  return _impl_.chapterlist_.Get(index);
}
inline const ::symphony::proto::DBChapterItem& DBCopyData::chapterlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCopyData.ChapterList)
  return _internal_chapterlist(index);
}
inline ::symphony::proto::DBChapterItem* DBCopyData::_internal_add_chapterlist() {
  return _impl_.chapterlist_.Add();
}
inline ::symphony::proto::DBChapterItem* DBCopyData::add_chapterlist() {
  ::symphony::proto::DBChapterItem* _add = _internal_add_chapterlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBCopyData.ChapterList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBChapterItem >&
DBCopyData::chapterlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBCopyData.ChapterList)
  return _impl_.chapterlist_;
}

// -------------------------------------------------------------------

// DBEquipItem

// optional uint64 RoleID = 1;
inline bool DBEquipItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBEquipItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBEquipItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBEquipItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBEquipItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.RoleID)
  return _internal_roleid();
}
inline void DBEquipItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBEquipItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBEquipItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBEquipItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBEquipItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBEquipItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBEquipItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.Guid)
  return _internal_guid();
}
inline void DBEquipItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guid_ = value;
}
inline void DBEquipItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.Guid)
}

// optional int32 EquipID = 3;
inline bool DBEquipItem::_internal_has_equipid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBEquipItem::has_equipid() const {
  return _internal_has_equipid();
}
inline void DBEquipItem::clear_equipid() {
  _impl_.equipid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBEquipItem::_internal_equipid() const {
  return _impl_.equipid_;
}
inline int32_t DBEquipItem::equipid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.EquipID)
  return _internal_equipid();
}
inline void DBEquipItem::_internal_set_equipid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.equipid_ = value;
}
inline void DBEquipItem::set_equipid(int32_t value) {
  _internal_set_equipid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.EquipID)
}

// optional int32 StrengthLvl = 4;
inline bool DBEquipItem::_internal_has_strengthlvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBEquipItem::has_strengthlvl() const {
  return _internal_has_strengthlvl();
}
inline void DBEquipItem::clear_strengthlvl() {
  _impl_.strengthlvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBEquipItem::_internal_strengthlvl() const {
  return _impl_.strengthlvl_;
}
inline int32_t DBEquipItem::strengthlvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.StrengthLvl)
  return _internal_strengthlvl();
}
inline void DBEquipItem::_internal_set_strengthlvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.strengthlvl_ = value;
}
inline void DBEquipItem::set_strengthlvl(int32_t value) {
  _internal_set_strengthlvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.StrengthLvl)
}

// optional int32 RefineLevel = 5;
inline bool DBEquipItem::_internal_has_refinelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBEquipItem::has_refinelevel() const {
  return _internal_has_refinelevel();
}
inline void DBEquipItem::clear_refinelevel() {
  _impl_.refinelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBEquipItem::_internal_refinelevel() const {
  return _impl_.refinelevel_;
}
inline int32_t DBEquipItem::refinelevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.RefineLevel)
  return _internal_refinelevel();
}
inline void DBEquipItem::_internal_set_refinelevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.refinelevel_ = value;
}
inline void DBEquipItem::set_refinelevel(int32_t value) {
  _internal_set_refinelevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.RefineLevel)
}

// optional int32 StarLevel = 6;
inline bool DBEquipItem::_internal_has_starlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBEquipItem::has_starlevel() const {
  return _internal_has_starlevel();
}
inline void DBEquipItem::clear_starlevel() {
  _impl_.starlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBEquipItem::_internal_starlevel() const {
  return _impl_.starlevel_;
}
inline int32_t DBEquipItem::starlevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.StarLevel)
  return _internal_starlevel();
}
inline void DBEquipItem::_internal_set_starlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starlevel_ = value;
}
inline void DBEquipItem::set_starlevel(int32_t value) {
  _internal_set_starlevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.StarLevel)
}

// optional int32 RefineExp = 7;
inline bool DBEquipItem::_internal_has_refineexp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBEquipItem::has_refineexp() const {
  return _internal_has_refineexp();
}
inline void DBEquipItem::clear_refineexp() {
  _impl_.refineexp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DBEquipItem::_internal_refineexp() const {
  return _impl_.refineexp_;
}
inline int32_t DBEquipItem::refineexp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.RefineExp)
  return _internal_refineexp();
}
inline void DBEquipItem::_internal_set_refineexp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.refineexp_ = value;
}
inline void DBEquipItem::set_refineexp(int32_t value) {
  _internal_set_refineexp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.RefineExp)
}

// optional int32 StarExp = 8;
inline bool DBEquipItem::_internal_has_starexp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DBEquipItem::has_starexp() const {
  return _internal_has_starexp();
}
inline void DBEquipItem::clear_starexp() {
  _impl_.starexp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DBEquipItem::_internal_starexp() const {
  return _impl_.starexp_;
}
inline int32_t DBEquipItem::starexp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.StarExp)
  return _internal_starexp();
}
inline void DBEquipItem::_internal_set_starexp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.starexp_ = value;
}
inline void DBEquipItem::set_starexp(int32_t value) {
  _internal_set_starexp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.StarExp)
}

// optional bool IsUsing = 9;
inline bool DBEquipItem::_internal_has_isusing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DBEquipItem::has_isusing() const {
  return _internal_has_isusing();
}
inline void DBEquipItem::clear_isusing() {
  _impl_.isusing_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool DBEquipItem::_internal_isusing() const {
  return _impl_.isusing_;
}
inline bool DBEquipItem::isusing() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipItem.IsUsing)
  return _internal_isusing();
}
inline void DBEquipItem::_internal_set_isusing(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isusing_ = value;
}
inline void DBEquipItem::set_isusing(bool value) {
  _internal_set_isusing(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBEquipItem.IsUsing)
}

// -------------------------------------------------------------------

// DBEquipData

// repeated .symphony.proto.DBEquipItem EquipList = 1;
inline int DBEquipData::_internal_equiplist_size() const {
  return _impl_.equiplist_.size();
}
inline int DBEquipData::equiplist_size() const {
  return _internal_equiplist_size();
}
inline void DBEquipData::clear_equiplist() {
  _impl_.equiplist_.Clear();
}
inline ::symphony::proto::DBEquipItem* DBEquipData::mutable_equiplist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBEquipData.EquipList)
  return _impl_.equiplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBEquipItem >*
DBEquipData::mutable_equiplist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBEquipData.EquipList)
  return &_impl_.equiplist_;
}
inline const ::symphony::proto::DBEquipItem& DBEquipData::_internal_equiplist(int index) const {
  return _impl_.equiplist_.Get(index);
}
inline const ::symphony::proto::DBEquipItem& DBEquipData::equiplist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBEquipData.EquipList)
  return _internal_equiplist(index);
}
inline ::symphony::proto::DBEquipItem* DBEquipData::_internal_add_equiplist() {
  return _impl_.equiplist_.Add();
}
inline ::symphony::proto::DBEquipItem* DBEquipData::add_equiplist() {
  ::symphony::proto::DBEquipItem* _add = _internal_add_equiplist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBEquipData.EquipList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBEquipItem >&
DBEquipData::equiplist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBEquipData.EquipList)
  return _impl_.equiplist_;
}

// -------------------------------------------------------------------

// DBGemItem

// optional uint64 RoleID = 1;
inline bool DBGemItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBGemItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBGemItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBGemItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBGemItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.RoleID)
  return _internal_roleid();
}
inline void DBGemItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBGemItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBGemItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBGemItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBGemItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBGemItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBGemItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.Guid)
  return _internal_guid();
}
inline void DBGemItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guid_ = value;
}
inline void DBGemItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.Guid)
}

// optional int32 GemID = 3;
inline bool DBGemItem::_internal_has_gemid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBGemItem::has_gemid() const {
  return _internal_has_gemid();
}
inline void DBGemItem::clear_gemid() {
  _impl_.gemid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBGemItem::_internal_gemid() const {
  return _impl_.gemid_;
}
inline int32_t DBGemItem::gemid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.GemID)
  return _internal_gemid();
}
inline void DBGemItem::_internal_set_gemid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gemid_ = value;
}
inline void DBGemItem::set_gemid(int32_t value) {
  _internal_set_gemid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.GemID)
}

// optional int32 StrengthLvl = 4;
inline bool DBGemItem::_internal_has_strengthlvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBGemItem::has_strengthlvl() const {
  return _internal_has_strengthlvl();
}
inline void DBGemItem::clear_strengthlvl() {
  _impl_.strengthlvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBGemItem::_internal_strengthlvl() const {
  return _impl_.strengthlvl_;
}
inline int32_t DBGemItem::strengthlvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.StrengthLvl)
  return _internal_strengthlvl();
}
inline void DBGemItem::_internal_set_strengthlvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.strengthlvl_ = value;
}
inline void DBGemItem::set_strengthlvl(int32_t value) {
  _internal_set_strengthlvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.StrengthLvl)
}

// optional int32 RefineLevel = 5;
inline bool DBGemItem::_internal_has_refinelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBGemItem::has_refinelevel() const {
  return _internal_has_refinelevel();
}
inline void DBGemItem::clear_refinelevel() {
  _impl_.refinelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBGemItem::_internal_refinelevel() const {
  return _impl_.refinelevel_;
}
inline int32_t DBGemItem::refinelevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.RefineLevel)
  return _internal_refinelevel();
}
inline void DBGemItem::_internal_set_refinelevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.refinelevel_ = value;
}
inline void DBGemItem::set_refinelevel(int32_t value) {
  _internal_set_refinelevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.RefineLevel)
}

// optional int32 StarLevel = 6;
inline bool DBGemItem::_internal_has_starlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBGemItem::has_starlevel() const {
  return _internal_has_starlevel();
}
inline void DBGemItem::clear_starlevel() {
  _impl_.starlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBGemItem::_internal_starlevel() const {
  return _impl_.starlevel_;
}
inline int32_t DBGemItem::starlevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.StarLevel)
  return _internal_starlevel();
}
inline void DBGemItem::_internal_set_starlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starlevel_ = value;
}
inline void DBGemItem::set_starlevel(int32_t value) {
  _internal_set_starlevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.StarLevel)
}

// optional int32 RefineExp = 7;
inline bool DBGemItem::_internal_has_refineexp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBGemItem::has_refineexp() const {
  return _internal_has_refineexp();
}
inline void DBGemItem::clear_refineexp() {
  _impl_.refineexp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DBGemItem::_internal_refineexp() const {
  return _impl_.refineexp_;
}
inline int32_t DBGemItem::refineexp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.RefineExp)
  return _internal_refineexp();
}
inline void DBGemItem::_internal_set_refineexp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.refineexp_ = value;
}
inline void DBGemItem::set_refineexp(int32_t value) {
  _internal_set_refineexp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.RefineExp)
}

// optional int32 StarExp = 8;
inline bool DBGemItem::_internal_has_starexp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DBGemItem::has_starexp() const {
  return _internal_has_starexp();
}
inline void DBGemItem::clear_starexp() {
  _impl_.starexp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t DBGemItem::_internal_starexp() const {
  return _impl_.starexp_;
}
inline int32_t DBGemItem::starexp() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.StarExp)
  return _internal_starexp();
}
inline void DBGemItem::_internal_set_starexp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.starexp_ = value;
}
inline void DBGemItem::set_starexp(int32_t value) {
  _internal_set_starexp(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.StarExp)
}

// optional int32 Pos = 9;
inline bool DBGemItem::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DBGemItem::has_pos() const {
  return _internal_has_pos();
}
inline void DBGemItem::clear_pos() {
  _impl_.pos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t DBGemItem::_internal_pos() const {
  return _impl_.pos_;
}
inline int32_t DBGemItem::pos() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemItem.Pos)
  return _internal_pos();
}
inline void DBGemItem::_internal_set_pos(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pos_ = value;
}
inline void DBGemItem::set_pos(int32_t value) {
  _internal_set_pos(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBGemItem.Pos)
}

// -------------------------------------------------------------------

// DBGemData

// repeated .symphony.proto.DBGemItem GemList = 1;
inline int DBGemData::_internal_gemlist_size() const {
  return _impl_.gemlist_.size();
}
inline int DBGemData::gemlist_size() const {
  return _internal_gemlist_size();
}
inline void DBGemData::clear_gemlist() {
  _impl_.gemlist_.Clear();
}
inline ::symphony::proto::DBGemItem* DBGemData::mutable_gemlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBGemData.GemList)
  return _impl_.gemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBGemItem >*
DBGemData::mutable_gemlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBGemData.GemList)
  return &_impl_.gemlist_;
}
inline const ::symphony::proto::DBGemItem& DBGemData::_internal_gemlist(int index) const {
  return _impl_.gemlist_.Get(index);
}
inline const ::symphony::proto::DBGemItem& DBGemData::gemlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBGemData.GemList)
  return _internal_gemlist(index);
}
inline ::symphony::proto::DBGemItem* DBGemData::_internal_add_gemlist() {
  return _impl_.gemlist_.Add();
}
inline ::symphony::proto::DBGemItem* DBGemData::add_gemlist() {
  ::symphony::proto::DBGemItem* _add = _internal_add_gemlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBGemData.GemList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBGemItem >&
DBGemData::gemlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBGemData.GemList)
  return _impl_.gemlist_;
}

// -------------------------------------------------------------------

// DBSkillItem

// optional uint64 RoleID = 1;
inline bool DBSkillItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBSkillItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBSkillItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBSkillItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBSkillItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBSkillItem.RoleID)
  return _internal_roleid();
}
inline void DBSkillItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBSkillItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBSkillItem.RoleID)
}

// optional uint32 SkillID = 2;
inline bool DBSkillItem::_internal_has_skillid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBSkillItem::has_skillid() const {
  return _internal_has_skillid();
}
inline void DBSkillItem::clear_skillid() {
  _impl_.skillid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DBSkillItem::_internal_skillid() const {
  return _impl_.skillid_;
}
inline uint32_t DBSkillItem::skillid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBSkillItem.SkillID)
  return _internal_skillid();
}
inline void DBSkillItem::_internal_set_skillid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.skillid_ = value;
}
inline void DBSkillItem::set_skillid(uint32_t value) {
  _internal_set_skillid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBSkillItem.SkillID)
}

// optional int32 Level = 3;
inline bool DBSkillItem::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBSkillItem::has_level() const {
  return _internal_has_level();
}
inline void DBSkillItem::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBSkillItem::_internal_level() const {
  return _impl_.level_;
}
inline int32_t DBSkillItem::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBSkillItem.Level)
  return _internal_level();
}
inline void DBSkillItem::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void DBSkillItem::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBSkillItem.Level)
}

// optional int32 KeyPos = 4;
inline bool DBSkillItem::_internal_has_keypos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBSkillItem::has_keypos() const {
  return _internal_has_keypos();
}
inline void DBSkillItem::clear_keypos() {
  _impl_.keypos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBSkillItem::_internal_keypos() const {
  return _impl_.keypos_;
}
inline int32_t DBSkillItem::keypos() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBSkillItem.KeyPos)
  return _internal_keypos();
}
inline void DBSkillItem::_internal_set_keypos(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.keypos_ = value;
}
inline void DBSkillItem::set_keypos(int32_t value) {
  _internal_set_keypos(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBSkillItem.KeyPos)
}

// -------------------------------------------------------------------

// DBSkillData

// repeated .symphony.proto.DBSkillItem SkillList = 1;
inline int DBSkillData::_internal_skilllist_size() const {
  return _impl_.skilllist_.size();
}
inline int DBSkillData::skilllist_size() const {
  return _internal_skilllist_size();
}
inline void DBSkillData::clear_skilllist() {
  _impl_.skilllist_.Clear();
}
inline ::symphony::proto::DBSkillItem* DBSkillData::mutable_skilllist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBSkillData.SkillList)
  return _impl_.skilllist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBSkillItem >*
DBSkillData::mutable_skilllist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBSkillData.SkillList)
  return &_impl_.skilllist_;
}
inline const ::symphony::proto::DBSkillItem& DBSkillData::_internal_skilllist(int index) const {
  return _impl_.skilllist_.Get(index);
}
inline const ::symphony::proto::DBSkillItem& DBSkillData::skilllist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBSkillData.SkillList)
  return _internal_skilllist(index);
}
inline ::symphony::proto::DBSkillItem* DBSkillData::_internal_add_skilllist() {
  return _impl_.skilllist_.Add();
}
inline ::symphony::proto::DBSkillItem* DBSkillData::add_skilllist() {
  ::symphony::proto::DBSkillItem* _add = _internal_add_skilllist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBSkillData.SkillList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBSkillItem >&
DBSkillData::skilllist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBSkillData.SkillList)
  return _impl_.skilllist_;
}

// -------------------------------------------------------------------

// DBPetItem

// optional uint64 RoleID = 1;
inline bool DBPetItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBPetItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBPetItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBPetItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBPetItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.RoleID)
  return _internal_roleid();
}
inline void DBPetItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBPetItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBPetItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBPetItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBPetItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBPetItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBPetItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.Guid)
  return _internal_guid();
}
inline void DBPetItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guid_ = value;
}
inline void DBPetItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.Guid)
}

// optional int32 PetID = 3;
inline bool DBPetItem::_internal_has_petid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBPetItem::has_petid() const {
  return _internal_has_petid();
}
inline void DBPetItem::clear_petid() {
  _impl_.petid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBPetItem::_internal_petid() const {
  return _impl_.petid_;
}
inline int32_t DBPetItem::petid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.PetID)
  return _internal_petid();
}
inline void DBPetItem::_internal_set_petid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.petid_ = value;
}
inline void DBPetItem::set_petid(int32_t value) {
  _internal_set_petid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.PetID)
}

// optional int32 StrengthLvl = 4;
inline bool DBPetItem::_internal_has_strengthlvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBPetItem::has_strengthlvl() const {
  return _internal_has_strengthlvl();
}
inline void DBPetItem::clear_strengthlvl() {
  _impl_.strengthlvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBPetItem::_internal_strengthlvl() const {
  return _impl_.strengthlvl_;
}
inline int32_t DBPetItem::strengthlvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.StrengthLvl)
  return _internal_strengthlvl();
}
inline void DBPetItem::_internal_set_strengthlvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.strengthlvl_ = value;
}
inline void DBPetItem::set_strengthlvl(int32_t value) {
  _internal_set_strengthlvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.StrengthLvl)
}

// optional int32 RefineLevel = 5;
inline bool DBPetItem::_internal_has_refinelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBPetItem::has_refinelevel() const {
  return _internal_has_refinelevel();
}
inline void DBPetItem::clear_refinelevel() {
  _impl_.refinelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBPetItem::_internal_refinelevel() const {
  return _impl_.refinelevel_;
}
inline int32_t DBPetItem::refinelevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.RefineLevel)
  return _internal_refinelevel();
}
inline void DBPetItem::_internal_set_refinelevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.refinelevel_ = value;
}
inline void DBPetItem::set_refinelevel(int32_t value) {
  _internal_set_refinelevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.RefineLevel)
}

// optional int32 StarLevel = 6;
inline bool DBPetItem::_internal_has_starlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBPetItem::has_starlevel() const {
  return _internal_has_starlevel();
}
inline void DBPetItem::clear_starlevel() {
  _impl_.starlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBPetItem::_internal_starlevel() const {
  return _impl_.starlevel_;
}
inline int32_t DBPetItem::starlevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.StarLevel)
  return _internal_starlevel();
}
inline void DBPetItem::_internal_set_starlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starlevel_ = value;
}
inline void DBPetItem::set_starlevel(int32_t value) {
  _internal_set_starlevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.StarLevel)
}

// optional bool IsUsing = 7;
inline bool DBPetItem::_internal_has_isusing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBPetItem::has_isusing() const {
  return _internal_has_isusing();
}
inline void DBPetItem::clear_isusing() {
  _impl_.isusing_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DBPetItem::_internal_isusing() const {
  return _impl_.isusing_;
}
inline bool DBPetItem::isusing() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetItem.IsUsing)
  return _internal_isusing();
}
inline void DBPetItem::_internal_set_isusing(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.isusing_ = value;
}
inline void DBPetItem::set_isusing(bool value) {
  _internal_set_isusing(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPetItem.IsUsing)
}

// -------------------------------------------------------------------

// DBPetData

// repeated .symphony.proto.DBPetItem PetList = 1;
inline int DBPetData::_internal_petlist_size() const {
  return _impl_.petlist_.size();
}
inline int DBPetData::petlist_size() const {
  return _internal_petlist_size();
}
inline void DBPetData::clear_petlist() {
  _impl_.petlist_.Clear();
}
inline ::symphony::proto::DBPetItem* DBPetData::mutable_petlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBPetData.PetList)
  return _impl_.petlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPetItem >*
DBPetData::mutable_petlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBPetData.PetList)
  return &_impl_.petlist_;
}
inline const ::symphony::proto::DBPetItem& DBPetData::_internal_petlist(int index) const {
  return _impl_.petlist_.Get(index);
}
inline const ::symphony::proto::DBPetItem& DBPetData::petlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPetData.PetList)
  return _internal_petlist(index);
}
inline ::symphony::proto::DBPetItem* DBPetData::_internal_add_petlist() {
  return _impl_.petlist_.Add();
}
inline ::symphony::proto::DBPetItem* DBPetData::add_petlist() {
  ::symphony::proto::DBPetItem* _add = _internal_add_petlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBPetData.PetList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPetItem >&
DBPetData::petlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBPetData.PetList)
  return _impl_.petlist_;
}

// -------------------------------------------------------------------

// DBMountItem

// optional uint64 RoleID = 1;
inline bool DBMountItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBMountItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBMountItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBMountItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBMountItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.RoleID)
  return _internal_roleid();
}
inline void DBMountItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBMountItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBMountItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBMountItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBMountItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBMountItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBMountItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.Guid)
  return _internal_guid();
}
inline void DBMountItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guid_ = value;
}
inline void DBMountItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.Guid)
}

// optional int32 MountID = 3;
inline bool DBMountItem::_internal_has_mountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBMountItem::has_mountid() const {
  return _internal_has_mountid();
}
inline void DBMountItem::clear_mountid() {
  _impl_.mountid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBMountItem::_internal_mountid() const {
  return _impl_.mountid_;
}
inline int32_t DBMountItem::mountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.MountID)
  return _internal_mountid();
}
inline void DBMountItem::_internal_set_mountid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mountid_ = value;
}
inline void DBMountItem::set_mountid(int32_t value) {
  _internal_set_mountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.MountID)
}

// optional int32 StrengthLvl = 4;
inline bool DBMountItem::_internal_has_strengthlvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBMountItem::has_strengthlvl() const {
  return _internal_has_strengthlvl();
}
inline void DBMountItem::clear_strengthlvl() {
  _impl_.strengthlvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBMountItem::_internal_strengthlvl() const {
  return _impl_.strengthlvl_;
}
inline int32_t DBMountItem::strengthlvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.StrengthLvl)
  return _internal_strengthlvl();
}
inline void DBMountItem::_internal_set_strengthlvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.strengthlvl_ = value;
}
inline void DBMountItem::set_strengthlvl(int32_t value) {
  _internal_set_strengthlvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.StrengthLvl)
}

// optional int32 RefineLevel = 5;
inline bool DBMountItem::_internal_has_refinelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBMountItem::has_refinelevel() const {
  return _internal_has_refinelevel();
}
inline void DBMountItem::clear_refinelevel() {
  _impl_.refinelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBMountItem::_internal_refinelevel() const {
  return _impl_.refinelevel_;
}
inline int32_t DBMountItem::refinelevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.RefineLevel)
  return _internal_refinelevel();
}
inline void DBMountItem::_internal_set_refinelevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.refinelevel_ = value;
}
inline void DBMountItem::set_refinelevel(int32_t value) {
  _internal_set_refinelevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.RefineLevel)
}

// optional int32 StarLevel = 6;
inline bool DBMountItem::_internal_has_starlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBMountItem::has_starlevel() const {
  return _internal_has_starlevel();
}
inline void DBMountItem::clear_starlevel() {
  _impl_.starlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBMountItem::_internal_starlevel() const {
  return _impl_.starlevel_;
}
inline int32_t DBMountItem::starlevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.StarLevel)
  return _internal_starlevel();
}
inline void DBMountItem::_internal_set_starlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starlevel_ = value;
}
inline void DBMountItem::set_starlevel(int32_t value) {
  _internal_set_starlevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.StarLevel)
}

// optional bool IsUsing = 7;
inline bool DBMountItem::_internal_has_isusing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBMountItem::has_isusing() const {
  return _internal_has_isusing();
}
inline void DBMountItem::clear_isusing() {
  _impl_.isusing_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool DBMountItem::_internal_isusing() const {
  return _impl_.isusing_;
}
inline bool DBMountItem::isusing() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountItem.IsUsing)
  return _internal_isusing();
}
inline void DBMountItem::_internal_set_isusing(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.isusing_ = value;
}
inline void DBMountItem::set_isusing(bool value) {
  _internal_set_isusing(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMountItem.IsUsing)
}

// -------------------------------------------------------------------

// DBMountData

// repeated .symphony.proto.DBMountItem MountList = 1;
inline int DBMountData::_internal_mountlist_size() const {
  return _impl_.mountlist_.size();
}
inline int DBMountData::mountlist_size() const {
  return _internal_mountlist_size();
}
inline void DBMountData::clear_mountlist() {
  _impl_.mountlist_.Clear();
}
inline ::symphony::proto::DBMountItem* DBMountData::mutable_mountlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMountData.MountList)
  return _impl_.mountlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMountItem >*
DBMountData::mutable_mountlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBMountData.MountList)
  return &_impl_.mountlist_;
}
inline const ::symphony::proto::DBMountItem& DBMountData::_internal_mountlist(int index) const {
  return _impl_.mountlist_.Get(index);
}
inline const ::symphony::proto::DBMountItem& DBMountData::mountlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMountData.MountList)
  return _internal_mountlist(index);
}
inline ::symphony::proto::DBMountItem* DBMountData::_internal_add_mountlist() {
  return _impl_.mountlist_.Add();
}
inline ::symphony::proto::DBMountItem* DBMountData::add_mountlist() {
  ::symphony::proto::DBMountItem* _add = _internal_add_mountlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBMountData.MountList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMountItem >&
DBMountData::mountlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBMountData.MountList)
  return _impl_.mountlist_;
}

// -------------------------------------------------------------------

// DBPartnerItem

// optional uint64 RoleID = 1;
inline bool DBPartnerItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBPartnerItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBPartnerItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBPartnerItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBPartnerItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.RoleID)
  return _internal_roleid();
}
inline void DBPartnerItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBPartnerItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBPartnerItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBPartnerItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBPartnerItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBPartnerItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBPartnerItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.Guid)
  return _internal_guid();
}
inline void DBPartnerItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guid_ = value;
}
inline void DBPartnerItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.Guid)
}

// optional int32 PartnerID = 3;
inline bool DBPartnerItem::_internal_has_partnerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBPartnerItem::has_partnerid() const {
  return _internal_has_partnerid();
}
inline void DBPartnerItem::clear_partnerid() {
  _impl_.partnerid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBPartnerItem::_internal_partnerid() const {
  return _impl_.partnerid_;
}
inline int32_t DBPartnerItem::partnerid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.PartnerID)
  return _internal_partnerid();
}
inline void DBPartnerItem::_internal_set_partnerid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.partnerid_ = value;
}
inline void DBPartnerItem::set_partnerid(int32_t value) {
  _internal_set_partnerid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.PartnerID)
}

// optional int32 StrengthLvl = 4;
inline bool DBPartnerItem::_internal_has_strengthlvl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBPartnerItem::has_strengthlvl() const {
  return _internal_has_strengthlvl();
}
inline void DBPartnerItem::clear_strengthlvl() {
  _impl_.strengthlvl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBPartnerItem::_internal_strengthlvl() const {
  return _impl_.strengthlvl_;
}
inline int32_t DBPartnerItem::strengthlvl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.StrengthLvl)
  return _internal_strengthlvl();
}
inline void DBPartnerItem::_internal_set_strengthlvl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.strengthlvl_ = value;
}
inline void DBPartnerItem::set_strengthlvl(int32_t value) {
  _internal_set_strengthlvl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.StrengthLvl)
}

// optional int32 RefineLevel = 5;
inline bool DBPartnerItem::_internal_has_refinelevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBPartnerItem::has_refinelevel() const {
  return _internal_has_refinelevel();
}
inline void DBPartnerItem::clear_refinelevel() {
  _impl_.refinelevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t DBPartnerItem::_internal_refinelevel() const {
  return _impl_.refinelevel_;
}
inline int32_t DBPartnerItem::refinelevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.RefineLevel)
  return _internal_refinelevel();
}
inline void DBPartnerItem::_internal_set_refinelevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.refinelevel_ = value;
}
inline void DBPartnerItem::set_refinelevel(int32_t value) {
  _internal_set_refinelevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.RefineLevel)
}

// optional int32 StarLevel = 6;
inline bool DBPartnerItem::_internal_has_starlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBPartnerItem::has_starlevel() const {
  return _internal_has_starlevel();
}
inline void DBPartnerItem::clear_starlevel() {
  _impl_.starlevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t DBPartnerItem::_internal_starlevel() const {
  return _impl_.starlevel_;
}
inline int32_t DBPartnerItem::starlevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.StarLevel)
  return _internal_starlevel();
}
inline void DBPartnerItem::_internal_set_starlevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.starlevel_ = value;
}
inline void DBPartnerItem::set_starlevel(int32_t value) {
  _internal_set_starlevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.StarLevel)
}

// optional int32 SetPos = 7;
inline bool DBPartnerItem::_internal_has_setpos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBPartnerItem::has_setpos() const {
  return _internal_has_setpos();
}
inline void DBPartnerItem::clear_setpos() {
  _impl_.setpos_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t DBPartnerItem::_internal_setpos() const {
  return _impl_.setpos_;
}
inline int32_t DBPartnerItem::setpos() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerItem.SetPos)
  return _internal_setpos();
}
inline void DBPartnerItem::_internal_set_setpos(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.setpos_ = value;
}
inline void DBPartnerItem::set_setpos(int32_t value) {
  _internal_set_setpos(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBPartnerItem.SetPos)
}

// -------------------------------------------------------------------

// DBPartnerData

// repeated .symphony.proto.DBPartnerItem PartnerList = 1;
inline int DBPartnerData::_internal_partnerlist_size() const {
  return _impl_.partnerlist_.size();
}
inline int DBPartnerData::partnerlist_size() const {
  return _internal_partnerlist_size();
}
inline void DBPartnerData::clear_partnerlist() {
  _impl_.partnerlist_.Clear();
}
inline ::symphony::proto::DBPartnerItem* DBPartnerData::mutable_partnerlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBPartnerData.PartnerList)
  return _impl_.partnerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPartnerItem >*
DBPartnerData::mutable_partnerlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBPartnerData.PartnerList)
  return &_impl_.partnerlist_;
}
inline const ::symphony::proto::DBPartnerItem& DBPartnerData::_internal_partnerlist(int index) const {
  return _impl_.partnerlist_.Get(index);
}
inline const ::symphony::proto::DBPartnerItem& DBPartnerData::partnerlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBPartnerData.PartnerList)
  return _internal_partnerlist(index);
}
inline ::symphony::proto::DBPartnerItem* DBPartnerData::_internal_add_partnerlist() {
  return _impl_.partnerlist_.Add();
}
inline ::symphony::proto::DBPartnerItem* DBPartnerData::add_partnerlist() {
  ::symphony::proto::DBPartnerItem* _add = _internal_add_partnerlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBPartnerData.PartnerList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBPartnerItem >&
DBPartnerData::partnerlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBPartnerData.PartnerList)
  return _impl_.partnerlist_;
}

// -------------------------------------------------------------------

// DBTaskItem

// optional uint64 RoleID = 1;
inline bool DBTaskItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBTaskItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBTaskItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBTaskItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBTaskItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBTaskItem.RoleID)
  return _internal_roleid();
}
inline void DBTaskItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBTaskItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBTaskItem.RoleID)
}

// optional uint32 TaskID = 2;
inline bool DBTaskItem::_internal_has_taskid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBTaskItem::has_taskid() const {
  return _internal_has_taskid();
}
inline void DBTaskItem::clear_taskid() {
  _impl_.taskid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DBTaskItem::_internal_taskid() const {
  return _impl_.taskid_;
}
inline uint32_t DBTaskItem::taskid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBTaskItem.TaskID)
  return _internal_taskid();
}
inline void DBTaskItem::_internal_set_taskid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.taskid_ = value;
}
inline void DBTaskItem::set_taskid(uint32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBTaskItem.TaskID)
}

// optional int32 Status = 3;
inline bool DBTaskItem::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBTaskItem::has_status() const {
  return _internal_has_status();
}
inline void DBTaskItem::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t DBTaskItem::_internal_status() const {
  return _impl_.status_;
}
inline int32_t DBTaskItem::status() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBTaskItem.Status)
  return _internal_status();
}
inline void DBTaskItem::_internal_set_status(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void DBTaskItem::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBTaskItem.Status)
}

// optional int32 Progress = 4;
inline bool DBTaskItem::_internal_has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBTaskItem::has_progress() const {
  return _internal_has_progress();
}
inline void DBTaskItem::clear_progress() {
  _impl_.progress_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t DBTaskItem::_internal_progress() const {
  return _impl_.progress_;
}
inline int32_t DBTaskItem::progress() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBTaskItem.Progress)
  return _internal_progress();
}
inline void DBTaskItem::_internal_set_progress(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.progress_ = value;
}
inline void DBTaskItem::set_progress(int32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBTaskItem.Progress)
}

// -------------------------------------------------------------------

// DBTaskData

// repeated .symphony.proto.DBTaskItem TaskList = 1;
inline int DBTaskData::_internal_tasklist_size() const {
  return _impl_.tasklist_.size();
}
inline int DBTaskData::tasklist_size() const {
  return _internal_tasklist_size();
}
inline void DBTaskData::clear_tasklist() {
  _impl_.tasklist_.Clear();
}
inline ::symphony::proto::DBTaskItem* DBTaskData::mutable_tasklist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBTaskData.TaskList)
  return _impl_.tasklist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBTaskItem >*
DBTaskData::mutable_tasklist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBTaskData.TaskList)
  return &_impl_.tasklist_;
}
inline const ::symphony::proto::DBTaskItem& DBTaskData::_internal_tasklist(int index) const {
  return _impl_.tasklist_.Get(index);
}
inline const ::symphony::proto::DBTaskItem& DBTaskData::tasklist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBTaskData.TaskList)
  return _internal_tasklist(index);
}
inline ::symphony::proto::DBTaskItem* DBTaskData::_internal_add_tasklist() {
  return _impl_.tasklist_.Add();
}
inline ::symphony::proto::DBTaskItem* DBTaskData::add_tasklist() {
  ::symphony::proto::DBTaskItem* _add = _internal_add_tasklist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBTaskData.TaskList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBTaskItem >&
DBTaskData::tasklist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBTaskData.TaskList)
  return _impl_.tasklist_;
}

// -------------------------------------------------------------------

// DBMailItem

// optional uint64 RoleID = 1;
inline bool DBMailItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBMailItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBMailItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t DBMailItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBMailItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.RoleID)
  return _internal_roleid();
}
inline void DBMailItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.roleid_ = value;
}
inline void DBMailItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.RoleID)
}

// optional uint64 Guid = 2;
inline bool DBMailItem::_internal_has_guid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBMailItem::has_guid() const {
  return _internal_has_guid();
}
inline void DBMailItem::clear_guid() {
  _impl_.guid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t DBMailItem::_internal_guid() const {
  return _impl_.guid_;
}
inline uint64_t DBMailItem::guid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Guid)
  return _internal_guid();
}
inline void DBMailItem::_internal_set_guid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.guid_ = value;
}
inline void DBMailItem::set_guid(uint64_t value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Guid)
}

// optional uint64 GroupID = 3;
inline bool DBMailItem::_internal_has_groupid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBMailItem::has_groupid() const {
  return _internal_has_groupid();
}
inline void DBMailItem::clear_groupid() {
  _impl_.groupid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t DBMailItem::_internal_groupid() const {
  return _impl_.groupid_;
}
inline uint64_t DBMailItem::groupid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.GroupID)
  return _internal_groupid();
}
inline void DBMailItem::_internal_set_groupid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.groupid_ = value;
}
inline void DBMailItem::set_groupid(uint64_t value) {
  _internal_set_groupid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.GroupID)
}

// optional uint64 Time = 4;
inline bool DBMailItem::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DBMailItem::has_time() const {
  return _internal_has_time();
}
inline void DBMailItem::clear_time() {
  _impl_.time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t DBMailItem::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t DBMailItem::time() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Time)
  return _internal_time();
}
inline void DBMailItem::_internal_set_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.time_ = value;
}
inline void DBMailItem::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Time)
}

// optional uint64 SenderID = 5;
inline bool DBMailItem::_internal_has_senderid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DBMailItem::has_senderid() const {
  return _internal_has_senderid();
}
inline void DBMailItem::clear_senderid() {
  _impl_.senderid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t DBMailItem::_internal_senderid() const {
  return _impl_.senderid_;
}
inline uint64_t DBMailItem::senderid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.SenderID)
  return _internal_senderid();
}
inline void DBMailItem::_internal_set_senderid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.senderid_ = value;
}
inline void DBMailItem::set_senderid(uint64_t value) {
  _internal_set_senderid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.SenderID)
}

// optional string Sender = 6;
inline bool DBMailItem::_internal_has_sender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBMailItem::has_sender() const {
  return _internal_has_sender();
}
inline void DBMailItem::clear_sender() {
  _impl_.sender_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBMailItem::sender() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBMailItem::set_sender(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sender_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Sender)
}
inline std::string* DBMailItem::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMailItem.Sender)
  return _s;
}
inline const std::string& DBMailItem::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void DBMailItem::_internal_set_sender(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* DBMailItem::_internal_mutable_sender() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sender_.Mutable(GetArenaForAllocation());
}
inline std::string* DBMailItem::release_sender() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBMailItem.Sender)
  if (!_internal_has_sender()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sender_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBMailItem::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_.SetAllocated(sender, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBMailItem.Sender)
}

// optional uint32 MailType = 7;
inline bool DBMailItem::_internal_has_mailtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DBMailItem::has_mailtype() const {
  return _internal_has_mailtype();
}
inline void DBMailItem::clear_mailtype() {
  _impl_.mailtype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t DBMailItem::_internal_mailtype() const {
  return _impl_.mailtype_;
}
inline uint32_t DBMailItem::mailtype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.MailType)
  return _internal_mailtype();
}
inline void DBMailItem::_internal_set_mailtype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.mailtype_ = value;
}
inline void DBMailItem::set_mailtype(uint32_t value) {
  _internal_set_mailtype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.MailType)
}

// optional uint32 Status = 8;
inline bool DBMailItem::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DBMailItem::has_status() const {
  return _internal_has_status();
}
inline void DBMailItem::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t DBMailItem::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t DBMailItem::status() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Status)
  return _internal_status();
}
inline void DBMailItem::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.status_ = value;
}
inline void DBMailItem::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Status)
}

// optional string Title = 9;
inline bool DBMailItem::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBMailItem::has_title() const {
  return _internal_has_title();
}
inline void DBMailItem::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DBMailItem::title() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBMailItem::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Title)
}
inline std::string* DBMailItem::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMailItem.Title)
  return _s;
}
inline const std::string& DBMailItem::_internal_title() const {
  return _impl_.title_.Get();
}
inline void DBMailItem::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* DBMailItem::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* DBMailItem::release_title() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBMailItem.Title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBMailItem::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBMailItem.Title)
}

// optional string Content = 10;
inline bool DBMailItem::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBMailItem::has_content() const {
  return _internal_has_content();
}
inline void DBMailItem::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DBMailItem::content() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBMailItem::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Content)
}
inline std::string* DBMailItem::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMailItem.Content)
  return _s;
}
inline const std::string& DBMailItem::_internal_content() const {
  return _impl_.content_.Get();
}
inline void DBMailItem::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* DBMailItem::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* DBMailItem::release_content() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBMailItem.Content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBMailItem::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBMailItem.Content)
}

// optional bytes Items = 11;
inline bool DBMailItem::_internal_has_items() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBMailItem::has_items() const {
  return _internal_has_items();
}
inline void DBMailItem::clear_items() {
  _impl_.items_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DBMailItem::items() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailItem.Items)
  return _internal_items();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBMailItem::set_items(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.items_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBMailItem.Items)
}
inline std::string* DBMailItem::mutable_items() {
  std::string* _s = _internal_mutable_items();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMailItem.Items)
  return _s;
}
inline const std::string& DBMailItem::_internal_items() const {
  return _impl_.items_.Get();
}
inline void DBMailItem::_internal_set_items(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.items_.Set(value, GetArenaForAllocation());
}
inline std::string* DBMailItem::_internal_mutable_items() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.items_.Mutable(GetArenaForAllocation());
}
inline std::string* DBMailItem::release_items() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBMailItem.Items)
  if (!_internal_has_items()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.items_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_.IsDefault()) {
    _impl_.items_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBMailItem::set_allocated_items(std::string* items) {
  if (items != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.items_.SetAllocated(items, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.items_.IsDefault()) {
    _impl_.items_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBMailItem.Items)
}

// -------------------------------------------------------------------

// DBMailData

// repeated .symphony.proto.DBMailItem MailList = 1;
inline int DBMailData::_internal_maillist_size() const {
  return _impl_.maillist_.size();
}
inline int DBMailData::maillist_size() const {
  return _internal_maillist_size();
}
inline void DBMailData::clear_maillist() {
  _impl_.maillist_.Clear();
}
inline ::symphony::proto::DBMailItem* DBMailData::mutable_maillist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBMailData.MailList)
  return _impl_.maillist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMailItem >*
DBMailData::mutable_maillist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBMailData.MailList)
  return &_impl_.maillist_;
}
inline const ::symphony::proto::DBMailItem& DBMailData::_internal_maillist(int index) const {
  return _impl_.maillist_.Get(index);
}
inline const ::symphony::proto::DBMailItem& DBMailData::maillist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBMailData.MailList)
  return _internal_maillist(index);
}
inline ::symphony::proto::DBMailItem* DBMailData::_internal_add_maillist() {
  return _impl_.maillist_.Add();
}
inline ::symphony::proto::DBMailItem* DBMailData::add_maillist() {
  ::symphony::proto::DBMailItem* _add = _internal_add_maillist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBMailData.MailList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBMailItem >&
DBMailData::maillist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBMailData.MailList)
  return _impl_.maillist_;
}

// -------------------------------------------------------------------

// DBActivityItem

// optional uint64 RoleID = 1;
inline bool DBActivityItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBActivityItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBActivityItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBActivityItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBActivityItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.RoleID)
  return _internal_roleid();
}
inline void DBActivityItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roleid_ = value;
}
inline void DBActivityItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.RoleID)
}

// optional uint32 ActivityID = 2;
inline bool DBActivityItem::_internal_has_activityid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBActivityItem::has_activityid() const {
  return _internal_has_activityid();
}
inline void DBActivityItem::clear_activityid() {
  _impl_.activityid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DBActivityItem::_internal_activityid() const {
  return _impl_.activityid_;
}
inline uint32_t DBActivityItem::activityid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.ActivityID)
  return _internal_activityid();
}
inline void DBActivityItem::_internal_set_activityid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.activityid_ = value;
}
inline void DBActivityItem::set_activityid(uint32_t value) {
  _internal_set_activityid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.ActivityID)
}

// optional uint32 ActivityType = 3;
inline bool DBActivityItem::_internal_has_activitytype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBActivityItem::has_activitytype() const {
  return _internal_has_activitytype();
}
inline void DBActivityItem::clear_activitytype() {
  _impl_.activitytype_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t DBActivityItem::_internal_activitytype() const {
  return _impl_.activitytype_;
}
inline uint32_t DBActivityItem::activitytype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.ActivityType)
  return _internal_activitytype();
}
inline void DBActivityItem::_internal_set_activitytype(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.activitytype_ = value;
}
inline void DBActivityItem::set_activitytype(uint32_t value) {
  _internal_set_activitytype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.ActivityType)
}

// optional uint32 JoinTime = 4;
inline bool DBActivityItem::_internal_has_jointime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBActivityItem::has_jointime() const {
  return _internal_has_jointime();
}
inline void DBActivityItem::clear_jointime() {
  _impl_.jointime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t DBActivityItem::_internal_jointime() const {
  return _impl_.jointime_;
}
inline uint32_t DBActivityItem::jointime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.JoinTime)
  return _internal_jointime();
}
inline void DBActivityItem::_internal_set_jointime(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.jointime_ = value;
}
inline void DBActivityItem::set_jointime(uint32_t value) {
  _internal_set_jointime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.JoinTime)
}

// optional uint32 DataLen = 5;
inline bool DBActivityItem::_internal_has_datalen() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBActivityItem::has_datalen() const {
  return _internal_has_datalen();
}
inline void DBActivityItem::clear_datalen() {
  _impl_.datalen_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DBActivityItem::_internal_datalen() const {
  return _impl_.datalen_;
}
inline uint32_t DBActivityItem::datalen() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.DataLen)
  return _internal_datalen();
}
inline void DBActivityItem::_internal_set_datalen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.datalen_ = value;
}
inline void DBActivityItem::set_datalen(uint32_t value) {
  _internal_set_datalen(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.DataLen)
}

// optional bytes Data = 6;
inline bool DBActivityItem::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBActivityItem::has_data() const {
  return _internal_has_data();
}
inline void DBActivityItem::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DBActivityItem::data() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityItem.Data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DBActivityItem::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.DBActivityItem.Data)
}
inline std::string* DBActivityItem::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBActivityItem.Data)
  return _s;
}
inline const std::string& DBActivityItem::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DBActivityItem::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DBActivityItem::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* DBActivityItem::release_data() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBActivityItem.Data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DBActivityItem::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBActivityItem.Data)
}

// -------------------------------------------------------------------

// DBActivityData

// repeated .symphony.proto.DBActivityItem ActivityList = 1;
inline int DBActivityData::_internal_activitylist_size() const {
  return _impl_.activitylist_.size();
}
inline int DBActivityData::activitylist_size() const {
  return _internal_activitylist_size();
}
inline void DBActivityData::clear_activitylist() {
  _impl_.activitylist_.Clear();
}
inline ::symphony::proto::DBActivityItem* DBActivityData::mutable_activitylist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBActivityData.ActivityList)
  return _impl_.activitylist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBActivityItem >*
DBActivityData::mutable_activitylist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBActivityData.ActivityList)
  return &_impl_.activitylist_;
}
inline const ::symphony::proto::DBActivityItem& DBActivityData::_internal_activitylist(int index) const {
  return _impl_.activitylist_.Get(index);
}
inline const ::symphony::proto::DBActivityItem& DBActivityData::activitylist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBActivityData.ActivityList)
  return _internal_activitylist(index);
}
inline ::symphony::proto::DBActivityItem* DBActivityData::_internal_add_activitylist() {
  return _impl_.activitylist_.Add();
}
inline ::symphony::proto::DBActivityItem* DBActivityData::add_activitylist() {
  ::symphony::proto::DBActivityItem* _add = _internal_add_activitylist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBActivityData.ActivityList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBActivityItem >&
DBActivityData::activitylist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBActivityData.ActivityList)
  return _impl_.activitylist_;
}

// -------------------------------------------------------------------

// DBCounterItem

// optional uint64 RoleID = 1;
inline bool DBCounterItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBCounterItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBCounterItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBCounterItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBCounterItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.RoleID)
  return _internal_roleid();
}
inline void DBCounterItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBCounterItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.RoleID)
}

// optional uint32 CounterID = 2;
inline bool DBCounterItem::_internal_has_counterid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBCounterItem::has_counterid() const {
  return _internal_has_counterid();
}
inline void DBCounterItem::clear_counterid() {
  _impl_.counterid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t DBCounterItem::_internal_counterid() const {
  return _impl_.counterid_;
}
inline uint32_t DBCounterItem::counterid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.CounterID)
  return _internal_counterid();
}
inline void DBCounterItem::_internal_set_counterid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.counterid_ = value;
}
inline void DBCounterItem::set_counterid(uint32_t value) {
  _internal_set_counterid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.CounterID)
}

// optional uint32 Index = 3;
inline bool DBCounterItem::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DBCounterItem::has_index() const {
  return _internal_has_index();
}
inline void DBCounterItem::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t DBCounterItem::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t DBCounterItem::index() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.Index)
  return _internal_index();
}
inline void DBCounterItem::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.index_ = value;
}
inline void DBCounterItem::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.Index)
}

// optional int64 Value = 4;
inline bool DBCounterItem::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DBCounterItem::has_value() const {
  return _internal_has_value();
}
inline void DBCounterItem::clear_value() {
  _impl_.value_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t DBCounterItem::_internal_value() const {
  return _impl_.value_;
}
inline int64_t DBCounterItem::value() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.Value)
  return _internal_value();
}
inline void DBCounterItem::_internal_set_value(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_ = value;
}
inline void DBCounterItem::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.Value)
}

// optional uint64 Time = 5;
inline bool DBCounterItem::_internal_has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DBCounterItem::has_time() const {
  return _internal_has_time();
}
inline void DBCounterItem::clear_time() {
  _impl_.time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t DBCounterItem::_internal_time() const {
  return _impl_.time_;
}
inline uint64_t DBCounterItem::time() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.Time)
  return _internal_time();
}
inline void DBCounterItem::_internal_set_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.time_ = value;
}
inline void DBCounterItem::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.Time)
}

// optional uint32 Param1 = 6;
inline bool DBCounterItem::_internal_has_param1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DBCounterItem::has_param1() const {
  return _internal_has_param1();
}
inline void DBCounterItem::clear_param1() {
  _impl_.param1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t DBCounterItem::_internal_param1() const {
  return _impl_.param1_;
}
inline uint32_t DBCounterItem::param1() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.Param1)
  return _internal_param1();
}
inline void DBCounterItem::_internal_set_param1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.param1_ = value;
}
inline void DBCounterItem::set_param1(uint32_t value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.Param1)
}

// optional uint32 Param2 = 7;
inline bool DBCounterItem::_internal_has_param2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DBCounterItem::has_param2() const {
  return _internal_has_param2();
}
inline void DBCounterItem::clear_param2() {
  _impl_.param2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t DBCounterItem::_internal_param2() const {
  return _impl_.param2_;
}
inline uint32_t DBCounterItem::param2() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterItem.Param2)
  return _internal_param2();
}
inline void DBCounterItem::_internal_set_param2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.param2_ = value;
}
inline void DBCounterItem::set_param2(uint32_t value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBCounterItem.Param2)
}

// -------------------------------------------------------------------

// DBCounterData

// repeated .symphony.proto.DBCounterItem CounterList = 1;
inline int DBCounterData::_internal_counterlist_size() const {
  return _impl_.counterlist_.size();
}
inline int DBCounterData::counterlist_size() const {
  return _internal_counterlist_size();
}
inline void DBCounterData::clear_counterlist() {
  _impl_.counterlist_.Clear();
}
inline ::symphony::proto::DBCounterItem* DBCounterData::mutable_counterlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBCounterData.CounterList)
  return _impl_.counterlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCounterItem >*
DBCounterData::mutable_counterlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBCounterData.CounterList)
  return &_impl_.counterlist_;
}
inline const ::symphony::proto::DBCounterItem& DBCounterData::_internal_counterlist(int index) const {
  return _impl_.counterlist_.Get(index);
}
inline const ::symphony::proto::DBCounterItem& DBCounterData::counterlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBCounterData.CounterList)
  return _internal_counterlist(index);
}
inline ::symphony::proto::DBCounterItem* DBCounterData::_internal_add_counterlist() {
  return _impl_.counterlist_.Add();
}
inline ::symphony::proto::DBCounterItem* DBCounterData::add_counterlist() {
  ::symphony::proto::DBCounterItem* _add = _internal_add_counterlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBCounterData.CounterList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBCounterItem >&
DBCounterData::counterlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBCounterData.CounterList)
  return _impl_.counterlist_;
}

// -------------------------------------------------------------------

// DBFriendItem

// optional uint64 RoleID = 1;
inline bool DBFriendItem::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DBFriendItem::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBFriendItem::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t DBFriendItem::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBFriendItem::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBFriendItem.RoleID)
  return _internal_roleid();
}
inline void DBFriendItem::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roleid_ = value;
}
inline void DBFriendItem::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBFriendItem.RoleID)
}

// optional uint64 FriendID = 2;
inline bool DBFriendItem::_internal_has_friendid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DBFriendItem::has_friendid() const {
  return _internal_has_friendid();
}
inline void DBFriendItem::clear_friendid() {
  _impl_.friendid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t DBFriendItem::_internal_friendid() const {
  return _impl_.friendid_;
}
inline uint64_t DBFriendItem::friendid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBFriendItem.FriendID)
  return _internal_friendid();
}
inline void DBFriendItem::_internal_set_friendid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.friendid_ = value;
}
inline void DBFriendItem::set_friendid(uint64_t value) {
  _internal_set_friendid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBFriendItem.FriendID)
}

// -------------------------------------------------------------------

// DBFriendData

// repeated .symphony.proto.DBFriendItem FriendList = 1;
inline int DBFriendData::_internal_friendlist_size() const {
  return _impl_.friendlist_.size();
}
inline int DBFriendData::friendlist_size() const {
  return _internal_friendlist_size();
}
inline void DBFriendData::clear_friendlist() {
  _impl_.friendlist_.Clear();
}
inline ::symphony::proto::DBFriendItem* DBFriendData::mutable_friendlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBFriendData.FriendList)
  return _impl_.friendlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBFriendItem >*
DBFriendData::mutable_friendlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.DBFriendData.FriendList)
  return &_impl_.friendlist_;
}
inline const ::symphony::proto::DBFriendItem& DBFriendData::_internal_friendlist(int index) const {
  return _impl_.friendlist_.Get(index);
}
inline const ::symphony::proto::DBFriendItem& DBFriendData::friendlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBFriendData.FriendList)
  return _internal_friendlist(index);
}
inline ::symphony::proto::DBFriendItem* DBFriendData::_internal_add_friendlist() {
  return _impl_.friendlist_.Add();
}
inline ::symphony::proto::DBFriendItem* DBFriendData::add_friendlist() {
  ::symphony::proto::DBFriendItem* _add = _internal_add_friendlist();
  // @@protoc_insertion_point(field_add:symphony.proto.DBFriendData.FriendList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::DBFriendItem >&
DBFriendData::friendlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.DBFriendData.FriendList)
  return _impl_.friendlist_;
}

// -------------------------------------------------------------------

// DBRoleLoginAck

// optional uint32 RetCode = 1;
inline bool DBRoleLoginAck::_internal_has_retcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DBRoleLoginAck::has_retcode() const {
  return _internal_has_retcode();
}
inline void DBRoleLoginAck::clear_retcode() {
  _impl_.retcode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t DBRoleLoginAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t DBRoleLoginAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.RetCode)
  return _internal_retcode();
}
inline void DBRoleLoginAck::_internal_set_retcode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.retcode_ = value;
}
inline void DBRoleLoginAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleLoginAck.RetCode)
}

// optional uint64 RoleID = 2;
inline bool DBRoleLoginAck::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DBRoleLoginAck::has_roleid() const {
  return _internal_has_roleid();
}
inline void DBRoleLoginAck::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t DBRoleLoginAck::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t DBRoleLoginAck::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.RoleID)
  return _internal_roleid();
}
inline void DBRoleLoginAck::_internal_set_roleid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.roleid_ = value;
}
inline void DBRoleLoginAck::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.DBRoleLoginAck.RoleID)
}

// optional .symphony.proto.DBRoleData RoleData = 3;
inline bool DBRoleLoginAck::_internal_has_roledata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.roledata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_roledata() const {
  return _internal_has_roledata();
}
inline void DBRoleLoginAck::clear_roledata() {
  if (_impl_.roledata_ != nullptr) _impl_.roledata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::symphony::proto::DBRoleData& DBRoleLoginAck::_internal_roledata() const {
  const ::symphony::proto::DBRoleData* p = _impl_.roledata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBRoleData&>(
      ::symphony::proto::_DBRoleData_default_instance_);
}
inline const ::symphony::proto::DBRoleData& DBRoleLoginAck::roledata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.RoleData)
  return _internal_roledata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_roledata(
    ::symphony::proto::DBRoleData* roledata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.roledata_);
  }
  _impl_.roledata_ = roledata;
  if (roledata) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.RoleData)
}
inline ::symphony::proto::DBRoleData* DBRoleLoginAck::release_roledata() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::symphony::proto::DBRoleData* temp = _impl_.roledata_;
  _impl_.roledata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBRoleData* DBRoleLoginAck::unsafe_arena_release_roledata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.RoleData)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::symphony::proto::DBRoleData* temp = _impl_.roledata_;
  _impl_.roledata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBRoleData* DBRoleLoginAck::_internal_mutable_roledata() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.roledata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBRoleData>(GetArenaForAllocation());
    _impl_.roledata_ = p;
  }
  return _impl_.roledata_;
}
inline ::symphony::proto::DBRoleData* DBRoleLoginAck::mutable_roledata() {
  ::symphony::proto::DBRoleData* _msg = _internal_mutable_roledata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.RoleData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_roledata(::symphony::proto::DBRoleData* roledata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.roledata_;
  }
  if (roledata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(roledata);
    if (message_arena != submessage_arena) {
      roledata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roledata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.roledata_ = roledata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.RoleData)
}

// optional .symphony.proto.DBBagData BagData = 4;
inline bool DBRoleLoginAck::_internal_has_bagdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bagdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_bagdata() const {
  return _internal_has_bagdata();
}
inline void DBRoleLoginAck::clear_bagdata() {
  if (_impl_.bagdata_ != nullptr) _impl_.bagdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::symphony::proto::DBBagData& DBRoleLoginAck::_internal_bagdata() const {
  const ::symphony::proto::DBBagData* p = _impl_.bagdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBBagData&>(
      ::symphony::proto::_DBBagData_default_instance_);
}
inline const ::symphony::proto::DBBagData& DBRoleLoginAck::bagdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.BagData)
  return _internal_bagdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_bagdata(
    ::symphony::proto::DBBagData* bagdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bagdata_);
  }
  _impl_.bagdata_ = bagdata;
  if (bagdata) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.BagData)
}
inline ::symphony::proto::DBBagData* DBRoleLoginAck::release_bagdata() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::symphony::proto::DBBagData* temp = _impl_.bagdata_;
  _impl_.bagdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBBagData* DBRoleLoginAck::unsafe_arena_release_bagdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.BagData)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::symphony::proto::DBBagData* temp = _impl_.bagdata_;
  _impl_.bagdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBBagData* DBRoleLoginAck::_internal_mutable_bagdata() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bagdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBBagData>(GetArenaForAllocation());
    _impl_.bagdata_ = p;
  }
  return _impl_.bagdata_;
}
inline ::symphony::proto::DBBagData* DBRoleLoginAck::mutable_bagdata() {
  ::symphony::proto::DBBagData* _msg = _internal_mutable_bagdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.BagData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_bagdata(::symphony::proto::DBBagData* bagdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bagdata_;
  }
  if (bagdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bagdata);
    if (message_arena != submessage_arena) {
      bagdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bagdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bagdata_ = bagdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.BagData)
}

// optional .symphony.proto.DBCopyData CopyData = 5;
inline bool DBRoleLoginAck::_internal_has_copydata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.copydata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_copydata() const {
  return _internal_has_copydata();
}
inline void DBRoleLoginAck::clear_copydata() {
  if (_impl_.copydata_ != nullptr) _impl_.copydata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::symphony::proto::DBCopyData& DBRoleLoginAck::_internal_copydata() const {
  const ::symphony::proto::DBCopyData* p = _impl_.copydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBCopyData&>(
      ::symphony::proto::_DBCopyData_default_instance_);
}
inline const ::symphony::proto::DBCopyData& DBRoleLoginAck::copydata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.CopyData)
  return _internal_copydata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_copydata(
    ::symphony::proto::DBCopyData* copydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.copydata_);
  }
  _impl_.copydata_ = copydata;
  if (copydata) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.CopyData)
}
inline ::symphony::proto::DBCopyData* DBRoleLoginAck::release_copydata() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::symphony::proto::DBCopyData* temp = _impl_.copydata_;
  _impl_.copydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBCopyData* DBRoleLoginAck::unsafe_arena_release_copydata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.CopyData)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::symphony::proto::DBCopyData* temp = _impl_.copydata_;
  _impl_.copydata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBCopyData* DBRoleLoginAck::_internal_mutable_copydata() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.copydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBCopyData>(GetArenaForAllocation());
    _impl_.copydata_ = p;
  }
  return _impl_.copydata_;
}
inline ::symphony::proto::DBCopyData* DBRoleLoginAck::mutable_copydata() {
  ::symphony::proto::DBCopyData* _msg = _internal_mutable_copydata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.CopyData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_copydata(::symphony::proto::DBCopyData* copydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.copydata_;
  }
  if (copydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(copydata);
    if (message_arena != submessage_arena) {
      copydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, copydata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.copydata_ = copydata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.CopyData)
}

// optional .symphony.proto.DBEquipData EquipData = 6;
inline bool DBRoleLoginAck::_internal_has_equipdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.equipdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_equipdata() const {
  return _internal_has_equipdata();
}
inline void DBRoleLoginAck::clear_equipdata() {
  if (_impl_.equipdata_ != nullptr) _impl_.equipdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::symphony::proto::DBEquipData& DBRoleLoginAck::_internal_equipdata() const {
  const ::symphony::proto::DBEquipData* p = _impl_.equipdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBEquipData&>(
      ::symphony::proto::_DBEquipData_default_instance_);
}
inline const ::symphony::proto::DBEquipData& DBRoleLoginAck::equipdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.EquipData)
  return _internal_equipdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_equipdata(
    ::symphony::proto::DBEquipData* equipdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipdata_);
  }
  _impl_.equipdata_ = equipdata;
  if (equipdata) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.EquipData)
}
inline ::symphony::proto::DBEquipData* DBRoleLoginAck::release_equipdata() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::symphony::proto::DBEquipData* temp = _impl_.equipdata_;
  _impl_.equipdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBEquipData* DBRoleLoginAck::unsafe_arena_release_equipdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.EquipData)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::symphony::proto::DBEquipData* temp = _impl_.equipdata_;
  _impl_.equipdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBEquipData* DBRoleLoginAck::_internal_mutable_equipdata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.equipdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBEquipData>(GetArenaForAllocation());
    _impl_.equipdata_ = p;
  }
  return _impl_.equipdata_;
}
inline ::symphony::proto::DBEquipData* DBRoleLoginAck::mutable_equipdata() {
  ::symphony::proto::DBEquipData* _msg = _internal_mutable_equipdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.EquipData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_equipdata(::symphony::proto::DBEquipData* equipdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equipdata_;
  }
  if (equipdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equipdata);
    if (message_arena != submessage_arena) {
      equipdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.equipdata_ = equipdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.EquipData)
}

// optional .symphony.proto.DBGemData GemData = 7;
inline bool DBRoleLoginAck::_internal_has_gemdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gemdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_gemdata() const {
  return _internal_has_gemdata();
}
inline void DBRoleLoginAck::clear_gemdata() {
  if (_impl_.gemdata_ != nullptr) _impl_.gemdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::symphony::proto::DBGemData& DBRoleLoginAck::_internal_gemdata() const {
  const ::symphony::proto::DBGemData* p = _impl_.gemdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBGemData&>(
      ::symphony::proto::_DBGemData_default_instance_);
}
inline const ::symphony::proto::DBGemData& DBRoleLoginAck::gemdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.GemData)
  return _internal_gemdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_gemdata(
    ::symphony::proto::DBGemData* gemdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gemdata_);
  }
  _impl_.gemdata_ = gemdata;
  if (gemdata) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.GemData)
}
inline ::symphony::proto::DBGemData* DBRoleLoginAck::release_gemdata() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::symphony::proto::DBGemData* temp = _impl_.gemdata_;
  _impl_.gemdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBGemData* DBRoleLoginAck::unsafe_arena_release_gemdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.GemData)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::symphony::proto::DBGemData* temp = _impl_.gemdata_;
  _impl_.gemdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBGemData* DBRoleLoginAck::_internal_mutable_gemdata() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.gemdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBGemData>(GetArenaForAllocation());
    _impl_.gemdata_ = p;
  }
  return _impl_.gemdata_;
}
inline ::symphony::proto::DBGemData* DBRoleLoginAck::mutable_gemdata() {
  ::symphony::proto::DBGemData* _msg = _internal_mutable_gemdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.GemData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_gemdata(::symphony::proto::DBGemData* gemdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gemdata_;
  }
  if (gemdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gemdata);
    if (message_arena != submessage_arena) {
      gemdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gemdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.gemdata_ = gemdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.GemData)
}

// optional .symphony.proto.DBPetData PetData = 8;
inline bool DBRoleLoginAck::_internal_has_petdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.petdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_petdata() const {
  return _internal_has_petdata();
}
inline void DBRoleLoginAck::clear_petdata() {
  if (_impl_.petdata_ != nullptr) _impl_.petdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::symphony::proto::DBPetData& DBRoleLoginAck::_internal_petdata() const {
  const ::symphony::proto::DBPetData* p = _impl_.petdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBPetData&>(
      ::symphony::proto::_DBPetData_default_instance_);
}
inline const ::symphony::proto::DBPetData& DBRoleLoginAck::petdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.PetData)
  return _internal_petdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_petdata(
    ::symphony::proto::DBPetData* petdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.petdata_);
  }
  _impl_.petdata_ = petdata;
  if (petdata) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.PetData)
}
inline ::symphony::proto::DBPetData* DBRoleLoginAck::release_petdata() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::symphony::proto::DBPetData* temp = _impl_.petdata_;
  _impl_.petdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBPetData* DBRoleLoginAck::unsafe_arena_release_petdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.PetData)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::symphony::proto::DBPetData* temp = _impl_.petdata_;
  _impl_.petdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBPetData* DBRoleLoginAck::_internal_mutable_petdata() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.petdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBPetData>(GetArenaForAllocation());
    _impl_.petdata_ = p;
  }
  return _impl_.petdata_;
}
inline ::symphony::proto::DBPetData* DBRoleLoginAck::mutable_petdata() {
  ::symphony::proto::DBPetData* _msg = _internal_mutable_petdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.PetData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_petdata(::symphony::proto::DBPetData* petdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.petdata_;
  }
  if (petdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(petdata);
    if (message_arena != submessage_arena) {
      petdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, petdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.petdata_ = petdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.PetData)
}

// optional .symphony.proto.DBPartnerData PartnerData = 9;
inline bool DBRoleLoginAck::_internal_has_partnerdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.partnerdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_partnerdata() const {
  return _internal_has_partnerdata();
}
inline void DBRoleLoginAck::clear_partnerdata() {
  if (_impl_.partnerdata_ != nullptr) _impl_.partnerdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::symphony::proto::DBPartnerData& DBRoleLoginAck::_internal_partnerdata() const {
  const ::symphony::proto::DBPartnerData* p = _impl_.partnerdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBPartnerData&>(
      ::symphony::proto::_DBPartnerData_default_instance_);
}
inline const ::symphony::proto::DBPartnerData& DBRoleLoginAck::partnerdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.PartnerData)
  return _internal_partnerdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_partnerdata(
    ::symphony::proto::DBPartnerData* partnerdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.partnerdata_);
  }
  _impl_.partnerdata_ = partnerdata;
  if (partnerdata) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.PartnerData)
}
inline ::symphony::proto::DBPartnerData* DBRoleLoginAck::release_partnerdata() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::symphony::proto::DBPartnerData* temp = _impl_.partnerdata_;
  _impl_.partnerdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBPartnerData* DBRoleLoginAck::unsafe_arena_release_partnerdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.PartnerData)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::symphony::proto::DBPartnerData* temp = _impl_.partnerdata_;
  _impl_.partnerdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBPartnerData* DBRoleLoginAck::_internal_mutable_partnerdata() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.partnerdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBPartnerData>(GetArenaForAllocation());
    _impl_.partnerdata_ = p;
  }
  return _impl_.partnerdata_;
}
inline ::symphony::proto::DBPartnerData* DBRoleLoginAck::mutable_partnerdata() {
  ::symphony::proto::DBPartnerData* _msg = _internal_mutable_partnerdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.PartnerData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_partnerdata(::symphony::proto::DBPartnerData* partnerdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.partnerdata_;
  }
  if (partnerdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partnerdata);
    if (message_arena != submessage_arena) {
      partnerdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partnerdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.partnerdata_ = partnerdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.PartnerData)
}

// optional .symphony.proto.DBTaskData TaskData = 10;
inline bool DBRoleLoginAck::_internal_has_taskdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.taskdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_taskdata() const {
  return _internal_has_taskdata();
}
inline void DBRoleLoginAck::clear_taskdata() {
  if (_impl_.taskdata_ != nullptr) _impl_.taskdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::symphony::proto::DBTaskData& DBRoleLoginAck::_internal_taskdata() const {
  const ::symphony::proto::DBTaskData* p = _impl_.taskdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBTaskData&>(
      ::symphony::proto::_DBTaskData_default_instance_);
}
inline const ::symphony::proto::DBTaskData& DBRoleLoginAck::taskdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.TaskData)
  return _internal_taskdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_taskdata(
    ::symphony::proto::DBTaskData* taskdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.taskdata_);
  }
  _impl_.taskdata_ = taskdata;
  if (taskdata) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.TaskData)
}
inline ::symphony::proto::DBTaskData* DBRoleLoginAck::release_taskdata() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::symphony::proto::DBTaskData* temp = _impl_.taskdata_;
  _impl_.taskdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBTaskData* DBRoleLoginAck::unsafe_arena_release_taskdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.TaskData)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::symphony::proto::DBTaskData* temp = _impl_.taskdata_;
  _impl_.taskdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBTaskData* DBRoleLoginAck::_internal_mutable_taskdata() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.taskdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBTaskData>(GetArenaForAllocation());
    _impl_.taskdata_ = p;
  }
  return _impl_.taskdata_;
}
inline ::symphony::proto::DBTaskData* DBRoleLoginAck::mutable_taskdata() {
  ::symphony::proto::DBTaskData* _msg = _internal_mutable_taskdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.TaskData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_taskdata(::symphony::proto::DBTaskData* taskdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.taskdata_;
  }
  if (taskdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(taskdata);
    if (message_arena != submessage_arena) {
      taskdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.taskdata_ = taskdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.TaskData)
}

// optional .symphony.proto.DBMailData MailData = 11;
inline bool DBRoleLoginAck::_internal_has_maildata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maildata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_maildata() const {
  return _internal_has_maildata();
}
inline void DBRoleLoginAck::clear_maildata() {
  if (_impl_.maildata_ != nullptr) _impl_.maildata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::symphony::proto::DBMailData& DBRoleLoginAck::_internal_maildata() const {
  const ::symphony::proto::DBMailData* p = _impl_.maildata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBMailData&>(
      ::symphony::proto::_DBMailData_default_instance_);
}
inline const ::symphony::proto::DBMailData& DBRoleLoginAck::maildata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.MailData)
  return _internal_maildata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_maildata(
    ::symphony::proto::DBMailData* maildata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maildata_);
  }
  _impl_.maildata_ = maildata;
  if (maildata) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.MailData)
}
inline ::symphony::proto::DBMailData* DBRoleLoginAck::release_maildata() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::symphony::proto::DBMailData* temp = _impl_.maildata_;
  _impl_.maildata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBMailData* DBRoleLoginAck::unsafe_arena_release_maildata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.MailData)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::symphony::proto::DBMailData* temp = _impl_.maildata_;
  _impl_.maildata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBMailData* DBRoleLoginAck::_internal_mutable_maildata() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.maildata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBMailData>(GetArenaForAllocation());
    _impl_.maildata_ = p;
  }
  return _impl_.maildata_;
}
inline ::symphony::proto::DBMailData* DBRoleLoginAck::mutable_maildata() {
  ::symphony::proto::DBMailData* _msg = _internal_mutable_maildata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.MailData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_maildata(::symphony::proto::DBMailData* maildata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.maildata_;
  }
  if (maildata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(maildata);
    if (message_arena != submessage_arena) {
      maildata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maildata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.maildata_ = maildata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.MailData)
}

// optional .symphony.proto.DBMountData MountData = 12;
inline bool DBRoleLoginAck::_internal_has_mountdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mountdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_mountdata() const {
  return _internal_has_mountdata();
}
inline void DBRoleLoginAck::clear_mountdata() {
  if (_impl_.mountdata_ != nullptr) _impl_.mountdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::symphony::proto::DBMountData& DBRoleLoginAck::_internal_mountdata() const {
  const ::symphony::proto::DBMountData* p = _impl_.mountdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBMountData&>(
      ::symphony::proto::_DBMountData_default_instance_);
}
inline const ::symphony::proto::DBMountData& DBRoleLoginAck::mountdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.MountData)
  return _internal_mountdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_mountdata(
    ::symphony::proto::DBMountData* mountdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mountdata_);
  }
  _impl_.mountdata_ = mountdata;
  if (mountdata) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.MountData)
}
inline ::symphony::proto::DBMountData* DBRoleLoginAck::release_mountdata() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::symphony::proto::DBMountData* temp = _impl_.mountdata_;
  _impl_.mountdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBMountData* DBRoleLoginAck::unsafe_arena_release_mountdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.MountData)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::symphony::proto::DBMountData* temp = _impl_.mountdata_;
  _impl_.mountdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBMountData* DBRoleLoginAck::_internal_mutable_mountdata() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.mountdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBMountData>(GetArenaForAllocation());
    _impl_.mountdata_ = p;
  }
  return _impl_.mountdata_;
}
inline ::symphony::proto::DBMountData* DBRoleLoginAck::mutable_mountdata() {
  ::symphony::proto::DBMountData* _msg = _internal_mutable_mountdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.MountData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_mountdata(::symphony::proto::DBMountData* mountdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.mountdata_;
  }
  if (mountdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(mountdata);
    if (message_arena != submessage_arena) {
      mountdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mountdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.mountdata_ = mountdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.MountData)
}

// optional .symphony.proto.DBActivityData ActivityData = 13;
inline bool DBRoleLoginAck::_internal_has_activitydata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.activitydata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_activitydata() const {
  return _internal_has_activitydata();
}
inline void DBRoleLoginAck::clear_activitydata() {
  if (_impl_.activitydata_ != nullptr) _impl_.activitydata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::symphony::proto::DBActivityData& DBRoleLoginAck::_internal_activitydata() const {
  const ::symphony::proto::DBActivityData* p = _impl_.activitydata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBActivityData&>(
      ::symphony::proto::_DBActivityData_default_instance_);
}
inline const ::symphony::proto::DBActivityData& DBRoleLoginAck::activitydata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.ActivityData)
  return _internal_activitydata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_activitydata(
    ::symphony::proto::DBActivityData* activitydata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activitydata_);
  }
  _impl_.activitydata_ = activitydata;
  if (activitydata) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.ActivityData)
}
inline ::symphony::proto::DBActivityData* DBRoleLoginAck::release_activitydata() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::symphony::proto::DBActivityData* temp = _impl_.activitydata_;
  _impl_.activitydata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBActivityData* DBRoleLoginAck::unsafe_arena_release_activitydata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.ActivityData)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::symphony::proto::DBActivityData* temp = _impl_.activitydata_;
  _impl_.activitydata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBActivityData* DBRoleLoginAck::_internal_mutable_activitydata() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.activitydata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBActivityData>(GetArenaForAllocation());
    _impl_.activitydata_ = p;
  }
  return _impl_.activitydata_;
}
inline ::symphony::proto::DBActivityData* DBRoleLoginAck::mutable_activitydata() {
  ::symphony::proto::DBActivityData* _msg = _internal_mutable_activitydata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.ActivityData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_activitydata(::symphony::proto::DBActivityData* activitydata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.activitydata_;
  }
  if (activitydata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activitydata);
    if (message_arena != submessage_arena) {
      activitydata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activitydata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.activitydata_ = activitydata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.ActivityData)
}

// optional .symphony.proto.DBCounterData CounterData = 14;
inline bool DBRoleLoginAck::_internal_has_counterdata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterdata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_counterdata() const {
  return _internal_has_counterdata();
}
inline void DBRoleLoginAck::clear_counterdata() {
  if (_impl_.counterdata_ != nullptr) _impl_.counterdata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::symphony::proto::DBCounterData& DBRoleLoginAck::_internal_counterdata() const {
  const ::symphony::proto::DBCounterData* p = _impl_.counterdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBCounterData&>(
      ::symphony::proto::_DBCounterData_default_instance_);
}
inline const ::symphony::proto::DBCounterData& DBRoleLoginAck::counterdata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.CounterData)
  return _internal_counterdata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_counterdata(
    ::symphony::proto::DBCounterData* counterdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterdata_);
  }
  _impl_.counterdata_ = counterdata;
  if (counterdata) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.CounterData)
}
inline ::symphony::proto::DBCounterData* DBRoleLoginAck::release_counterdata() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::symphony::proto::DBCounterData* temp = _impl_.counterdata_;
  _impl_.counterdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBCounterData* DBRoleLoginAck::unsafe_arena_release_counterdata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.CounterData)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::symphony::proto::DBCounterData* temp = _impl_.counterdata_;
  _impl_.counterdata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBCounterData* DBRoleLoginAck::_internal_mutable_counterdata() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.counterdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBCounterData>(GetArenaForAllocation());
    _impl_.counterdata_ = p;
  }
  return _impl_.counterdata_;
}
inline ::symphony::proto::DBCounterData* DBRoleLoginAck::mutable_counterdata() {
  ::symphony::proto::DBCounterData* _msg = _internal_mutable_counterdata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.CounterData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_counterdata(::symphony::proto::DBCounterData* counterdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.counterdata_;
  }
  if (counterdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counterdata);
    if (message_arena != submessage_arena) {
      counterdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counterdata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.counterdata_ = counterdata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.CounterData)
}

// optional .symphony.proto.DBFriendData FriendData = 15;
inline bool DBRoleLoginAck::_internal_has_frienddata() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frienddata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_frienddata() const {
  return _internal_has_frienddata();
}
inline void DBRoleLoginAck::clear_frienddata() {
  if (_impl_.frienddata_ != nullptr) _impl_.frienddata_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::symphony::proto::DBFriendData& DBRoleLoginAck::_internal_frienddata() const {
  const ::symphony::proto::DBFriendData* p = _impl_.frienddata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBFriendData&>(
      ::symphony::proto::_DBFriendData_default_instance_);
}
inline const ::symphony::proto::DBFriendData& DBRoleLoginAck::frienddata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.FriendData)
  return _internal_frienddata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_frienddata(
    ::symphony::proto::DBFriendData* frienddata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frienddata_);
  }
  _impl_.frienddata_ = frienddata;
  if (frienddata) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.FriendData)
}
inline ::symphony::proto::DBFriendData* DBRoleLoginAck::release_frienddata() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::symphony::proto::DBFriendData* temp = _impl_.frienddata_;
  _impl_.frienddata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBFriendData* DBRoleLoginAck::unsafe_arena_release_frienddata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.FriendData)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::symphony::proto::DBFriendData* temp = _impl_.frienddata_;
  _impl_.frienddata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBFriendData* DBRoleLoginAck::_internal_mutable_frienddata() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.frienddata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBFriendData>(GetArenaForAllocation());
    _impl_.frienddata_ = p;
  }
  return _impl_.frienddata_;
}
inline ::symphony::proto::DBFriendData* DBRoleLoginAck::mutable_frienddata() {
  ::symphony::proto::DBFriendData* _msg = _internal_mutable_frienddata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.FriendData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_frienddata(::symphony::proto::DBFriendData* frienddata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.frienddata_;
  }
  if (frienddata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frienddata);
    if (message_arena != submessage_arena) {
      frienddata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frienddata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.frienddata_ = frienddata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.FriendData)
}

// optional .symphony.proto.DBSkillData SkillData = 16;
inline bool DBRoleLoginAck::_internal_has_skilldata() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skilldata_ != nullptr);
  return value;
}
inline bool DBRoleLoginAck::has_skilldata() const {
  return _internal_has_skilldata();
}
inline void DBRoleLoginAck::clear_skilldata() {
  if (_impl_.skilldata_ != nullptr) _impl_.skilldata_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::symphony::proto::DBSkillData& DBRoleLoginAck::_internal_skilldata() const {
  const ::symphony::proto::DBSkillData* p = _impl_.skilldata_;
  return p != nullptr ? *p : reinterpret_cast<const ::symphony::proto::DBSkillData&>(
      ::symphony::proto::_DBSkillData_default_instance_);
}
inline const ::symphony::proto::DBSkillData& DBRoleLoginAck::skilldata() const {
  // @@protoc_insertion_point(field_get:symphony.proto.DBRoleLoginAck.SkillData)
  return _internal_skilldata();
}
inline void DBRoleLoginAck::unsafe_arena_set_allocated_skilldata(
    ::symphony::proto::DBSkillData* skilldata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skilldata_);
  }
  _impl_.skilldata_ = skilldata;
  if (skilldata) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:symphony.proto.DBRoleLoginAck.SkillData)
}
inline ::symphony::proto::DBSkillData* DBRoleLoginAck::release_skilldata() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::symphony::proto::DBSkillData* temp = _impl_.skilldata_;
  _impl_.skilldata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::symphony::proto::DBSkillData* DBRoleLoginAck::unsafe_arena_release_skilldata() {
  // @@protoc_insertion_point(field_release:symphony.proto.DBRoleLoginAck.SkillData)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::symphony::proto::DBSkillData* temp = _impl_.skilldata_;
  _impl_.skilldata_ = nullptr;
  return temp;
}
inline ::symphony::proto::DBSkillData* DBRoleLoginAck::_internal_mutable_skilldata() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.skilldata_ == nullptr) {
    auto* p = CreateMaybeMessage<::symphony::proto::DBSkillData>(GetArenaForAllocation());
    _impl_.skilldata_ = p;
  }
  return _impl_.skilldata_;
}
inline ::symphony::proto::DBSkillData* DBRoleLoginAck::mutable_skilldata() {
  ::symphony::proto::DBSkillData* _msg = _internal_mutable_skilldata();
  // @@protoc_insertion_point(field_mutable:symphony.proto.DBRoleLoginAck.SkillData)
  return _msg;
}
inline void DBRoleLoginAck::set_allocated_skilldata(::symphony::proto::DBSkillData* skilldata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skilldata_;
  }
  if (skilldata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skilldata);
    if (message_arena != submessage_arena) {
      skilldata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skilldata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.skilldata_ = skilldata;
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.DBRoleLoginAck.SkillData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace symphony

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto
