// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_move.proto

#include "symphony/proto/msg_move.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR SkillCastReq::SkillCastReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetobjects_)*/{}
  , /*decltype(_impl_._targetobjects_cached_byte_size_)*/{0}
  , /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.skillid_)*/0
  , /*decltype(_impl_.hostx_)*/0
  , /*decltype(_impl_.hosty_)*/0
  , /*decltype(_impl_.hostz_)*/0
  , /*decltype(_impl_.hostft_)*/0
  , /*decltype(_impl_.targetx_)*/0
  , /*decltype(_impl_.targety_)*/0
  , /*decltype(_impl_.targetz_)*/0
  , /*decltype(_impl_.targetft_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillCastReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillCastReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillCastReqDefaultTypeInternal() {}
  union {
    SkillCastReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillCastReqDefaultTypeInternal _SkillCastReq_default_instance_;
PROTOBUF_CONSTEXPR SkillCastAck::SkillCastAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillCastAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillCastAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillCastAckDefaultTypeInternal() {}
  union {
    SkillCastAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillCastAckDefaultTypeInternal _SkillCastAck_default_instance_;
PROTOBUF_CONSTEXPR SkillResultItem::SkillResultItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.skillid_)*/0
  , /*decltype(_impl_.actionid_)*/0
  , /*decltype(_impl_.orgx_)*/0
  , /*decltype(_impl_.orgy_)*/0
  , /*decltype(_impl_.orgz_)*/0
  , /*decltype(_impl_.orgft_)*/0
  , /*decltype(_impl_.hpchange_)*/0
  , /*decltype(_impl_.bcrit_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillResultItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillResultItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillResultItemDefaultTypeInternal() {}
  union {
    SkillResultItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillResultItemDefaultTypeInternal _SkillResultItem_default_instance_;
PROTOBUF_CONSTEXPR SkillResultNtf::SkillResultNtf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillResultNtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillResultNtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillResultNtfDefaultTypeInternal() {}
  union {
    SkillResultNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillResultNtfDefaultTypeInternal _SkillResultNtf_default_instance_;
PROTOBUF_CONSTEXPR ObjectActionReq::ObjectActionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actionlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectActionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectActionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectActionReqDefaultTypeInternal() {}
  union {
    ObjectActionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectActionReqDefaultTypeInternal _ObjectActionReq_default_instance_;
PROTOBUF_CONSTEXPR ObjectActionNty::ObjectActionNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actionlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectActionNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectActionNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectActionNtyDefaultTypeInternal() {}
  union {
    ObjectActionNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectActionNtyDefaultTypeInternal _ObjectActionNty_default_instance_;
PROTOBUF_CONSTEXPR ActionReqItem::ActionReqItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.actionid_)*/0
  , /*decltype(_impl_.hostx_)*/0
  , /*decltype(_impl_.hosty_)*/0
  , /*decltype(_impl_.hostz_)*/0
  , /*decltype(_impl_.hostft_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionReqItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionReqItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionReqItemDefaultTypeInternal() {}
  union {
    ActionReqItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionReqItemDefaultTypeInternal _ActionReqItem_default_instance_;
PROTOBUF_CONSTEXPR ObjectActionAck::ObjectActionAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.actionlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectActionAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectActionAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectActionAckDefaultTypeInternal() {}
  union {
    ObjectActionAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectActionAckDefaultTypeInternal _ObjectActionAck_default_instance_;
PROTOBUF_CONSTEXPR ActionNtyItem::ActionNtyItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
  , /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.actionid_)*/0
  , /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_.objectstatus_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.hostx_)*/0
  , /*decltype(_impl_.hosty_)*/0
  , /*decltype(_impl_.hostz_)*/0
  , /*decltype(_impl_.hostft_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.mountid_)*/0
  , /*decltype(_impl_.controlerid_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.hpmax_)*/0
  , /*decltype(_impl_.mpmax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActionNtyItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionNtyItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionNtyItemDefaultTypeInternal() {}
  union {
    ActionNtyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionNtyItemDefaultTypeInternal _ActionNtyItem_default_instance_;
PROTOBUF_CONSTEXPR NewItem::NewItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.actionid_)*/0
  , /*decltype(_impl_.objtype_)*/0
  , /*decltype(_impl_.objectstatus_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.mountid_)*/0
  , /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.hostguid_)*/uint64_t{0u}
  , /*decltype(_impl_.controlerid_)*/uint64_t{0u}
  , /*decltype(_impl_.summonid_)*/uint64_t{0u}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.ft_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.hpmax_)*/0
  , /*decltype(_impl_.mpmax_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewItemDefaultTypeInternal() {}
  union {
    NewItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewItemDefaultTypeInternal _NewItem_default_instance_;
PROTOBUF_CONSTEXPR ObjectNewNty::ObjectNewNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectNewNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectNewNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectNewNtyDefaultTypeInternal() {}
  union {
    ObjectNewNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectNewNtyDefaultTypeInternal _ObjectNewNty_default_instance_;
PROTOBUF_CONSTEXPR ObjectRemoveNty::ObjectRemoveNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.removelist_)*/{}
  , /*decltype(_impl_._removelist_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectRemoveNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectRemoveNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectRemoveNtyDefaultTypeInternal() {}
  union {
    ObjectRemoveNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectRemoveNtyDefaultTypeInternal _ObjectRemoveNty_default_instance_;
PROTOBUF_CONSTEXPR BulletItem::BulletItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetguid_)*/uint64_t{0u}
  , /*decltype(_impl_.casterguid_)*/uint64_t{0u}
  , /*decltype(_impl_.bulletid_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.angle_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.accspeed_)*/0
  , /*decltype(_impl_.lifetime_)*/0
  , /*decltype(_impl_.lefttime_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulletItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulletItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulletItemDefaultTypeInternal() {}
  union {
    BulletItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulletItemDefaultTypeInternal _BulletItem_default_instance_;
PROTOBUF_CONSTEXPR BulletNewNtf::BulletNewNtf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BulletNewNtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BulletNewNtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BulletNewNtfDefaultTypeInternal() {}
  union {
    BulletNewNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BulletNewNtfDefaultTypeInternal _BulletNewNtf_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatReq::HeartBeatReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatReqDefaultTypeInternal() {}
  union {
    HeartBeatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatReqDefaultTypeInternal _HeartBeatReq_default_instance_;
PROTOBUF_CONSTEXPR HeartBeatAck::HeartBeatAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.servertime_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartBeatAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartBeatAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartBeatAckDefaultTypeInternal() {}
  union {
    HeartBeatAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartBeatAckDefaultTypeInternal _HeartBeatAck_default_instance_;
PROTOBUF_CONSTEXPR ObjectDieNotify::ObjectDieNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectDieNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectDieNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectDieNotifyDefaultTypeInternal() {}
  union {
    ObjectDieNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectDieNotifyDefaultTypeInternal _ObjectDieNotify_default_instance_;
PROTOBUF_CONSTEXPR Msg_RidingMountReq::Msg_RidingMountReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_RidingMountReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_RidingMountReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_RidingMountReqDefaultTypeInternal() {}
  union {
    Msg_RidingMountReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_RidingMountReqDefaultTypeInternal _Msg_RidingMountReq_default_instance_;
PROTOBUF_CONSTEXPR Msg_RidingMountAck::Msg_RidingMountAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_RidingMountAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_RidingMountAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_RidingMountAckDefaultTypeInternal() {}
  union {
    Msg_RidingMountAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_RidingMountAckDefaultTypeInternal _Msg_RidingMountAck_default_instance_;
PROTOBUF_CONSTEXPR Msg_RoleRebornReq::Msg_RoleRebornReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.objectguid_)*/uint64_t{0u}
  , /*decltype(_impl_.reborntype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_RoleRebornReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_RoleRebornReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_RoleRebornReqDefaultTypeInternal() {}
  union {
    Msg_RoleRebornReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_RoleRebornReqDefaultTypeInternal _Msg_RoleRebornReq_default_instance_;
PROTOBUF_CONSTEXPR Msg_RoleRebornAck::Msg_RoleRebornAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_RoleRebornAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_RoleRebornAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_RoleRebornAckDefaultTypeInternal() {}
  union {
    Msg_RoleRebornAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_RoleRebornAckDefaultTypeInternal _Msg_RoleRebornAck_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2fmsg_5fmove_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2fmsg_5fmove_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2fmsg_5fmove_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.skillid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.hostx_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.hosty_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.hostz_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.hostft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.targetx_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.targety_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.targetz_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.targetft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastReq, _impl_.targetobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillCastAck, _impl_.objectguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.skillid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.actionid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.orgx_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.orgy_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.orgz_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.orgft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.hpchange_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultItem, _impl_.bcrit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillResultNtf, _impl_.itemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionReq, _impl_.actionlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionNty, _impl_.actionlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.actionid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.hostx_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.hosty_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.hostz_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionReqItem, _impl_.hostft_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectActionAck, _impl_.actionlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.actionid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.objectstatus_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hostx_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hosty_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hostz_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hostft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.mountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.controlerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.hpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.mpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ActionNtyItem, _impl_.equips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.actionid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.objtype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.objectstatus_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.mountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.hostguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.controlerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.summonid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.ft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.hpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.mpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NewItem, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectNewNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectNewNty, _impl_.newlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectRemoveNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectRemoveNty, _impl_.removelist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.targetguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.casterguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.bulletid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.angle_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.accspeed_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.lifetime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletItem, _impl_.lefttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletNewNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BulletNewNtf, _impl_.itemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HeartBeatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HeartBeatReq, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HeartBeatAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HeartBeatAck, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HeartBeatAck, _impl_.servertime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectDieNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectDieNotify, _impl_.objectguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RidingMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RidingMountReq, _impl_.objectguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RidingMountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RidingMountAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RoleRebornReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RoleRebornReq, _impl_.objectguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RoleRebornReq, _impl_.reborntype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RoleRebornAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_RoleRebornAck, _impl_.retcode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::symphony::proto::SkillCastReq)},
  { 17, -1, -1, sizeof(::symphony::proto::SkillCastAck)},
  { 25, -1, -1, sizeof(::symphony::proto::SkillResultItem)},
  { 40, -1, -1, sizeof(::symphony::proto::SkillResultNtf)},
  { 47, -1, -1, sizeof(::symphony::proto::ObjectActionReq)},
  { 54, -1, -1, sizeof(::symphony::proto::ObjectActionNty)},
  { 61, -1, -1, sizeof(::symphony::proto::ActionReqItem)},
  { 73, -1, -1, sizeof(::symphony::proto::ObjectActionAck)},
  { 80, -1, -1, sizeof(::symphony::proto::ActionNtyItem)},
  { 104, -1, -1, sizeof(::symphony::proto::NewItem)},
  { 133, -1, -1, sizeof(::symphony::proto::ObjectNewNty)},
  { 140, -1, -1, sizeof(::symphony::proto::ObjectRemoveNty)},
  { 147, -1, -1, sizeof(::symphony::proto::BulletItem)},
  { 165, -1, -1, sizeof(::symphony::proto::BulletNewNtf)},
  { 172, -1, -1, sizeof(::symphony::proto::HeartBeatReq)},
  { 179, -1, -1, sizeof(::symphony::proto::HeartBeatAck)},
  { 187, -1, -1, sizeof(::symphony::proto::ObjectDieNotify)},
  { 194, -1, -1, sizeof(::symphony::proto::Msg_RidingMountReq)},
  { 201, -1, -1, sizeof(::symphony::proto::Msg_RidingMountAck)},
  { 208, -1, -1, sizeof(::symphony::proto::Msg_RoleRebornReq)},
  { 216, -1, -1, sizeof(::symphony::proto::Msg_RoleRebornAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_SkillCastReq_default_instance_._instance,
  &::symphony::proto::_SkillCastAck_default_instance_._instance,
  &::symphony::proto::_SkillResultItem_default_instance_._instance,
  &::symphony::proto::_SkillResultNtf_default_instance_._instance,
  &::symphony::proto::_ObjectActionReq_default_instance_._instance,
  &::symphony::proto::_ObjectActionNty_default_instance_._instance,
  &::symphony::proto::_ActionReqItem_default_instance_._instance,
  &::symphony::proto::_ObjectActionAck_default_instance_._instance,
  &::symphony::proto::_ActionNtyItem_default_instance_._instance,
  &::symphony::proto::_NewItem_default_instance_._instance,
  &::symphony::proto::_ObjectNewNty_default_instance_._instance,
  &::symphony::proto::_ObjectRemoveNty_default_instance_._instance,
  &::symphony::proto::_BulletItem_default_instance_._instance,
  &::symphony::proto::_BulletNewNtf_default_instance_._instance,
  &::symphony::proto::_HeartBeatReq_default_instance_._instance,
  &::symphony::proto::_HeartBeatAck_default_instance_._instance,
  &::symphony::proto::_ObjectDieNotify_default_instance_._instance,
  &::symphony::proto::_Msg_RidingMountReq_default_instance_._instance,
  &::symphony::proto::_Msg_RidingMountAck_default_instance_._instance,
  &::symphony::proto::_Msg_RoleRebornReq_default_instance_._instance,
  &::symphony::proto::_Msg_RoleRebornAck_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2fmsg_5fmove_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035symphony/proto/msg_move.proto\022\016symphon"
  "y.proto\032\035symphony/proto/msg_base.proto\"\314"
  "\001\n\014SkillCastReq\022\022\n\nObjectGuid\030\001 \001(\004\022\017\n\007S"
  "killID\030\002 \001(\005\022\r\n\005HostX\030\003 \001(\002\022\r\n\005HostY\030\004 \001"
  "(\002\022\r\n\005HostZ\030\005 \001(\002\022\016\n\006HostFt\030\006 \001(\002\022\017\n\007Tar"
  "getX\030\007 \001(\002\022\017\n\007TargetY\030\010 \001(\002\022\017\n\007TargetZ\030\t"
  " \001(\002\022\020\n\010TargetFt\030\n \001(\002\022\025\n\rTargetObjects\030"
  "\013 \003(\004\"3\n\014SkillCastAck\022\017\n\007RetCode\030\001 \001(\r\022\022"
  "\n\nObjectGuid\030\002 \001(\004\"\242\001\n\017SkillResultItem\022\022"
  "\n\nObjectGuid\030\001 \001(\004\022\017\n\007SkillID\030\002 \001(\005\022\020\n\010A"
  "ctionID\030\003 \001(\005\022\014\n\004OrgX\030\004 \001(\002\022\014\n\004OrgY\030\005 \001("
  "\002\022\014\n\004OrgZ\030\006 \001(\002\022\r\n\005OrgFt\030\007 \001(\002\022\020\n\010HpChan"
  "ge\030\010 \001(\005\022\r\n\005bCrit\030\t \001(\010\"C\n\016SkillResultNt"
  "f\0221\n\010ItemList\030\001 \003(\0132\037.symphony.proto.Ski"
  "llResultItem\"D\n\017ObjectActionReq\0221\n\nActio"
  "nList\030\001 \003(\0132\035.symphony.proto.ActionReqIt"
  "em\"D\n\017ObjectActionNty\0221\n\nActionList\030\001 \003("
  "\0132\035.symphony.proto.ActionNtyItem\"r\n\rActi"
  "onReqItem\022\022\n\nObjectGuid\030\001 \001(\004\022\020\n\010ActionI"
  "D\030\002 \001(\005\022\r\n\005HostX\030\003 \001(\002\022\r\n\005HostY\030\004 \001(\002\022\r\n"
  "\005HostZ\030\005 \001(\002\022\016\n\006HostFt\030\006 \001(\002\"D\n\017ObjectAc"
  "tionAck\0221\n\nActionList\030\001 \003(\0132\035.symphony.p"
  "roto.ActionReqItem\"\261\002\n\rActionNtyItem\022\022\n\n"
  "ObjectGuid\030\001 \001(\004\022\020\n\010ActionID\030\002 \001(\005\022\014\n\004Ca"
  "mp\030\003 \001(\005\022\024\n\014ObjectStatus\030\004 \001(\005\022\r\n\005Speed\030"
  "\005 \001(\005\022\r\n\005HostX\030\006 \001(\002\022\r\n\005HostY\030\007 \001(\002\022\r\n\005H"
  "ostZ\030\010 \001(\002\022\016\n\006HostFt\030\t \001(\002\022\017\n\007ActorID\030\n "
  "\001(\005\022\017\n\007MountID\030\013 \001(\005\022\r\n\005Level\030\014 \001(\005\022\023\n\013C"
  "ontrolerID\030\r \001(\004\022\n\n\002Hp\030\016 \001(\005\022\n\n\002Mp\030\017 \001(\005"
  "\022\r\n\005HpMax\030\020 \001(\005\022\r\n\005MpMax\030\021 \001(\005\022\016\n\006Equips"
  "\030\022 \003(\005\"\211\003\n\007NewItem\022\022\n\nObjectGuid\030\001 \001(\004\022\020"
  "\n\010ActionID\030\002 \001(\005\022\017\n\007ObjType\030\003 \001(\005\022\024\n\014Obj"
  "ectStatus\030\004 \001(\005\022\017\n\007ActorID\030\005 \001(\005\022\017\n\007Moun"
  "tID\030\006 \001(\005\022\014\n\004Camp\030\007 \001(\005\022\014\n\004Name\030\010 \001(\t\022\r\n"
  "\005Level\030\t \001(\005\022\r\n\005Speed\030\n \001(\005\022\020\n\010HostGuid\030"
  "\013 \001(\004\022\023\n\013ControlerID\030\014 \001(\004\022\020\n\010SummonID\030\r"
  " \001(\004\022\t\n\001X\030\016 \001(\002\022\t\n\001Y\030\017 \001(\002\022\t\n\001Z\030\020 \001(\002\022\n\n"
  "\002Ft\030\021 \001(\002\022\n\n\002Hp\030\022 \001(\005\022\n\n\002Mp\030\023 \001(\005\022\r\n\005HpM"
  "ax\030\024 \001(\005\022\r\n\005MpMax\030\025 \001(\005\022\016\n\006Equips\030\026 \003(\005\022"
  ")\n\006Skills\030\027 \003(\0132\031.symphony.proto.SkillIt"
  "em\"8\n\014ObjectNewNty\022(\n\007NewList\030\001 \003(\0132\027.sy"
  "mphony.proto.NewItem\"%\n\017ObjectRemoveNty\022"
  "\022\n\nRemoveList\030\001 \003(\004\"\317\001\n\nBulletItem\022\022\n\nOb"
  "jectGuid\030\001 \001(\004\022\022\n\nTargetGuid\030\002 \001(\004\022\022\n\nCa"
  "sterGuid\030\003 \001(\004\022\020\n\010BulletID\030\004 \001(\005\022\t\n\001X\030\005 "
  "\001(\002\022\t\n\001Y\030\006 \001(\002\022\t\n\001Z\030\007 \001(\002\022\r\n\005Angle\030\010 \001(\002"
  "\022\r\n\005Speed\030\t \001(\002\022\020\n\010AccSpeed\030\n \001(\002\022\020\n\010Lif"
  "eTime\030\013 \001(\002\022\020\n\010LeftTime\030\014 \001(\002\"<\n\014BulletN"
  "ewNtf\022,\n\010ItemList\030\001 \003(\0132\032.symphony.proto"
  ".BulletItem\"!\n\014HeartBeatReq\022\021\n\tTimeStamp"
  "\030\001 \001(\r\"5\n\014HeartBeatAck\022\021\n\tTimeStamp\030\001 \001("
  "\r\022\022\n\nServerTime\030\002 \001(\r\"%\n\017ObjectDieNotify"
  "\022\022\n\nObjectGuid\030\001 \001(\004\"(\n\022Msg_RidingMountR"
  "eq\022\022\n\nObjectGuid\030\001 \001(\004\"%\n\022Msg_RidingMoun"
  "tAck\022\017\n\007RetCode\030\001 \001(\r\";\n\021Msg_RoleRebornR"
  "eq\022\022\n\nObjectGuid\030\001 \001(\004\022\022\n\nRebornType\030\002 \001"
  "(\005\"$\n\021Msg_RoleRebornAck\022\017\n\007RetCode\030\001 \001(\r"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_deps[1] = {
  &::descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto = {
    false, false, 2288, descriptor_table_protodef_symphony_2fproto_2fmsg_5fmove_2eproto,
    "symphony/proto/msg_move.proto",
    &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once, descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_deps, 1, 21,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2fmsg_5fmove_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto, file_level_enum_descriptors_symphony_2fproto_2fmsg_5fmove_2eproto,
    file_level_service_descriptors_symphony_2fproto_2fmsg_5fmove_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2fmsg_5fmove_2eproto(&descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class SkillCastReq::_Internal {
 public:
};

SkillCastReq::SkillCastReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SkillCastReq)
}
SkillCastReq::SkillCastReq(const SkillCastReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillCastReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetobjects_){from._impl_.targetobjects_}
    , /*decltype(_impl_._targetobjects_cached_byte_size_)*/{0}
    , decltype(_impl_.objectguid_){}
    , decltype(_impl_.skillid_){}
    , decltype(_impl_.hostx_){}
    , decltype(_impl_.hosty_){}
    , decltype(_impl_.hostz_){}
    , decltype(_impl_.hostft_){}
    , decltype(_impl_.targetx_){}
    , decltype(_impl_.targety_){}
    , decltype(_impl_.targetz_){}
    , decltype(_impl_.targetft_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetft_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.targetft_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SkillCastReq)
}

inline void SkillCastReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetobjects_){arena}
    , /*decltype(_impl_._targetobjects_cached_byte_size_)*/{0}
    , decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.skillid_){0}
    , decltype(_impl_.hostx_){0}
    , decltype(_impl_.hosty_){0}
    , decltype(_impl_.hostz_){0}
    , decltype(_impl_.hostft_){0}
    , decltype(_impl_.targetx_){0}
    , decltype(_impl_.targety_){0}
    , decltype(_impl_.targetz_){0}
    , decltype(_impl_.targetft_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillCastReq::~SkillCastReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SkillCastReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillCastReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targetobjects_.~RepeatedField();
}

void SkillCastReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillCastReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SkillCastReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targetobjects_.Clear();
  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.targetft_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.targetft_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillCastReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SkillID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float HostX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.hostx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.hosty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.hostz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostFt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.hostft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TargetX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.targetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TargetY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.targety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TargetZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.targetz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float TargetFt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.targetft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 TargetObjects = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_targetobjects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 88) {
          _internal_add_targetobjects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillCastReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SkillCastReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 SkillID = 2;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skillid(), target);
  }

  // float HostX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_hostx(), target);
  }

  // float HostY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_hosty(), target);
  }

  // float HostZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_hostz(), target);
  }

  // float HostFt = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hostft(), target);
  }

  // float TargetX = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetx = this->_internal_targetx();
  uint32_t raw_targetx;
  memcpy(&raw_targetx, &tmp_targetx, sizeof(tmp_targetx));
  if (raw_targetx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_targetx(), target);
  }

  // float TargetY = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targety = this->_internal_targety();
  uint32_t raw_targety;
  memcpy(&raw_targety, &tmp_targety, sizeof(tmp_targety));
  if (raw_targety != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_targety(), target);
  }

  // float TargetZ = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetz = this->_internal_targetz();
  uint32_t raw_targetz;
  memcpy(&raw_targetz, &tmp_targetz, sizeof(tmp_targetz));
  if (raw_targetz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_targetz(), target);
  }

  // float TargetFt = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetft = this->_internal_targetft();
  uint32_t raw_targetft;
  memcpy(&raw_targetft, &tmp_targetft, sizeof(tmp_targetft));
  if (raw_targetft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_targetft(), target);
  }

  // repeated uint64 TargetObjects = 11;
  {
    int byte_size = _impl_._targetobjects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_targetobjects(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SkillCastReq)
  return target;
}

size_t SkillCastReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SkillCastReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 TargetObjects = 11;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.targetobjects_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._targetobjects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 SkillID = 2;
  if (this->_internal_skillid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // float HostX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    total_size += 1 + 4;
  }

  // float HostY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    total_size += 1 + 4;
  }

  // float HostZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    total_size += 1 + 4;
  }

  // float HostFt = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    total_size += 1 + 4;
  }

  // float TargetX = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetx = this->_internal_targetx();
  uint32_t raw_targetx;
  memcpy(&raw_targetx, &tmp_targetx, sizeof(tmp_targetx));
  if (raw_targetx != 0) {
    total_size += 1 + 4;
  }

  // float TargetY = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targety = this->_internal_targety();
  uint32_t raw_targety;
  memcpy(&raw_targety, &tmp_targety, sizeof(tmp_targety));
  if (raw_targety != 0) {
    total_size += 1 + 4;
  }

  // float TargetZ = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetz = this->_internal_targetz();
  uint32_t raw_targetz;
  memcpy(&raw_targetz, &tmp_targetz, sizeof(tmp_targetz));
  if (raw_targetz != 0) {
    total_size += 1 + 4;
  }

  // float TargetFt = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetft = this->_internal_targetft();
  uint32_t raw_targetft;
  memcpy(&raw_targetft, &tmp_targetft, sizeof(tmp_targetft));
  if (raw_targetft != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillCastReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillCastReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillCastReq::GetClassData() const { return &_class_data_; }


void SkillCastReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillCastReq*>(&to_msg);
  auto& from = static_cast<const SkillCastReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SkillCastReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targetobjects_.MergeFrom(from._impl_.targetobjects_);
  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_skillid() != 0) {
    _this->_internal_set_skillid(from._internal_skillid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = from._internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    _this->_internal_set_hostx(from._internal_hostx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = from._internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    _this->_internal_set_hosty(from._internal_hosty());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = from._internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    _this->_internal_set_hostz(from._internal_hostz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = from._internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    _this->_internal_set_hostft(from._internal_hostft());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetx = from._internal_targetx();
  uint32_t raw_targetx;
  memcpy(&raw_targetx, &tmp_targetx, sizeof(tmp_targetx));
  if (raw_targetx != 0) {
    _this->_internal_set_targetx(from._internal_targetx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targety = from._internal_targety();
  uint32_t raw_targety;
  memcpy(&raw_targety, &tmp_targety, sizeof(tmp_targety));
  if (raw_targety != 0) {
    _this->_internal_set_targety(from._internal_targety());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetz = from._internal_targetz();
  uint32_t raw_targetz;
  memcpy(&raw_targetz, &tmp_targetz, sizeof(tmp_targetz));
  if (raw_targetz != 0) {
    _this->_internal_set_targetz(from._internal_targetz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_targetft = from._internal_targetft();
  uint32_t raw_targetft;
  memcpy(&raw_targetft, &tmp_targetft, sizeof(tmp_targetft));
  if (raw_targetft != 0) {
    _this->_internal_set_targetft(from._internal_targetft());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillCastReq::CopyFrom(const SkillCastReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SkillCastReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCastReq::IsInitialized() const {
  return true;
}

void SkillCastReq::InternalSwap(SkillCastReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targetobjects_.InternalSwap(&other->_impl_.targetobjects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillCastReq, _impl_.targetft_)
      + sizeof(SkillCastReq::_impl_.targetft_)
      - PROTOBUF_FIELD_OFFSET(SkillCastReq, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillCastReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[0]);
}

// ===================================================================

class SkillCastAck::_Internal {
 public:
};

SkillCastAck::SkillCastAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SkillCastAck)
}
SkillCastAck::SkillCastAck(const SkillCastAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillCastAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SkillCastAck)
}

inline void SkillCastAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillCastAck::~SkillCastAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SkillCastAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillCastAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SkillCastAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillCastAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SkillCastAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retcode_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillCastAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ObjectGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillCastAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SkillCastAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 ObjectGuid = 2;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_objectguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SkillCastAck)
  return target;
}

size_t SkillCastAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SkillCastAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 2;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillCastAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillCastAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillCastAck::GetClassData() const { return &_class_data_; }


void SkillCastAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillCastAck*>(&to_msg);
  auto& from = static_cast<const SkillCastAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SkillCastAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillCastAck::CopyFrom(const SkillCastAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SkillCastAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCastAck::IsInitialized() const {
  return true;
}

void SkillCastAck::InternalSwap(SkillCastAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillCastAck, _impl_.retcode_)
      + sizeof(SkillCastAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(SkillCastAck, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillCastAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[1]);
}

// ===================================================================

class SkillResultItem::_Internal {
 public:
};

SkillResultItem::SkillResultItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SkillResultItem)
}
SkillResultItem::SkillResultItem(const SkillResultItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillResultItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , decltype(_impl_.skillid_){}
    , decltype(_impl_.actionid_){}
    , decltype(_impl_.orgx_){}
    , decltype(_impl_.orgy_){}
    , decltype(_impl_.orgz_){}
    , decltype(_impl_.orgft_){}
    , decltype(_impl_.hpchange_){}
    , decltype(_impl_.bcrit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bcrit_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.bcrit_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SkillResultItem)
}

inline void SkillResultItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.skillid_){0}
    , decltype(_impl_.actionid_){0}
    , decltype(_impl_.orgx_){0}
    , decltype(_impl_.orgy_){0}
    , decltype(_impl_.orgz_){0}
    , decltype(_impl_.orgft_){0}
    , decltype(_impl_.hpchange_){0}
    , decltype(_impl_.bcrit_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillResultItem::~SkillResultItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.SkillResultItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillResultItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SkillResultItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillResultItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SkillResultItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bcrit_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.bcrit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillResultItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SkillID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActionID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float OrgX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.orgx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float OrgY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.orgy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float OrgZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.orgz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float OrgFt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.orgft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 HpChange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.hpchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bCrit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.bcrit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillResultItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SkillResultItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 SkillID = 2;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skillid(), target);
  }

  // int32 ActionID = 3;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_actionid(), target);
  }

  // float OrgX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgx = this->_internal_orgx();
  uint32_t raw_orgx;
  memcpy(&raw_orgx, &tmp_orgx, sizeof(tmp_orgx));
  if (raw_orgx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_orgx(), target);
  }

  // float OrgY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgy = this->_internal_orgy();
  uint32_t raw_orgy;
  memcpy(&raw_orgy, &tmp_orgy, sizeof(tmp_orgy));
  if (raw_orgy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_orgy(), target);
  }

  // float OrgZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgz = this->_internal_orgz();
  uint32_t raw_orgz;
  memcpy(&raw_orgz, &tmp_orgz, sizeof(tmp_orgz));
  if (raw_orgz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_orgz(), target);
  }

  // float OrgFt = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgft = this->_internal_orgft();
  uint32_t raw_orgft;
  memcpy(&raw_orgft, &tmp_orgft, sizeof(tmp_orgft));
  if (raw_orgft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_orgft(), target);
  }

  // int32 HpChange = 8;
  if (this->_internal_hpchange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_hpchange(), target);
  }

  // bool bCrit = 9;
  if (this->_internal_bcrit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_bcrit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SkillResultItem)
  return target;
}

size_t SkillResultItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SkillResultItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 SkillID = 2;
  if (this->_internal_skillid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skillid());
  }

  // int32 ActionID = 3;
  if (this->_internal_actionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  // float OrgX = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgx = this->_internal_orgx();
  uint32_t raw_orgx;
  memcpy(&raw_orgx, &tmp_orgx, sizeof(tmp_orgx));
  if (raw_orgx != 0) {
    total_size += 1 + 4;
  }

  // float OrgY = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgy = this->_internal_orgy();
  uint32_t raw_orgy;
  memcpy(&raw_orgy, &tmp_orgy, sizeof(tmp_orgy));
  if (raw_orgy != 0) {
    total_size += 1 + 4;
  }

  // float OrgZ = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgz = this->_internal_orgz();
  uint32_t raw_orgz;
  memcpy(&raw_orgz, &tmp_orgz, sizeof(tmp_orgz));
  if (raw_orgz != 0) {
    total_size += 1 + 4;
  }

  // float OrgFt = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgft = this->_internal_orgft();
  uint32_t raw_orgft;
  memcpy(&raw_orgft, &tmp_orgft, sizeof(tmp_orgft));
  if (raw_orgft != 0) {
    total_size += 1 + 4;
  }

  // int32 HpChange = 8;
  if (this->_internal_hpchange() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hpchange());
  }

  // bool bCrit = 9;
  if (this->_internal_bcrit() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillResultItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillResultItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillResultItem::GetClassData() const { return &_class_data_; }


void SkillResultItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillResultItem*>(&to_msg);
  auto& from = static_cast<const SkillResultItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SkillResultItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_skillid() != 0) {
    _this->_internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_actionid() != 0) {
    _this->_internal_set_actionid(from._internal_actionid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgx = from._internal_orgx();
  uint32_t raw_orgx;
  memcpy(&raw_orgx, &tmp_orgx, sizeof(tmp_orgx));
  if (raw_orgx != 0) {
    _this->_internal_set_orgx(from._internal_orgx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgy = from._internal_orgy();
  uint32_t raw_orgy;
  memcpy(&raw_orgy, &tmp_orgy, sizeof(tmp_orgy));
  if (raw_orgy != 0) {
    _this->_internal_set_orgy(from._internal_orgy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgz = from._internal_orgz();
  uint32_t raw_orgz;
  memcpy(&raw_orgz, &tmp_orgz, sizeof(tmp_orgz));
  if (raw_orgz != 0) {
    _this->_internal_set_orgz(from._internal_orgz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_orgft = from._internal_orgft();
  uint32_t raw_orgft;
  memcpy(&raw_orgft, &tmp_orgft, sizeof(tmp_orgft));
  if (raw_orgft != 0) {
    _this->_internal_set_orgft(from._internal_orgft());
  }
  if (from._internal_hpchange() != 0) {
    _this->_internal_set_hpchange(from._internal_hpchange());
  }
  if (from._internal_bcrit() != 0) {
    _this->_internal_set_bcrit(from._internal_bcrit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillResultItem::CopyFrom(const SkillResultItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SkillResultItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillResultItem::IsInitialized() const {
  return true;
}

void SkillResultItem::InternalSwap(SkillResultItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillResultItem, _impl_.bcrit_)
      + sizeof(SkillResultItem::_impl_.bcrit_)
      - PROTOBUF_FIELD_OFFSET(SkillResultItem, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillResultItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[2]);
}

// ===================================================================

class SkillResultNtf::_Internal {
 public:
};

SkillResultNtf::SkillResultNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SkillResultNtf)
}
SkillResultNtf::SkillResultNtf(const SkillResultNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillResultNtf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){from._impl_.itemlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SkillResultNtf)
}

inline void SkillResultNtf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillResultNtf::~SkillResultNtf() {
  // @@protoc_insertion_point(destructor:symphony.proto.SkillResultNtf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillResultNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemlist_.~RepeatedPtrField();
}

void SkillResultNtf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillResultNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SkillResultNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillResultNtf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.SkillResultItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillResultNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SkillResultNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.SkillResultItem ItemList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SkillResultNtf)
  return target;
}

size_t SkillResultNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SkillResultNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.SkillResultItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->_impl_.itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillResultNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillResultNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillResultNtf::GetClassData() const { return &_class_data_; }


void SkillResultNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillResultNtf*>(&to_msg);
  auto& from = static_cast<const SkillResultNtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SkillResultNtf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemlist_.MergeFrom(from._impl_.itemlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillResultNtf::CopyFrom(const SkillResultNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SkillResultNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillResultNtf::IsInitialized() const {
  return true;
}

void SkillResultNtf::InternalSwap(SkillResultNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemlist_.InternalSwap(&other->_impl_.itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillResultNtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[3]);
}

// ===================================================================

class ObjectActionReq::_Internal {
 public:
};

ObjectActionReq::ObjectActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectActionReq)
}
ObjectActionReq::ObjectActionReq(const ObjectActionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectActionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){from._impl_.actionlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectActionReq)
}

inline void ObjectActionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectActionReq::~ObjectActionReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectActionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectActionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actionlist_.~RepeatedPtrField();
}

void ObjectActionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectActionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actionlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectActionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.ActionReqItem ActionList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectActionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectActionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionReqItem ActionList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actionlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_actionlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectActionReq)
  return target;
}

size_t ObjectActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectActionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionReqItem ActionList = 1;
  total_size += 1UL * this->_internal_actionlist_size();
  for (const auto& msg : this->_impl_.actionlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectActionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectActionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectActionReq::GetClassData() const { return &_class_data_; }


void ObjectActionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectActionReq*>(&to_msg);
  auto& from = static_cast<const ObjectActionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectActionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actionlist_.MergeFrom(from._impl_.actionlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectActionReq::CopyFrom(const ObjectActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectActionReq::IsInitialized() const {
  return true;
}

void ObjectActionReq::InternalSwap(ObjectActionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actionlist_.InternalSwap(&other->_impl_.actionlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectActionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[4]);
}

// ===================================================================

class ObjectActionNty::_Internal {
 public:
};

ObjectActionNty::ObjectActionNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectActionNty)
}
ObjectActionNty::ObjectActionNty(const ObjectActionNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectActionNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){from._impl_.actionlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectActionNty)
}

inline void ObjectActionNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectActionNty::~ObjectActionNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectActionNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectActionNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actionlist_.~RepeatedPtrField();
}

void ObjectActionNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectActionNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectActionNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actionlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectActionNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.ActionNtyItem ActionList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectActionNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectActionNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionNtyItem ActionList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actionlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_actionlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectActionNty)
  return target;
}

size_t ObjectActionNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectActionNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionNtyItem ActionList = 1;
  total_size += 1UL * this->_internal_actionlist_size();
  for (const auto& msg : this->_impl_.actionlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectActionNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectActionNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectActionNty::GetClassData() const { return &_class_data_; }


void ObjectActionNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectActionNty*>(&to_msg);
  auto& from = static_cast<const ObjectActionNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectActionNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actionlist_.MergeFrom(from._impl_.actionlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectActionNty::CopyFrom(const ObjectActionNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectActionNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectActionNty::IsInitialized() const {
  return true;
}

void ObjectActionNty::InternalSwap(ObjectActionNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actionlist_.InternalSwap(&other->_impl_.actionlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectActionNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[5]);
}

// ===================================================================

class ActionReqItem::_Internal {
 public:
};

ActionReqItem::ActionReqItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ActionReqItem)
}
ActionReqItem::ActionReqItem(const ActionReqItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionReqItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , decltype(_impl_.actionid_){}
    , decltype(_impl_.hostx_){}
    , decltype(_impl_.hosty_){}
    , decltype(_impl_.hostz_){}
    , decltype(_impl_.hostft_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hostft_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.hostft_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ActionReqItem)
}

inline void ActionReqItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.actionid_){0}
    , decltype(_impl_.hostx_){0}
    , decltype(_impl_.hosty_){0}
    , decltype(_impl_.hostz_){0}
    , decltype(_impl_.hostft_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActionReqItem::~ActionReqItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.ActionReqItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionReqItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActionReqItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionReqItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ActionReqItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hostft_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.hostft_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionReqItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float HostX = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.hostx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostY = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.hosty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostZ = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.hostz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostFt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.hostft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionReqItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ActionReqItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionid(), target);
  }

  // float HostX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_hostx(), target);
  }

  // float HostY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_hosty(), target);
  }

  // float HostZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_hostz(), target);
  }

  // float HostFt = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hostft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ActionReqItem)
  return target;
}

size_t ActionReqItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ActionReqItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  // float HostX = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    total_size += 1 + 4;
  }

  // float HostY = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    total_size += 1 + 4;
  }

  // float HostZ = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    total_size += 1 + 4;
  }

  // float HostFt = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionReqItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionReqItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionReqItem::GetClassData() const { return &_class_data_; }


void ActionReqItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionReqItem*>(&to_msg);
  auto& from = static_cast<const ActionReqItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ActionReqItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_actionid() != 0) {
    _this->_internal_set_actionid(from._internal_actionid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = from._internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    _this->_internal_set_hostx(from._internal_hostx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = from._internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    _this->_internal_set_hosty(from._internal_hosty());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = from._internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    _this->_internal_set_hostz(from._internal_hostz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = from._internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    _this->_internal_set_hostft(from._internal_hostft());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionReqItem::CopyFrom(const ActionReqItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ActionReqItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionReqItem::IsInitialized() const {
  return true;
}

void ActionReqItem::InternalSwap(ActionReqItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionReqItem, _impl_.hostft_)
      + sizeof(ActionReqItem::_impl_.hostft_)
      - PROTOBUF_FIELD_OFFSET(ActionReqItem, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionReqItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[6]);
}

// ===================================================================

class ObjectActionAck::_Internal {
 public:
};

ObjectActionAck::ObjectActionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectActionAck)
}
ObjectActionAck::ObjectActionAck(const ObjectActionAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectActionAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){from._impl_.actionlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectActionAck)
}

inline void ObjectActionAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.actionlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectActionAck::~ObjectActionAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectActionAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectActionAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.actionlist_.~RepeatedPtrField();
}

void ObjectActionAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectActionAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectActionAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.actionlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectActionAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.ActionReqItem ActionList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actionlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectActionAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectActionAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionReqItem ActionList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actionlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_actionlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectActionAck)
  return target;
}

size_t ObjectActionAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectActionAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.ActionReqItem ActionList = 1;
  total_size += 1UL * this->_internal_actionlist_size();
  for (const auto& msg : this->_impl_.actionlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectActionAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectActionAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectActionAck::GetClassData() const { return &_class_data_; }


void ObjectActionAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectActionAck*>(&to_msg);
  auto& from = static_cast<const ObjectActionAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectActionAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.actionlist_.MergeFrom(from._impl_.actionlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectActionAck::CopyFrom(const ObjectActionAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectActionAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectActionAck::IsInitialized() const {
  return true;
}

void ObjectActionAck::InternalSwap(ObjectActionAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.actionlist_.InternalSwap(&other->_impl_.actionlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectActionAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[7]);
}

// ===================================================================

class ActionNtyItem::_Internal {
 public:
};

ActionNtyItem::ActionNtyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ActionNtyItem)
}
ActionNtyItem::ActionNtyItem(const ActionNtyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionNtyItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.objectguid_){}
    , decltype(_impl_.actionid_){}
    , decltype(_impl_.camp_){}
    , decltype(_impl_.objectstatus_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.hostx_){}
    , decltype(_impl_.hosty_){}
    , decltype(_impl_.hostz_){}
    , decltype(_impl_.hostft_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.mountid_){}
    , decltype(_impl_.controlerid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.hpmax_){}
    , decltype(_impl_.mpmax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mpmax_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.mpmax_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ActionNtyItem)
}

inline void ActionNtyItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.actionid_){0}
    , decltype(_impl_.camp_){0}
    , decltype(_impl_.objectstatus_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.hostx_){0}
    , decltype(_impl_.hosty_){0}
    , decltype(_impl_.hostz_){0}
    , decltype(_impl_.hostft_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.mountid_){0}
    , decltype(_impl_.controlerid_){uint64_t{0u}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.hpmax_){0}
    , decltype(_impl_.mpmax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ActionNtyItem::~ActionNtyItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.ActionNtyItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionNtyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedField();
}

void ActionNtyItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionNtyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ActionNtyItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mpmax_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.mpmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionNtyItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Camp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ObjectStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objectstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float HostX = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.hostx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostY = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.hosty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostZ = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.hostz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float HostFt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.hostft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MountID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ControlerID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.controlerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Hp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Mp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HpMax = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MpMax = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.mpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Equips = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 144) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActionNtyItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ActionNtyItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionid(), target);
  }

  // int32 Camp = 3;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_camp(), target);
  }

  // int32 ObjectStatus = 4;
  if (this->_internal_objectstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objectstatus(), target);
  }

  // int32 Speed = 5;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_speed(), target);
  }

  // float HostX = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_hostx(), target);
  }

  // float HostY = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_hosty(), target);
  }

  // float HostZ = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_hostz(), target);
  }

  // float HostFt = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_hostft(), target);
  }

  // int32 ActorID = 10;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_actorid(), target);
  }

  // int32 MountID = 11;
  if (this->_internal_mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_mountid(), target);
  }

  // int32 Level = 12;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_level(), target);
  }

  // uint64 ControlerID = 13;
  if (this->_internal_controlerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_controlerid(), target);
  }

  // int32 Hp = 14;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_hp(), target);
  }

  // int32 Mp = 15;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_mp(), target);
  }

  // int32 HpMax = 16;
  if (this->_internal_hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_hpmax(), target);
  }

  // int32 MpMax = 17;
  if (this->_internal_mpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_mpmax(), target);
  }

  // repeated int32 Equips = 18;
  {
    int byte_size = _impl_._equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          18, _internal_equips(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ActionNtyItem)
  return target;
}

size_t ActionNtyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ActionNtyItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equips_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  // int32 Camp = 3;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp());
  }

  // int32 ObjectStatus = 4;
  if (this->_internal_objectstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectstatus());
  }

  // int32 Speed = 5;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  // float HostX = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = this->_internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    total_size += 1 + 4;
  }

  // float HostY = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = this->_internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    total_size += 1 + 4;
  }

  // float HostZ = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = this->_internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    total_size += 1 + 4;
  }

  // float HostFt = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = this->_internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    total_size += 1 + 4;
  }

  // int32 ActorID = 10;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 MountID = 11;
  if (this->_internal_mountid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mountid());
  }

  // uint64 ControlerID = 13;
  if (this->_internal_controlerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_controlerid());
  }

  // int32 Level = 12;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 Hp = 14;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 Mp = 15;
  if (this->_internal_mp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mp());
  }

  // int32 HpMax = 16;
  if (this->_internal_hpmax() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hpmax());
  }

  // int32 MpMax = 17;
  if (this->_internal_mpmax() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mpmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionNtyItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionNtyItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionNtyItem::GetClassData() const { return &_class_data_; }


void ActionNtyItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionNtyItem*>(&to_msg);
  auto& from = static_cast<const ActionNtyItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ActionNtyItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_actionid() != 0) {
    _this->_internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  if (from._internal_objectstatus() != 0) {
    _this->_internal_set_objectstatus(from._internal_objectstatus());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostx = from._internal_hostx();
  uint32_t raw_hostx;
  memcpy(&raw_hostx, &tmp_hostx, sizeof(tmp_hostx));
  if (raw_hostx != 0) {
    _this->_internal_set_hostx(from._internal_hostx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hosty = from._internal_hosty();
  uint32_t raw_hosty;
  memcpy(&raw_hosty, &tmp_hosty, sizeof(tmp_hosty));
  if (raw_hosty != 0) {
    _this->_internal_set_hosty(from._internal_hosty());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostz = from._internal_hostz();
  uint32_t raw_hostz;
  memcpy(&raw_hostz, &tmp_hostz, sizeof(tmp_hostz));
  if (raw_hostz != 0) {
    _this->_internal_set_hostz(from._internal_hostz());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hostft = from._internal_hostft();
  uint32_t raw_hostft;
  memcpy(&raw_hostft, &tmp_hostft, sizeof(tmp_hostft));
  if (raw_hostft != 0) {
    _this->_internal_set_hostft(from._internal_hostft());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_mountid() != 0) {
    _this->_internal_set_mountid(from._internal_mountid());
  }
  if (from._internal_controlerid() != 0) {
    _this->_internal_set_controlerid(from._internal_controlerid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_mp() != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  if (from._internal_hpmax() != 0) {
    _this->_internal_set_hpmax(from._internal_hpmax());
  }
  if (from._internal_mpmax() != 0) {
    _this->_internal_set_mpmax(from._internal_mpmax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionNtyItem::CopyFrom(const ActionNtyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ActionNtyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionNtyItem::IsInitialized() const {
  return true;
}

void ActionNtyItem::InternalSwap(ActionNtyItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActionNtyItem, _impl_.mpmax_)
      + sizeof(ActionNtyItem::_impl_.mpmax_)
      - PROTOBUF_FIELD_OFFSET(ActionNtyItem, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionNtyItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[8]);
}

// ===================================================================

class NewItem::_Internal {
 public:
};

void NewItem::clear_skills() {
  _impl_.skills_.Clear();
}
NewItem::NewItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.NewItem)
}
NewItem::NewItem(const NewItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objectguid_){}
    , decltype(_impl_.actionid_){}
    , decltype(_impl_.objtype_){}
    , decltype(_impl_.objectstatus_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.mountid_){}
    , decltype(_impl_.camp_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.hostguid_){}
    , decltype(_impl_.controlerid_){}
    , decltype(_impl_.summonid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.ft_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.hpmax_){}
    , decltype(_impl_.mpmax_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mpmax_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.mpmax_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.NewItem)
}

inline void NewItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.actionid_){0}
    , decltype(_impl_.objtype_){0}
    , decltype(_impl_.objectstatus_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.mountid_){0}
    , decltype(_impl_.camp_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.hostguid_){uint64_t{0u}}
    , decltype(_impl_.controlerid_){uint64_t{0u}}
    , decltype(_impl_.summonid_){uint64_t{0u}}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.ft_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.hpmax_){0}
    , decltype(_impl_.mpmax_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewItem::~NewItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.NewItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void NewItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.NewItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.skills_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mpmax_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.mpmax_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ObjType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.objtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ObjectStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.objectstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MountID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Camp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.NewItem.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 HostGuid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.hostguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ControlerID = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.controlerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SummonID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.summonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float X = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Ft = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.ft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Hp = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Mp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HpMax = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MpMax = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.mpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Equips = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 176) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.SkillItem Skills = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.NewItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actionid(), target);
  }

  // int32 ObjType = 3;
  if (this->_internal_objtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_objtype(), target);
  }

  // int32 ObjectStatus = 4;
  if (this->_internal_objectstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_objectstatus(), target);
  }

  // int32 ActorID = 5;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_actorid(), target);
  }

  // int32 MountID = 6;
  if (this->_internal_mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mountid(), target);
  }

  // int32 Camp = 7;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_camp(), target);
  }

  // string Name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.NewItem.Name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // int32 Level = 9;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_level(), target);
  }

  // int32 Speed = 10;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_speed(), target);
  }

  // uint64 HostGuid = 11;
  if (this->_internal_hostguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_hostguid(), target);
  }

  // uint64 ControlerID = 12;
  if (this->_internal_controlerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(12, this->_internal_controlerid(), target);
  }

  // uint64 SummonID = 13;
  if (this->_internal_summonid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_summonid(), target);
  }

  // float X = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_x(), target);
  }

  // float Y = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_y(), target);
  }

  // float Z = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_z(), target);
  }

  // float Ft = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = this->_internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_ft(), target);
  }

  // int32 Hp = 18;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_hp(), target);
  }

  // int32 Mp = 19;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_mp(), target);
  }

  // int32 HpMax = 20;
  if (this->_internal_hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_hpmax(), target);
  }

  // int32 MpMax = 21;
  if (this->_internal_mpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_mpmax(), target);
  }

  // repeated int32 Equips = 22;
  {
    int byte_size = _impl_._equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          22, _internal_equips(), byte_size, target);
    }
  }

  // repeated .symphony.proto.SkillItem Skills = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.NewItem)
  return target;
}

size_t NewItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.NewItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 22;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equips_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .symphony.proto.SkillItem Skills = 23;
  total_size += 2UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 ActionID = 2;
  if (this->_internal_actionid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actionid());
  }

  // int32 ObjType = 3;
  if (this->_internal_objtype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objtype());
  }

  // int32 ObjectStatus = 4;
  if (this->_internal_objectstatus() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_objectstatus());
  }

  // int32 ActorID = 5;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 MountID = 6;
  if (this->_internal_mountid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mountid());
  }

  // int32 Camp = 7;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp());
  }

  // int32 Level = 9;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 Speed = 10;
  if (this->_internal_speed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  // uint64 HostGuid = 11;
  if (this->_internal_hostguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hostguid());
  }

  // uint64 ControlerID = 12;
  if (this->_internal_controlerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_controlerid());
  }

  // uint64 SummonID = 13;
  if (this->_internal_summonid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_summonid());
  }

  // float X = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 2 + 4;
  }

  // float Ft = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = this->_internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    total_size += 2 + 4;
  }

  // int32 Hp = 18;
  if (this->_internal_hp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 Mp = 19;
  if (this->_internal_mp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 HpMax = 20;
  if (this->_internal_hpmax() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hpmax());
  }

  // int32 MpMax = 21;
  if (this->_internal_mpmax() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mpmax());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewItem::GetClassData() const { return &_class_data_; }


void NewItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewItem*>(&to_msg);
  auto& from = static_cast<const NewItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.NewItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_actionid() != 0) {
    _this->_internal_set_actionid(from._internal_actionid());
  }
  if (from._internal_objtype() != 0) {
    _this->_internal_set_objtype(from._internal_objtype());
  }
  if (from._internal_objectstatus() != 0) {
    _this->_internal_set_objectstatus(from._internal_objectstatus());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_mountid() != 0) {
    _this->_internal_set_mountid(from._internal_mountid());
  }
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_hostguid() != 0) {
    _this->_internal_set_hostguid(from._internal_hostguid());
  }
  if (from._internal_controlerid() != 0) {
    _this->_internal_set_controlerid(from._internal_controlerid());
  }
  if (from._internal_summonid() != 0) {
    _this->_internal_set_summonid(from._internal_summonid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = from._internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    _this->_internal_set_ft(from._internal_ft());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_mp() != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  if (from._internal_hpmax() != 0) {
    _this->_internal_set_hpmax(from._internal_hpmax());
  }
  if (from._internal_mpmax() != 0) {
    _this->_internal_set_mpmax(from._internal_mpmax());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewItem::CopyFrom(const NewItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.NewItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewItem::IsInitialized() const {
  return true;
}

void NewItem::InternalSwap(NewItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewItem, _impl_.mpmax_)
      + sizeof(NewItem::_impl_.mpmax_)
      - PROTOBUF_FIELD_OFFSET(NewItem, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[9]);
}

// ===================================================================

class ObjectNewNty::_Internal {
 public:
};

ObjectNewNty::ObjectNewNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectNewNty)
}
ObjectNewNty::ObjectNewNty(const ObjectNewNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectNewNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newlist_){from._impl_.newlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectNewNty)
}

inline void ObjectNewNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectNewNty::~ObjectNewNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectNewNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectNewNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newlist_.~RepeatedPtrField();
}

void ObjectNewNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectNewNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectNewNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectNewNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.NewItem NewList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_newlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectNewNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectNewNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.NewItem NewList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_newlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_newlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectNewNty)
  return target;
}

size_t ObjectNewNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectNewNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.NewItem NewList = 1;
  total_size += 1UL * this->_internal_newlist_size();
  for (const auto& msg : this->_impl_.newlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectNewNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectNewNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectNewNty::GetClassData() const { return &_class_data_; }


void ObjectNewNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectNewNty*>(&to_msg);
  auto& from = static_cast<const ObjectNewNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectNewNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.newlist_.MergeFrom(from._impl_.newlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectNewNty::CopyFrom(const ObjectNewNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectNewNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectNewNty::IsInitialized() const {
  return true;
}

void ObjectNewNty::InternalSwap(ObjectNewNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.newlist_.InternalSwap(&other->_impl_.newlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectNewNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[10]);
}

// ===================================================================

class ObjectRemoveNty::_Internal {
 public:
};

ObjectRemoveNty::ObjectRemoveNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectRemoveNty)
}
ObjectRemoveNty::ObjectRemoveNty(const ObjectRemoveNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectRemoveNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.removelist_){from._impl_.removelist_}
    , /*decltype(_impl_._removelist_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectRemoveNty)
}

inline void ObjectRemoveNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.removelist_){arena}
    , /*decltype(_impl_._removelist_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectRemoveNty::~ObjectRemoveNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectRemoveNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectRemoveNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.removelist_.~RepeatedField();
}

void ObjectRemoveNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectRemoveNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectRemoveNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removelist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRemoveNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 RemoveList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_removelist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_removelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectRemoveNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectRemoveNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 RemoveList = 1;
  {
    int byte_size = _impl_._removelist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_removelist(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectRemoveNty)
  return target;
}

size_t ObjectRemoveNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectRemoveNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 RemoveList = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.removelist_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._removelist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectRemoveNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectRemoveNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectRemoveNty::GetClassData() const { return &_class_data_; }


void ObjectRemoveNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectRemoveNty*>(&to_msg);
  auto& from = static_cast<const ObjectRemoveNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectRemoveNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.removelist_.MergeFrom(from._impl_.removelist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectRemoveNty::CopyFrom(const ObjectRemoveNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectRemoveNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRemoveNty::IsInitialized() const {
  return true;
}

void ObjectRemoveNty::InternalSwap(ObjectRemoveNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.removelist_.InternalSwap(&other->_impl_.removelist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRemoveNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[11]);
}

// ===================================================================

class BulletItem::_Internal {
 public:
};

BulletItem::BulletItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.BulletItem)
}
BulletItem::BulletItem(const BulletItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulletItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , decltype(_impl_.targetguid_){}
    , decltype(_impl_.casterguid_){}
    , decltype(_impl_.bulletid_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.angle_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.accspeed_){}
    , decltype(_impl_.lifetime_){}
    , decltype(_impl_.lefttime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lefttime_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.lefttime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.BulletItem)
}

inline void BulletItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.targetguid_){uint64_t{0u}}
    , decltype(_impl_.casterguid_){uint64_t{0u}}
    , decltype(_impl_.bulletid_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.angle_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.accspeed_){0}
    , decltype(_impl_.lifetime_){0}
    , decltype(_impl_.lefttime_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulletItem::~BulletItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.BulletItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulletItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BulletItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulletItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.BulletItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lefttime_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.lefttime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulletItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TargetGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 CasterGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.casterguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BulletID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bulletid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float X = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float AccSpeed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.accspeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float LifeTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float LeftTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.lefttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulletItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.BulletItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // uint64 TargetGuid = 2;
  if (this->_internal_targetguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetguid(), target);
  }

  // uint64 CasterGuid = 3;
  if (this->_internal_casterguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_casterguid(), target);
  }

  // int32 BulletID = 4;
  if (this->_internal_bulletid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bulletid(), target);
  }

  // float X = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_x(), target);
  }

  // float Y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_y(), target);
  }

  // float Z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_z(), target);
  }

  // float Angle = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_angle(), target);
  }

  // float Speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_speed(), target);
  }

  // float AccSpeed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accspeed = this->_internal_accspeed();
  uint32_t raw_accspeed;
  memcpy(&raw_accspeed, &tmp_accspeed, sizeof(tmp_accspeed));
  if (raw_accspeed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_accspeed(), target);
  }

  // float LifeTime = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lifetime = this->_internal_lifetime();
  uint32_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_lifetime(), target);
  }

  // float LeftTime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lefttime = this->_internal_lefttime();
  uint32_t raw_lefttime;
  memcpy(&raw_lefttime, &tmp_lefttime, sizeof(tmp_lefttime));
  if (raw_lefttime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_lefttime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.BulletItem)
  return target;
}

size_t BulletItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.BulletItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // uint64 TargetGuid = 2;
  if (this->_internal_targetguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetguid());
  }

  // uint64 CasterGuid = 3;
  if (this->_internal_casterguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_casterguid());
  }

  // int32 BulletID = 4;
  if (this->_internal_bulletid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bulletid());
  }

  // float X = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float Angle = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = this->_internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    total_size += 1 + 4;
  }

  // float Speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  // float AccSpeed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accspeed = this->_internal_accspeed();
  uint32_t raw_accspeed;
  memcpy(&raw_accspeed, &tmp_accspeed, sizeof(tmp_accspeed));
  if (raw_accspeed != 0) {
    total_size += 1 + 4;
  }

  // float LifeTime = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lifetime = this->_internal_lifetime();
  uint32_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    total_size += 1 + 4;
  }

  // float LeftTime = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lefttime = this->_internal_lefttime();
  uint32_t raw_lefttime;
  memcpy(&raw_lefttime, &tmp_lefttime, sizeof(tmp_lefttime));
  if (raw_lefttime != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulletItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulletItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulletItem::GetClassData() const { return &_class_data_; }


void BulletItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulletItem*>(&to_msg);
  auto& from = static_cast<const BulletItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.BulletItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_targetguid() != 0) {
    _this->_internal_set_targetguid(from._internal_targetguid());
  }
  if (from._internal_casterguid() != 0) {
    _this->_internal_set_casterguid(from._internal_casterguid());
  }
  if (from._internal_bulletid() != 0) {
    _this->_internal_set_bulletid(from._internal_bulletid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_angle = from._internal_angle();
  uint32_t raw_angle;
  memcpy(&raw_angle, &tmp_angle, sizeof(tmp_angle));
  if (raw_angle != 0) {
    _this->_internal_set_angle(from._internal_angle());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_accspeed = from._internal_accspeed();
  uint32_t raw_accspeed;
  memcpy(&raw_accspeed, &tmp_accspeed, sizeof(tmp_accspeed));
  if (raw_accspeed != 0) {
    _this->_internal_set_accspeed(from._internal_accspeed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lifetime = from._internal_lifetime();
  uint32_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    _this->_internal_set_lifetime(from._internal_lifetime());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lefttime = from._internal_lefttime();
  uint32_t raw_lefttime;
  memcpy(&raw_lefttime, &tmp_lefttime, sizeof(tmp_lefttime));
  if (raw_lefttime != 0) {
    _this->_internal_set_lefttime(from._internal_lefttime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulletItem::CopyFrom(const BulletItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.BulletItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletItem::IsInitialized() const {
  return true;
}

void BulletItem::InternalSwap(BulletItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BulletItem, _impl_.lefttime_)
      + sizeof(BulletItem::_impl_.lefttime_)
      - PROTOBUF_FIELD_OFFSET(BulletItem, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BulletItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[12]);
}

// ===================================================================

class BulletNewNtf::_Internal {
 public:
};

BulletNewNtf::BulletNewNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.BulletNewNtf)
}
BulletNewNtf::BulletNewNtf(const BulletNewNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BulletNewNtf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){from._impl_.itemlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.BulletNewNtf)
}

inline void BulletNewNtf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BulletNewNtf::~BulletNewNtf() {
  // @@protoc_insertion_point(destructor:symphony.proto.BulletNewNtf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BulletNewNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemlist_.~RepeatedPtrField();
}

void BulletNewNtf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BulletNewNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.BulletNewNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BulletNewNtf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.BulletItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BulletNewNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.BulletNewNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.BulletItem ItemList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.BulletNewNtf)
  return target;
}

size_t BulletNewNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.BulletNewNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.BulletItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->_impl_.itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BulletNewNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BulletNewNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BulletNewNtf::GetClassData() const { return &_class_data_; }


void BulletNewNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BulletNewNtf*>(&to_msg);
  auto& from = static_cast<const BulletNewNtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.BulletNewNtf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemlist_.MergeFrom(from._impl_.itemlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BulletNewNtf::CopyFrom(const BulletNewNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.BulletNewNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletNewNtf::IsInitialized() const {
  return true;
}

void BulletNewNtf::InternalSwap(BulletNewNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemlist_.InternalSwap(&other->_impl_.itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BulletNewNtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[13]);
}

// ===================================================================

class HeartBeatReq::_Internal {
 public:
};

HeartBeatReq::HeartBeatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.HeartBeatReq)
}
HeartBeatReq::HeartBeatReq(const HeartBeatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.HeartBeatReq)
}

inline void HeartBeatReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeatReq::~HeartBeatReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.HeartBeatReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.HeartBeatReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.HeartBeatReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.HeartBeatReq)
  return target;
}

size_t HeartBeatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.HeartBeatReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatReq::GetClassData() const { return &_class_data_; }


void HeartBeatReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatReq*>(&to_msg);
  auto& from = static_cast<const HeartBeatReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.HeartBeatReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatReq::CopyFrom(const HeartBeatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.HeartBeatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatReq::IsInitialized() const {
  return true;
}

void HeartBeatReq::InternalSwap(HeartBeatReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[14]);
}

// ===================================================================

class HeartBeatAck::_Internal {
 public:
};

HeartBeatAck::HeartBeatAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.HeartBeatAck)
}
HeartBeatAck::HeartBeatAck(const HeartBeatAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartBeatAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.servertime_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.servertime_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.servertime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.HeartBeatAck)
}

inline void HeartBeatAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.servertime_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartBeatAck::~HeartBeatAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.HeartBeatAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartBeatAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartBeatAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.HeartBeatAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.servertime_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.servertime_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 TimeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 ServerTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.servertime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartBeatAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.HeartBeatAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // uint32 ServerTime = 2;
  if (this->_internal_servertime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_servertime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.HeartBeatAck)
  return target;
}

size_t HeartBeatAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.HeartBeatAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 TimeStamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
  }

  // uint32 ServerTime = 2;
  if (this->_internal_servertime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_servertime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartBeatAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartBeatAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartBeatAck::GetClassData() const { return &_class_data_; }


void HeartBeatAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartBeatAck*>(&to_msg);
  auto& from = static_cast<const HeartBeatAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.HeartBeatAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_servertime() != 0) {
    _this->_internal_set_servertime(from._internal_servertime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartBeatAck::CopyFrom(const HeartBeatAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.HeartBeatAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatAck::IsInitialized() const {
  return true;
}

void HeartBeatAck::InternalSwap(HeartBeatAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeatAck, _impl_.servertime_)
      + sizeof(HeartBeatAck::_impl_.servertime_)
      - PROTOBUF_FIELD_OFFSET(HeartBeatAck, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[15]);
}

// ===================================================================

class ObjectDieNotify::_Internal {
 public:
};

ObjectDieNotify::ObjectDieNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectDieNotify)
}
ObjectDieNotify::ObjectDieNotify(const ObjectDieNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectDieNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objectguid_ = from._impl_.objectguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectDieNotify)
}

inline void ObjectDieNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ObjectDieNotify::~ObjectDieNotify() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectDieNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectDieNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObjectDieNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectDieNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectDieNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectDieNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectDieNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectDieNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectDieNotify)
  return target;
}

size_t ObjectDieNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectDieNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectDieNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectDieNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectDieNotify::GetClassData() const { return &_class_data_; }


void ObjectDieNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectDieNotify*>(&to_msg);
  auto& from = static_cast<const ObjectDieNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectDieNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectDieNotify::CopyFrom(const ObjectDieNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectDieNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectDieNotify::IsInitialized() const {
  return true;
}

void ObjectDieNotify::InternalSwap(ObjectDieNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.objectguid_, other->_impl_.objectguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectDieNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[16]);
}

// ===================================================================

class Msg_RidingMountReq::_Internal {
 public:
};

Msg_RidingMountReq::Msg_RidingMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_RidingMountReq)
}
Msg_RidingMountReq::Msg_RidingMountReq(const Msg_RidingMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_RidingMountReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.objectguid_ = from._impl_.objectguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_RidingMountReq)
}

inline void Msg_RidingMountReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_RidingMountReq::~Msg_RidingMountReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_RidingMountReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_RidingMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RidingMountReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_RidingMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_RidingMountReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.objectguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RidingMountReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RidingMountReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_RidingMountReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_RidingMountReq)
  return target;
}

size_t Msg_RidingMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_RidingMountReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RidingMountReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_RidingMountReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RidingMountReq::GetClassData() const { return &_class_data_; }


void Msg_RidingMountReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_RidingMountReq*>(&to_msg);
  auto& from = static_cast<const Msg_RidingMountReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_RidingMountReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RidingMountReq::CopyFrom(const Msg_RidingMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_RidingMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RidingMountReq::IsInitialized() const {
  return true;
}

void Msg_RidingMountReq::InternalSwap(Msg_RidingMountReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.objectguid_, other->_impl_.objectguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RidingMountReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[17]);
}

// ===================================================================

class Msg_RidingMountAck::_Internal {
 public:
};

Msg_RidingMountAck::Msg_RidingMountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_RidingMountAck)
}
Msg_RidingMountAck::Msg_RidingMountAck(const Msg_RidingMountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_RidingMountAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_RidingMountAck)
}

inline void Msg_RidingMountAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_RidingMountAck::~Msg_RidingMountAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_RidingMountAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_RidingMountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RidingMountAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_RidingMountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_RidingMountAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RidingMountAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RidingMountAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_RidingMountAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_RidingMountAck)
  return target;
}

size_t Msg_RidingMountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_RidingMountAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RidingMountAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_RidingMountAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RidingMountAck::GetClassData() const { return &_class_data_; }


void Msg_RidingMountAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_RidingMountAck*>(&to_msg);
  auto& from = static_cast<const Msg_RidingMountAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_RidingMountAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RidingMountAck::CopyFrom(const Msg_RidingMountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_RidingMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RidingMountAck::IsInitialized() const {
  return true;
}

void Msg_RidingMountAck::InternalSwap(Msg_RidingMountAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RidingMountAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[18]);
}

// ===================================================================

class Msg_RoleRebornReq::_Internal {
 public:
};

Msg_RoleRebornReq::Msg_RoleRebornReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_RoleRebornReq)
}
Msg_RoleRebornReq::Msg_RoleRebornReq(const Msg_RoleRebornReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_RoleRebornReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){}
    , decltype(_impl_.reborntype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.objectguid_, &from._impl_.objectguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reborntype_) -
    reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.reborntype_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_RoleRebornReq)
}

inline void Msg_RoleRebornReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.objectguid_){uint64_t{0u}}
    , decltype(_impl_.reborntype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_RoleRebornReq::~Msg_RoleRebornReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_RoleRebornReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_RoleRebornReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RoleRebornReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_RoleRebornReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_RoleRebornReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.objectguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reborntype_) -
      reinterpret_cast<char*>(&_impl_.objectguid_)) + sizeof(_impl_.reborntype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RoleRebornReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ObjectGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.objectguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 RebornType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reborntype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RoleRebornReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_RoleRebornReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_objectguid(), target);
  }

  // int32 RebornType = 2;
  if (this->_internal_reborntype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reborntype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_RoleRebornReq)
  return target;
}

size_t Msg_RoleRebornReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_RoleRebornReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 ObjectGuid = 1;
  if (this->_internal_objectguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_objectguid());
  }

  // int32 RebornType = 2;
  if (this->_internal_reborntype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reborntype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RoleRebornReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_RoleRebornReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RoleRebornReq::GetClassData() const { return &_class_data_; }


void Msg_RoleRebornReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_RoleRebornReq*>(&to_msg);
  auto& from = static_cast<const Msg_RoleRebornReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_RoleRebornReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_objectguid() != 0) {
    _this->_internal_set_objectguid(from._internal_objectguid());
  }
  if (from._internal_reborntype() != 0) {
    _this->_internal_set_reborntype(from._internal_reborntype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RoleRebornReq::CopyFrom(const Msg_RoleRebornReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_RoleRebornReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoleRebornReq::IsInitialized() const {
  return true;
}

void Msg_RoleRebornReq::InternalSwap(Msg_RoleRebornReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_RoleRebornReq, _impl_.reborntype_)
      + sizeof(Msg_RoleRebornReq::_impl_.reborntype_)
      - PROTOBUF_FIELD_OFFSET(Msg_RoleRebornReq, _impl_.objectguid_)>(
          reinterpret_cast<char*>(&_impl_.objectguid_),
          reinterpret_cast<char*>(&other->_impl_.objectguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RoleRebornReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[19]);
}

// ===================================================================

class Msg_RoleRebornAck::_Internal {
 public:
};

Msg_RoleRebornAck::Msg_RoleRebornAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_RoleRebornAck)
}
Msg_RoleRebornAck::Msg_RoleRebornAck(const Msg_RoleRebornAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_RoleRebornAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_RoleRebornAck)
}

inline void Msg_RoleRebornAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_RoleRebornAck::~Msg_RoleRebornAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_RoleRebornAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_RoleRebornAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RoleRebornAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_RoleRebornAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_RoleRebornAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RoleRebornAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_RoleRebornAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_RoleRebornAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_RoleRebornAck)
  return target;
}

size_t Msg_RoleRebornAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_RoleRebornAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RoleRebornAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_RoleRebornAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RoleRebornAck::GetClassData() const { return &_class_data_; }


void Msg_RoleRebornAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_RoleRebornAck*>(&to_msg);
  auto& from = static_cast<const Msg_RoleRebornAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_RoleRebornAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RoleRebornAck::CopyFrom(const Msg_RoleRebornAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_RoleRebornAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RoleRebornAck::IsInitialized() const {
  return true;
}

void Msg_RoleRebornAck::InternalSwap(Msg_RoleRebornAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RoleRebornAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fmove_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fmove_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::SkillCastReq*
Arena::CreateMaybeMessage< ::symphony::proto::SkillCastReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SkillCastReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SkillCastAck*
Arena::CreateMaybeMessage< ::symphony::proto::SkillCastAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SkillCastAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SkillResultItem*
Arena::CreateMaybeMessage< ::symphony::proto::SkillResultItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SkillResultItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SkillResultNtf*
Arena::CreateMaybeMessage< ::symphony::proto::SkillResultNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SkillResultNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectActionReq*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectActionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectActionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectActionNty*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectActionNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectActionNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ActionReqItem*
Arena::CreateMaybeMessage< ::symphony::proto::ActionReqItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ActionReqItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectActionAck*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectActionAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectActionAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ActionNtyItem*
Arena::CreateMaybeMessage< ::symphony::proto::ActionNtyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ActionNtyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::NewItem*
Arena::CreateMaybeMessage< ::symphony::proto::NewItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::NewItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectNewNty*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectNewNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectNewNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectRemoveNty*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectRemoveNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectRemoveNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::BulletItem*
Arena::CreateMaybeMessage< ::symphony::proto::BulletItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::BulletItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::BulletNewNtf*
Arena::CreateMaybeMessage< ::symphony::proto::BulletNewNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::BulletNewNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::HeartBeatReq*
Arena::CreateMaybeMessage< ::symphony::proto::HeartBeatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::HeartBeatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::HeartBeatAck*
Arena::CreateMaybeMessage< ::symphony::proto::HeartBeatAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::HeartBeatAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectDieNotify*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectDieNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectDieNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_RidingMountReq*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_RidingMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_RidingMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_RidingMountAck*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_RidingMountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_RidingMountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_RoleRebornReq*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_RoleRebornReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_RoleRebornReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_RoleRebornAck*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_RoleRebornAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_RoleRebornAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
