// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/log_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2flog_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2flog_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_symphony_2fproto_2flog_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto;
namespace symphony {
namespace proto {
class AccountCreateInfo;
struct AccountCreateInfoDefaultTypeInternal;
extern AccountCreateInfoDefaultTypeInternal _AccountCreateInfo_default_instance_;
class AccountLoginInfo;
struct AccountLoginInfoDefaultTypeInternal;
extern AccountLoginInfoDefaultTypeInternal _AccountLoginInfo_default_instance_;
class RoleChatInfo;
struct RoleChatInfoDefaultTypeInternal;
extern RoleChatInfoDefaultTypeInternal _RoleChatInfo_default_instance_;
class RoleCreateInfo;
struct RoleCreateInfoDefaultTypeInternal;
extern RoleCreateInfoDefaultTypeInternal _RoleCreateInfo_default_instance_;
class RoleLoginInfo;
struct RoleLoginInfoDefaultTypeInternal;
extern RoleLoginInfoDefaultTypeInternal _RoleLoginInfo_default_instance_;
class RoleLogoutInfo;
struct RoleLogoutInfoDefaultTypeInternal;
extern RoleLogoutInfoDefaultTypeInternal _RoleLogoutInfo_default_instance_;
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> ::symphony::proto::AccountCreateInfo* Arena::CreateMaybeMessage<::symphony::proto::AccountCreateInfo>(Arena*);
template<> ::symphony::proto::AccountLoginInfo* Arena::CreateMaybeMessage<::symphony::proto::AccountLoginInfo>(Arena*);
template<> ::symphony::proto::RoleChatInfo* Arena::CreateMaybeMessage<::symphony::proto::RoleChatInfo>(Arena*);
template<> ::symphony::proto::RoleCreateInfo* Arena::CreateMaybeMessage<::symphony::proto::RoleCreateInfo>(Arena*);
template<> ::symphony::proto::RoleLoginInfo* Arena::CreateMaybeMessage<::symphony::proto::RoleLoginInfo>(Arena*);
template<> ::symphony::proto::RoleLogoutInfo* Arena::CreateMaybeMessage<::symphony::proto::RoleLogoutInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace symphony {
namespace proto {

// ===================================================================

class AccountCreateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.AccountCreateInfo) */ {
 public:
  inline AccountCreateInfo() : AccountCreateInfo(nullptr) {}
  ~AccountCreateInfo() override;
  explicit PROTOBUF_CONSTEXPR AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCreateInfo(const AccountCreateInfo& from);
  AccountCreateInfo(AccountCreateInfo&& from) noexcept
    : AccountCreateInfo() {
    *this = ::std::move(from);
  }

  inline AccountCreateInfo& operator=(const AccountCreateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreateInfo& operator=(AccountCreateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreateInfo* internal_default_instance() {
    return reinterpret_cast<const AccountCreateInfo*>(
               &_AccountCreateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountCreateInfo& a, AccountCreateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountCreateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountCreateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCreateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountCreateInfo& from) {
    AccountCreateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.AccountCreateInfo";
  }
  protected:
  explicit AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImodelFieldNumber = 5,
    kImeiFieldNumber = 6,
    kIpFieldNumber = 7,
    kOpenidFieldNumber = 8,
    kIdfaFieldNumber = 9,
    kUuidFieldNumber = 10,
    kAccountidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kChannelFieldNumber = 3,
    kOptimeFieldNumber = 4,
  };
  // optional string imodel = 5;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // optional string imei = 6;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // required string ip = 7;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string openid = 8;
  bool has_openid() const;
  private:
  bool _internal_has_openid() const;
  public:
  void clear_openid();
  const std::string& openid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_openid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // optional string idfa = 9;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string uuid = 10;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // required int64 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 4;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.AccountCreateInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int64_t accountid_;
    int32_t version_;
    int32_t channel_;
    int64_t optime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.AccountLoginInfo) */ {
 public:
  inline AccountLoginInfo() : AccountLoginInfo(nullptr) {}
  ~AccountLoginInfo() override;
  explicit PROTOBUF_CONSTEXPR AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginInfo(const AccountLoginInfo& from);
  AccountLoginInfo(AccountLoginInfo&& from) noexcept
    : AccountLoginInfo() {
    *this = ::std::move(from);
  }

  inline AccountLoginInfo& operator=(const AccountLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginInfo& operator=(AccountLoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginInfo* internal_default_instance() {
    return reinterpret_cast<const AccountLoginInfo*>(
               &_AccountLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountLoginInfo& a, AccountLoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountLoginInfo& from) {
    AccountLoginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.AccountLoginInfo";
  }
  protected:
  explicit AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 5,
    kOpenidFieldNumber = 6,
    kUuidFieldNumber = 7,
    kIdfaFieldNumber = 8,
    kImeiFieldNumber = 9,
    kImodelFieldNumber = 10,
    kAccountidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kChannelFieldNumber = 3,
    kOptimeFieldNumber = 4,
  };
  // required string ip = 5;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string openid = 6;
  bool has_openid() const;
  private:
  bool _internal_has_openid() const;
  public:
  void clear_openid();
  const std::string& openid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_openid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // optional string uuid = 7;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string idfa = 8;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string imei = 9;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string imodel = 10;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // required int64 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 4;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.AccountLoginInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    int64_t accountid_;
    int32_t version_;
    int32_t channel_;
    int64_t optime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RoleChatInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.RoleChatInfo) */ {
 public:
  inline RoleChatInfo() : RoleChatInfo(nullptr) {}
  ~RoleChatInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleChatInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleChatInfo(const RoleChatInfo& from);
  RoleChatInfo(RoleChatInfo&& from) noexcept
    : RoleChatInfo() {
    *this = ::std::move(from);
  }

  inline RoleChatInfo& operator=(const RoleChatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleChatInfo& operator=(RoleChatInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleChatInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleChatInfo* internal_default_instance() {
    return reinterpret_cast<const RoleChatInfo*>(
               &_RoleChatInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoleChatInfo& a, RoleChatInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleChatInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleChatInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleChatInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleChatInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleChatInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleChatInfo& from) {
    RoleChatInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleChatInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.RoleChatInfo";
  }
  protected:
  explicit RoleChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolenameFieldNumber = 3,
    kTextFieldNumber = 7,
    kTargetnameFieldNumber = 11,
    kRoleidFieldNumber = 1,
    kLevelFieldNumber = 2,
    kViplevelFieldNumber = 4,
    kAreaidFieldNumber = 5,
    kChannelFieldNumber = 6,
    kOptimeFieldNumber = 8,
    kTargetidFieldNumber = 9,
    kTargetvipFieldNumber = 10,
    kChatchlFieldNumber = 12,
  };
  // optional string rolename = 3;
  bool has_rolename() const;
  private:
  bool _internal_has_rolename() const;
  public:
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_NODISCARD std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // optional string text = 7;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string targetname = 11;
  bool has_targetname() const;
  private:
  bool _internal_has_targetname() const;
  public:
  void clear_targetname();
  const std::string& targetname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetname();
  PROTOBUF_NODISCARD std::string* release_targetname();
  void set_allocated_targetname(std::string* targetname);
  private:
  const std::string& _internal_targetname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetname(const std::string& value);
  std::string* _internal_mutable_targetname();
  public:

  // required int64 roleid = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  int64_t roleid() const;
  void set_roleid(int64_t value);
  private:
  int64_t _internal_roleid() const;
  void _internal_set_roleid(int64_t value);
  public:

  // optional int32 level = 2;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // optional int32 viplevel = 4;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  int32_t viplevel() const;
  void set_viplevel(int32_t value);
  private:
  int32_t _internal_viplevel() const;
  void _internal_set_viplevel(int32_t value);
  public:

  // optional int32 areaid = 5;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  int32_t areaid() const;
  void set_areaid(int32_t value);
  private:
  int32_t _internal_areaid() const;
  void _internal_set_areaid(int32_t value);
  public:

  // optional int32 channel = 6;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 8;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // optional int64 targetid = 9;
  bool has_targetid() const;
  private:
  bool _internal_has_targetid() const;
  public:
  void clear_targetid();
  int64_t targetid() const;
  void set_targetid(int64_t value);
  private:
  int64_t _internal_targetid() const;
  void _internal_set_targetid(int64_t value);
  public:

  // optional int32 targetvip = 10;
  bool has_targetvip() const;
  private:
  bool _internal_has_targetvip() const;
  public:
  void clear_targetvip();
  int32_t targetvip() const;
  void set_targetvip(int32_t value);
  private:
  int32_t _internal_targetvip() const;
  void _internal_set_targetvip(int32_t value);
  public:

  // optional int32 chatchl = 12;
  bool has_chatchl() const;
  private:
  bool _internal_has_chatchl() const;
  public:
  void clear_chatchl();
  int32_t chatchl() const;
  void set_chatchl(int32_t value);
  private:
  int32_t _internal_chatchl() const;
  void _internal_set_chatchl(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.RoleChatInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetname_;
    int64_t roleid_;
    int32_t level_;
    int32_t viplevel_;
    int32_t areaid_;
    int32_t channel_;
    int64_t optime_;
    int64_t targetid_;
    int32_t targetvip_;
    int32_t chatchl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RoleCreateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.RoleCreateInfo) */ {
 public:
  inline RoleCreateInfo() : RoleCreateInfo(nullptr) {}
  ~RoleCreateInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleCreateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleCreateInfo(const RoleCreateInfo& from);
  RoleCreateInfo(RoleCreateInfo&& from) noexcept
    : RoleCreateInfo() {
    *this = ::std::move(from);
  }

  inline RoleCreateInfo& operator=(const RoleCreateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleCreateInfo& operator=(RoleCreateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleCreateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleCreateInfo* internal_default_instance() {
    return reinterpret_cast<const RoleCreateInfo*>(
               &_RoleCreateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoleCreateInfo& a, RoleCreateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleCreateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleCreateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleCreateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleCreateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleCreateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleCreateInfo& from) {
    RoleCreateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleCreateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.RoleCreateInfo";
  }
  protected:
  explicit RoleCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolenameFieldNumber = 6,
    kImodelFieldNumber = 7,
    kImeiFieldNumber = 8,
    kIdfaFieldNumber = 9,
    kUuidFieldNumber = 10,
    kRoleidFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kAreaidFieldNumber = 3,
    kChannelFieldNumber = 4,
    kOptimeFieldNumber = 5,
  };
  // optional string rolename = 6;
  bool has_rolename() const;
  private:
  bool _internal_has_rolename() const;
  public:
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_NODISCARD std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // optional string imodel = 7;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // optional string imei = 8;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string idfa = 9;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string uuid = 10;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // required int64 roleid = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  int64_t roleid() const;
  void set_roleid(int64_t value);
  private:
  int64_t _internal_roleid() const;
  void _internal_set_roleid(int64_t value);
  public:

  // required int64 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 areaid = 3;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  int32_t areaid() const;
  void set_areaid(int32_t value);
  private:
  int32_t _internal_areaid() const;
  void _internal_set_areaid(int32_t value);
  public:

  // optional int32 channel = 4;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 5;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.RoleCreateInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int64_t roleid_;
    int64_t accountid_;
    int32_t areaid_;
    int32_t channel_;
    int64_t optime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RoleLoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.RoleLoginInfo) */ {
 public:
  inline RoleLoginInfo() : RoleLoginInfo(nullptr) {}
  ~RoleLoginInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleLoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLoginInfo(const RoleLoginInfo& from);
  RoleLoginInfo(RoleLoginInfo&& from) noexcept
    : RoleLoginInfo() {
    *this = ::std::move(from);
  }

  inline RoleLoginInfo& operator=(const RoleLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLoginInfo& operator=(RoleLoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLoginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLoginInfo* internal_default_instance() {
    return reinterpret_cast<const RoleLoginInfo*>(
               &_RoleLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoleLoginInfo& a, RoleLoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLoginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleLoginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLoginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleLoginInfo& from) {
    RoleLoginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLoginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.RoleLoginInfo";
  }
  protected:
  explicit RoleLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolenameFieldNumber = 8,
    kUuidFieldNumber = 9,
    kIdfaFieldNumber = 10,
    kImeiFieldNumber = 11,
    kImodelFieldNumber = 12,
    kRoleidFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kChannelFieldNumber = 3,
    kLevelFieldNumber = 4,
    kOptimeFieldNumber = 6,
    kViplevelFieldNumber = 5,
    kAreaidFieldNumber = 7,
  };
  // optional string rolename = 8;
  bool has_rolename() const;
  private:
  bool _internal_has_rolename() const;
  public:
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_NODISCARD std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // optional string uuid = 9;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string idfa = 10;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string imei = 11;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string imodel = 12;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // required int64 roleid = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  int64_t roleid() const;
  void set_roleid(int64_t value);
  private:
  int64_t _internal_roleid() const;
  void _internal_set_roleid(int64_t value);
  public:

  // required int64 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // optional int32 level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // required int64 optime = 6;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // optional int32 viplevel = 5;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  int32_t viplevel() const;
  void set_viplevel(int32_t value);
  private:
  int32_t _internal_viplevel() const;
  void _internal_set_viplevel(int32_t value);
  public:

  // optional int32 areaid = 7;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  int32_t areaid() const;
  void set_areaid(int32_t value);
  private:
  int32_t _internal_areaid() const;
  void _internal_set_areaid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.RoleLoginInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    int64_t roleid_;
    int64_t accountid_;
    int32_t channel_;
    int32_t level_;
    int64_t optime_;
    int32_t viplevel_;
    int32_t areaid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RoleLogoutInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.RoleLogoutInfo) */ {
 public:
  inline RoleLogoutInfo() : RoleLogoutInfo(nullptr) {}
  ~RoleLogoutInfo() override;
  explicit PROTOBUF_CONSTEXPR RoleLogoutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoleLogoutInfo(const RoleLogoutInfo& from);
  RoleLogoutInfo(RoleLogoutInfo&& from) noexcept
    : RoleLogoutInfo() {
    *this = ::std::move(from);
  }

  inline RoleLogoutInfo& operator=(const RoleLogoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoleLogoutInfo& operator=(RoleLogoutInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoleLogoutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoleLogoutInfo* internal_default_instance() {
    return reinterpret_cast<const RoleLogoutInfo*>(
               &_RoleLogoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoleLogoutInfo& a, RoleLogoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoleLogoutInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoleLogoutInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoleLogoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoleLogoutInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoleLogoutInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoleLogoutInfo& from) {
    RoleLogoutInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoleLogoutInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.RoleLogoutInfo";
  }
  protected:
  explicit RoleLogoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRolenameFieldNumber = 8,
    kIdfaFieldNumber = 10,
    kImeiFieldNumber = 11,
    kImodelFieldNumber = 12,
    kRoleidFieldNumber = 1,
    kAccountidFieldNumber = 2,
    kChannelFieldNumber = 3,
    kLevelFieldNumber = 4,
    kOptimeFieldNumber = 6,
    kViplevelFieldNumber = 5,
    kAreaidFieldNumber = 7,
  };
  // optional string rolename = 8;
  bool has_rolename() const;
  private:
  bool _internal_has_rolename() const;
  public:
  void clear_rolename();
  const std::string& rolename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rolename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rolename();
  PROTOBUF_NODISCARD std::string* release_rolename();
  void set_allocated_rolename(std::string* rolename);
  private:
  const std::string& _internal_rolename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rolename(const std::string& value);
  std::string* _internal_mutable_rolename();
  public:

  // optional string idfa = 10;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string imei = 11;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string imodel = 12;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // required int64 roleid = 1;
  bool has_roleid() const;
  private:
  bool _internal_has_roleid() const;
  public:
  void clear_roleid();
  int64_t roleid() const;
  void set_roleid(int64_t value);
  private:
  int64_t _internal_roleid() const;
  void _internal_set_roleid(int64_t value);
  public:

  // required int64 accountid = 2;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // optional int32 level = 4;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // required int64 optime = 6;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // optional int32 viplevel = 5;
  bool has_viplevel() const;
  private:
  bool _internal_has_viplevel() const;
  public:
  void clear_viplevel();
  int32_t viplevel() const;
  void set_viplevel(int32_t value);
  private:
  int32_t _internal_viplevel() const;
  void _internal_set_viplevel(int32_t value);
  public:

  // optional int32 areaid = 7;
  bool has_areaid() const;
  private:
  bool _internal_has_areaid() const;
  public:
  void clear_areaid();
  int32_t areaid() const;
  void set_areaid(int32_t value);
  private:
  int32_t _internal_areaid() const;
  void _internal_set_areaid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.RoleLogoutInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rolename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    int64_t roleid_;
    int64_t accountid_;
    int32_t channel_;
    int32_t level_;
    int64_t optime_;
    int32_t viplevel_;
    int32_t areaid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountCreateInfo

// required int64 accountid = 1;
inline bool AccountCreateInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void AccountCreateInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AccountCreateInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t AccountCreateInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.accountid)
  return _internal_accountid();
}
inline void AccountCreateInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void AccountCreateInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.accountid)
}

// optional int32 version = 2;
inline bool AccountCreateInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_version() const {
  return _internal_has_version();
}
inline void AccountCreateInfo::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t AccountCreateInfo::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AccountCreateInfo::version() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.version)
  return _internal_version();
}
inline void AccountCreateInfo::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.version_ = value;
}
inline void AccountCreateInfo::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.version)
}

// optional int32 channel = 3;
inline bool AccountCreateInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_channel() const {
  return _internal_has_channel();
}
inline void AccountCreateInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t AccountCreateInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t AccountCreateInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.channel)
  return _internal_channel();
}
inline void AccountCreateInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_ = value;
}
inline void AccountCreateInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.channel)
}

// required int64 optime = 4;
inline bool AccountCreateInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_optime() const {
  return _internal_has_optime();
}
inline void AccountCreateInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t AccountCreateInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t AccountCreateInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.optime)
  return _internal_optime();
}
inline void AccountCreateInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void AccountCreateInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.optime)
}

// optional string imodel = 5;
inline bool AccountCreateInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void AccountCreateInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountCreateInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.imodel)
}
inline std::string* AccountCreateInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.imodel)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void AccountCreateInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.imodel)
}

// optional string imei = 6;
inline bool AccountCreateInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_imei() const {
  return _internal_has_imei();
}
inline void AccountCreateInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountCreateInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.imei)
}
inline std::string* AccountCreateInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.imei)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void AccountCreateInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.imei)
}

// required string ip = 7;
inline bool AccountCreateInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_ip() const {
  return _internal_has_ip();
}
inline void AccountCreateInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountCreateInfo::ip() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.ip)
}
inline std::string* AccountCreateInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.ip)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AccountCreateInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_ip() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.ip)
}

// optional string openid = 8;
inline bool AccountCreateInfo::_internal_has_openid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_openid() const {
  return _internal_has_openid();
}
inline void AccountCreateInfo::clear_openid() {
  _impl_.openid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccountCreateInfo::openid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.openid)
  return _internal_openid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_openid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.openid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.openid)
}
inline std::string* AccountCreateInfo::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.openid)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void AccountCreateInfo::_internal_set_openid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_openid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.openid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_openid() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.openid)
  if (!_internal_has_openid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.openid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.openid_.SetAllocated(openid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.openid)
}

// optional string idfa = 9;
inline bool AccountCreateInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void AccountCreateInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AccountCreateInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.idfa)
}
inline std::string* AccountCreateInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.idfa)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void AccountCreateInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.idfa)
}

// optional string uuid = 10;
inline bool AccountCreateInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void AccountCreateInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AccountCreateInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountCreateInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountCreateInfo.uuid)
}
inline std::string* AccountCreateInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountCreateInfo.uuid)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void AccountCreateInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountCreateInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountCreateInfo.uuid)
}

// -------------------------------------------------------------------

// AccountLoginInfo

// required int64 accountid = 1;
inline bool AccountLoginInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void AccountLoginInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AccountLoginInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t AccountLoginInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.accountid)
  return _internal_accountid();
}
inline void AccountLoginInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void AccountLoginInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.accountid)
}

// optional int32 version = 2;
inline bool AccountLoginInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_version() const {
  return _internal_has_version();
}
inline void AccountLoginInfo::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t AccountLoginInfo::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AccountLoginInfo::version() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.version)
  return _internal_version();
}
inline void AccountLoginInfo::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.version_ = value;
}
inline void AccountLoginInfo::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.version)
}

// optional int32 channel = 3;
inline bool AccountLoginInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_channel() const {
  return _internal_has_channel();
}
inline void AccountLoginInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t AccountLoginInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t AccountLoginInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.channel)
  return _internal_channel();
}
inline void AccountLoginInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_ = value;
}
inline void AccountLoginInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.channel)
}

// required int64 optime = 4;
inline bool AccountLoginInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_optime() const {
  return _internal_has_optime();
}
inline void AccountLoginInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t AccountLoginInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t AccountLoginInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.optime)
  return _internal_optime();
}
inline void AccountLoginInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void AccountLoginInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.optime)
}

// required string ip = 5;
inline bool AccountLoginInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_ip() const {
  return _internal_has_ip();
}
inline void AccountLoginInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountLoginInfo::ip() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.ip)
}
inline std::string* AccountLoginInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.ip)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AccountLoginInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_ip() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.ip)
}

// optional string openid = 6;
inline bool AccountLoginInfo::_internal_has_openid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_openid() const {
  return _internal_has_openid();
}
inline void AccountLoginInfo::clear_openid() {
  _impl_.openid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountLoginInfo::openid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.openid)
  return _internal_openid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_openid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.openid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.openid)
}
inline std::string* AccountLoginInfo::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.openid)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void AccountLoginInfo::_internal_set_openid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_openid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.openid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_openid() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.openid)
  if (!_internal_has_openid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.openid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.openid_.SetAllocated(openid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.openid)
}

// optional string uuid = 7;
inline bool AccountLoginInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void AccountLoginInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountLoginInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.uuid)
}
inline std::string* AccountLoginInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.uuid)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void AccountLoginInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.uuid)
}

// optional string idfa = 8;
inline bool AccountLoginInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void AccountLoginInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccountLoginInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.idfa)
}
inline std::string* AccountLoginInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.idfa)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void AccountLoginInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.idfa)
}

// optional string imei = 9;
inline bool AccountLoginInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_imei() const {
  return _internal_has_imei();
}
inline void AccountLoginInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AccountLoginInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.imei)
}
inline std::string* AccountLoginInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.imei)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void AccountLoginInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.imei)
}

// optional string imodel = 10;
inline bool AccountLoginInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void AccountLoginInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AccountLoginInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.AccountLoginInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.AccountLoginInfo.imodel)
}
inline std::string* AccountLoginInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.proto.AccountLoginInfo.imodel)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void AccountLoginInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.proto.AccountLoginInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.AccountLoginInfo.imodel)
}

// -------------------------------------------------------------------

// RoleChatInfo

// required int64 roleid = 1;
inline bool RoleChatInfo::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleChatInfo::has_roleid() const {
  return _internal_has_roleid();
}
inline void RoleChatInfo::clear_roleid() {
  _impl_.roleid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RoleChatInfo::_internal_roleid() const {
  return _impl_.roleid_;
}
inline int64_t RoleChatInfo::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.roleid)
  return _internal_roleid();
}
inline void RoleChatInfo::_internal_set_roleid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.roleid_ = value;
}
inline void RoleChatInfo::set_roleid(int64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.roleid)
}

// optional int32 level = 2;
inline bool RoleChatInfo::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleChatInfo::has_level() const {
  return _internal_has_level();
}
inline void RoleChatInfo::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t RoleChatInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t RoleChatInfo::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.level)
  return _internal_level();
}
inline void RoleChatInfo::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.level_ = value;
}
inline void RoleChatInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.level)
}

// optional string rolename = 3;
inline bool RoleChatInfo::_internal_has_rolename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleChatInfo::has_rolename() const {
  return _internal_has_rolename();
}
inline void RoleChatInfo::clear_rolename() {
  _impl_.rolename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleChatInfo::rolename() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.rolename)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleChatInfo::set_rolename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rolename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.rolename)
}
inline std::string* RoleChatInfo::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleChatInfo.rolename)
  return _s;
}
inline const std::string& RoleChatInfo::_internal_rolename() const {
  return _impl_.rolename_.Get();
}
inline void RoleChatInfo::_internal_set_rolename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rolename_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleChatInfo::_internal_mutable_rolename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rolename_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleChatInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleChatInfo.rolename)
  if (!_internal_has_rolename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rolename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleChatInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rolename_.SetAllocated(rolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleChatInfo.rolename)
}

// optional int32 viplevel = 4;
inline bool RoleChatInfo::_internal_has_viplevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleChatInfo::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void RoleChatInfo::clear_viplevel() {
  _impl_.viplevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t RoleChatInfo::_internal_viplevel() const {
  return _impl_.viplevel_;
}
inline int32_t RoleChatInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.viplevel)
  return _internal_viplevel();
}
inline void RoleChatInfo::_internal_set_viplevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.viplevel_ = value;
}
inline void RoleChatInfo::set_viplevel(int32_t value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.viplevel)
}

// optional int32 areaid = 5;
inline bool RoleChatInfo::_internal_has_areaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleChatInfo::has_areaid() const {
  return _internal_has_areaid();
}
inline void RoleChatInfo::clear_areaid() {
  _impl_.areaid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t RoleChatInfo::_internal_areaid() const {
  return _impl_.areaid_;
}
inline int32_t RoleChatInfo::areaid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.areaid)
  return _internal_areaid();
}
inline void RoleChatInfo::_internal_set_areaid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.areaid_ = value;
}
inline void RoleChatInfo::set_areaid(int32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.areaid)
}

// optional int32 channel = 6;
inline bool RoleChatInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleChatInfo::has_channel() const {
  return _internal_has_channel();
}
inline void RoleChatInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RoleChatInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t RoleChatInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.channel)
  return _internal_channel();
}
inline void RoleChatInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.channel_ = value;
}
inline void RoleChatInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.channel)
}

// optional string text = 7;
inline bool RoleChatInfo::_internal_has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleChatInfo::has_text() const {
  return _internal_has_text();
}
inline void RoleChatInfo::clear_text() {
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleChatInfo::text() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleChatInfo::set_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.text)
}
inline std::string* RoleChatInfo::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleChatInfo.text)
  return _s;
}
inline const std::string& RoleChatInfo::_internal_text() const {
  return _impl_.text_.Get();
}
inline void RoleChatInfo::_internal_set_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleChatInfo::_internal_mutable_text() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleChatInfo::release_text() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleChatInfo.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleChatInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleChatInfo.text)
}

// required int64 optime = 8;
inline bool RoleChatInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoleChatInfo::has_optime() const {
  return _internal_has_optime();
}
inline void RoleChatInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t RoleChatInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t RoleChatInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.optime)
  return _internal_optime();
}
inline void RoleChatInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.optime_ = value;
}
inline void RoleChatInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.optime)
}

// optional int64 targetid = 9;
inline bool RoleChatInfo::_internal_has_targetid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleChatInfo::has_targetid() const {
  return _internal_has_targetid();
}
inline void RoleChatInfo::clear_targetid() {
  _impl_.targetid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t RoleChatInfo::_internal_targetid() const {
  return _impl_.targetid_;
}
inline int64_t RoleChatInfo::targetid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.targetid)
  return _internal_targetid();
}
inline void RoleChatInfo::_internal_set_targetid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.targetid_ = value;
}
inline void RoleChatInfo::set_targetid(int64_t value) {
  _internal_set_targetid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.targetid)
}

// optional int32 targetvip = 10;
inline bool RoleChatInfo::_internal_has_targetvip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoleChatInfo::has_targetvip() const {
  return _internal_has_targetvip();
}
inline void RoleChatInfo::clear_targetvip() {
  _impl_.targetvip_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t RoleChatInfo::_internal_targetvip() const {
  return _impl_.targetvip_;
}
inline int32_t RoleChatInfo::targetvip() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.targetvip)
  return _internal_targetvip();
}
inline void RoleChatInfo::_internal_set_targetvip(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.targetvip_ = value;
}
inline void RoleChatInfo::set_targetvip(int32_t value) {
  _internal_set_targetvip(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.targetvip)
}

// optional string targetname = 11;
inline bool RoleChatInfo::_internal_has_targetname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleChatInfo::has_targetname() const {
  return _internal_has_targetname();
}
inline void RoleChatInfo::clear_targetname() {
  _impl_.targetname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleChatInfo::targetname() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.targetname)
  return _internal_targetname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleChatInfo::set_targetname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.targetname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.targetname)
}
inline std::string* RoleChatInfo::mutable_targetname() {
  std::string* _s = _internal_mutable_targetname();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleChatInfo.targetname)
  return _s;
}
inline const std::string& RoleChatInfo::_internal_targetname() const {
  return _impl_.targetname_.Get();
}
inline void RoleChatInfo::_internal_set_targetname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.targetname_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleChatInfo::_internal_mutable_targetname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.targetname_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleChatInfo::release_targetname() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleChatInfo.targetname)
  if (!_internal_has_targetname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.targetname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetname_.IsDefault()) {
    _impl_.targetname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleChatInfo::set_allocated_targetname(std::string* targetname) {
  if (targetname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.targetname_.SetAllocated(targetname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetname_.IsDefault()) {
    _impl_.targetname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleChatInfo.targetname)
}

// optional int32 chatchl = 12;
inline bool RoleChatInfo::_internal_has_chatchl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RoleChatInfo::has_chatchl() const {
  return _internal_has_chatchl();
}
inline void RoleChatInfo::clear_chatchl() {
  _impl_.chatchl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t RoleChatInfo::_internal_chatchl() const {
  return _impl_.chatchl_;
}
inline int32_t RoleChatInfo::chatchl() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleChatInfo.chatchl)
  return _internal_chatchl();
}
inline void RoleChatInfo::_internal_set_chatchl(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.chatchl_ = value;
}
inline void RoleChatInfo::set_chatchl(int32_t value) {
  _internal_set_chatchl(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleChatInfo.chatchl)
}

// -------------------------------------------------------------------

// RoleCreateInfo

// required int64 roleid = 1;
inline bool RoleCreateInfo::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_roleid() const {
  return _internal_has_roleid();
}
inline void RoleCreateInfo::clear_roleid() {
  _impl_.roleid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RoleCreateInfo::_internal_roleid() const {
  return _impl_.roleid_;
}
inline int64_t RoleCreateInfo::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.roleid)
  return _internal_roleid();
}
inline void RoleCreateInfo::_internal_set_roleid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.roleid_ = value;
}
inline void RoleCreateInfo::set_roleid(int64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.roleid)
}

// required int64 accountid = 2;
inline bool RoleCreateInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void RoleCreateInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t RoleCreateInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t RoleCreateInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.accountid)
  return _internal_accountid();
}
inline void RoleCreateInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void RoleCreateInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.accountid)
}

// optional int32 areaid = 3;
inline bool RoleCreateInfo::_internal_has_areaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_areaid() const {
  return _internal_has_areaid();
}
inline void RoleCreateInfo::clear_areaid() {
  _impl_.areaid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RoleCreateInfo::_internal_areaid() const {
  return _impl_.areaid_;
}
inline int32_t RoleCreateInfo::areaid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.areaid)
  return _internal_areaid();
}
inline void RoleCreateInfo::_internal_set_areaid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.areaid_ = value;
}
inline void RoleCreateInfo::set_areaid(int32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.areaid)
}

// optional int32 channel = 4;
inline bool RoleCreateInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_channel() const {
  return _internal_has_channel();
}
inline void RoleCreateInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t RoleCreateInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t RoleCreateInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.channel)
  return _internal_channel();
}
inline void RoleCreateInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_ = value;
}
inline void RoleCreateInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.channel)
}

// required int64 optime = 5;
inline bool RoleCreateInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_optime() const {
  return _internal_has_optime();
}
inline void RoleCreateInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t RoleCreateInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t RoleCreateInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.optime)
  return _internal_optime();
}
inline void RoleCreateInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void RoleCreateInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.optime)
}

// optional string rolename = 6;
inline bool RoleCreateInfo::_internal_has_rolename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_rolename() const {
  return _internal_has_rolename();
}
inline void RoleCreateInfo::clear_rolename() {
  _impl_.rolename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleCreateInfo::rolename() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.rolename)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleCreateInfo::set_rolename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rolename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.rolename)
}
inline std::string* RoleCreateInfo::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleCreateInfo.rolename)
  return _s;
}
inline const std::string& RoleCreateInfo::_internal_rolename() const {
  return _impl_.rolename_.Get();
}
inline void RoleCreateInfo::_internal_set_rolename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rolename_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::_internal_mutable_rolename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rolename_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleCreateInfo.rolename)
  if (!_internal_has_rolename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rolename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleCreateInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rolename_.SetAllocated(rolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleCreateInfo.rolename)
}

// optional string imodel = 7;
inline bool RoleCreateInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void RoleCreateInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleCreateInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleCreateInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.imodel)
}
inline std::string* RoleCreateInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleCreateInfo.imodel)
  return _s;
}
inline const std::string& RoleCreateInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void RoleCreateInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleCreateInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleCreateInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleCreateInfo.imodel)
}

// optional string imei = 8;
inline bool RoleCreateInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_imei() const {
  return _internal_has_imei();
}
inline void RoleCreateInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleCreateInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleCreateInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.imei)
}
inline std::string* RoleCreateInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleCreateInfo.imei)
  return _s;
}
inline const std::string& RoleCreateInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void RoleCreateInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleCreateInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleCreateInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleCreateInfo.imei)
}

// optional string idfa = 9;
inline bool RoleCreateInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void RoleCreateInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoleCreateInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleCreateInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.idfa)
}
inline std::string* RoleCreateInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleCreateInfo.idfa)
  return _s;
}
inline const std::string& RoleCreateInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void RoleCreateInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleCreateInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleCreateInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleCreateInfo.idfa)
}

// optional string uuid = 10;
inline bool RoleCreateInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleCreateInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void RoleCreateInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RoleCreateInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleCreateInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleCreateInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleCreateInfo.uuid)
}
inline std::string* RoleCreateInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleCreateInfo.uuid)
  return _s;
}
inline const std::string& RoleCreateInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void RoleCreateInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleCreateInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleCreateInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleCreateInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleCreateInfo.uuid)
}

// -------------------------------------------------------------------

// RoleLoginInfo

// required int64 roleid = 1;
inline bool RoleLoginInfo::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_roleid() const {
  return _internal_has_roleid();
}
inline void RoleLoginInfo::clear_roleid() {
  _impl_.roleid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RoleLoginInfo::_internal_roleid() const {
  return _impl_.roleid_;
}
inline int64_t RoleLoginInfo::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.roleid)
  return _internal_roleid();
}
inline void RoleLoginInfo::_internal_set_roleid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.roleid_ = value;
}
inline void RoleLoginInfo::set_roleid(int64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.roleid)
}

// required int64 accountid = 2;
inline bool RoleLoginInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void RoleLoginInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t RoleLoginInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t RoleLoginInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.accountid)
  return _internal_accountid();
}
inline void RoleLoginInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void RoleLoginInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.accountid)
}

// optional int32 channel = 3;
inline bool RoleLoginInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_channel() const {
  return _internal_has_channel();
}
inline void RoleLoginInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RoleLoginInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t RoleLoginInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.channel)
  return _internal_channel();
}
inline void RoleLoginInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.channel_ = value;
}
inline void RoleLoginInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.channel)
}

// optional int32 level = 4;
inline bool RoleLoginInfo::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_level() const {
  return _internal_has_level();
}
inline void RoleLoginInfo::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t RoleLoginInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t RoleLoginInfo::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.level)
  return _internal_level();
}
inline void RoleLoginInfo::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.level_ = value;
}
inline void RoleLoginInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.level)
}

// optional int32 viplevel = 5;
inline bool RoleLoginInfo::_internal_has_viplevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void RoleLoginInfo::clear_viplevel() {
  _impl_.viplevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t RoleLoginInfo::_internal_viplevel() const {
  return _impl_.viplevel_;
}
inline int32_t RoleLoginInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.viplevel)
  return _internal_viplevel();
}
inline void RoleLoginInfo::_internal_set_viplevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.viplevel_ = value;
}
inline void RoleLoginInfo::set_viplevel(int32_t value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.viplevel)
}

// required int64 optime = 6;
inline bool RoleLoginInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_optime() const {
  return _internal_has_optime();
}
inline void RoleLoginInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t RoleLoginInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t RoleLoginInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.optime)
  return _internal_optime();
}
inline void RoleLoginInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void RoleLoginInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.optime)
}

// optional int32 areaid = 7;
inline bool RoleLoginInfo::_internal_has_areaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_areaid() const {
  return _internal_has_areaid();
}
inline void RoleLoginInfo::clear_areaid() {
  _impl_.areaid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t RoleLoginInfo::_internal_areaid() const {
  return _impl_.areaid_;
}
inline int32_t RoleLoginInfo::areaid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.areaid)
  return _internal_areaid();
}
inline void RoleLoginInfo::_internal_set_areaid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.areaid_ = value;
}
inline void RoleLoginInfo::set_areaid(int32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.areaid)
}

// optional string rolename = 8;
inline bool RoleLoginInfo::_internal_has_rolename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_rolename() const {
  return _internal_has_rolename();
}
inline void RoleLoginInfo::clear_rolename() {
  _impl_.rolename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleLoginInfo::rolename() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.rolename)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginInfo::set_rolename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rolename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.rolename)
}
inline std::string* RoleLoginInfo::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLoginInfo.rolename)
  return _s;
}
inline const std::string& RoleLoginInfo::_internal_rolename() const {
  return _impl_.rolename_.Get();
}
inline void RoleLoginInfo::_internal_set_rolename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rolename_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::_internal_mutable_rolename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rolename_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLoginInfo.rolename)
  if (!_internal_has_rolename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rolename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLoginInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rolename_.SetAllocated(rolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLoginInfo.rolename)
}

// optional string uuid = 9;
inline bool RoleLoginInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void RoleLoginInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleLoginInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.uuid)
}
inline std::string* RoleLoginInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLoginInfo.uuid)
  return _s;
}
inline const std::string& RoleLoginInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void RoleLoginInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLoginInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLoginInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLoginInfo.uuid)
}

// optional string idfa = 10;
inline bool RoleLoginInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void RoleLoginInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleLoginInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.idfa)
}
inline std::string* RoleLoginInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLoginInfo.idfa)
  return _s;
}
inline const std::string& RoleLoginInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void RoleLoginInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLoginInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLoginInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLoginInfo.idfa)
}

// optional string imei = 11;
inline bool RoleLoginInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_imei() const {
  return _internal_has_imei();
}
inline void RoleLoginInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoleLoginInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.imei)
}
inline std::string* RoleLoginInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLoginInfo.imei)
  return _s;
}
inline const std::string& RoleLoginInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void RoleLoginInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLoginInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLoginInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLoginInfo.imei)
}

// optional string imodel = 12;
inline bool RoleLoginInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleLoginInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void RoleLoginInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& RoleLoginInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLoginInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLoginInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLoginInfo.imodel)
}
inline std::string* RoleLoginInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLoginInfo.imodel)
  return _s;
}
inline const std::string& RoleLoginInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void RoleLoginInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLoginInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLoginInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLoginInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLoginInfo.imodel)
}

// -------------------------------------------------------------------

// RoleLogoutInfo

// required int64 roleid = 1;
inline bool RoleLogoutInfo::_internal_has_roleid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_roleid() const {
  return _internal_has_roleid();
}
inline void RoleLogoutInfo::clear_roleid() {
  _impl_.roleid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int64_t RoleLogoutInfo::_internal_roleid() const {
  return _impl_.roleid_;
}
inline int64_t RoleLogoutInfo::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.roleid)
  return _internal_roleid();
}
inline void RoleLogoutInfo::_internal_set_roleid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.roleid_ = value;
}
inline void RoleLogoutInfo::set_roleid(int64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.roleid)
}

// required int64 accountid = 2;
inline bool RoleLogoutInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void RoleLogoutInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int64_t RoleLogoutInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t RoleLogoutInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.accountid)
  return _internal_accountid();
}
inline void RoleLogoutInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.accountid_ = value;
}
inline void RoleLogoutInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.accountid)
}

// optional int32 channel = 3;
inline bool RoleLogoutInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_channel() const {
  return _internal_has_channel();
}
inline void RoleLogoutInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t RoleLogoutInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t RoleLogoutInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.channel)
  return _internal_channel();
}
inline void RoleLogoutInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.channel_ = value;
}
inline void RoleLogoutInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.channel)
}

// optional int32 level = 4;
inline bool RoleLogoutInfo::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_level() const {
  return _internal_has_level();
}
inline void RoleLogoutInfo::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t RoleLogoutInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t RoleLogoutInfo::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.level)
  return _internal_level();
}
inline void RoleLogoutInfo::_internal_set_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.level_ = value;
}
inline void RoleLogoutInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.level)
}

// optional int32 viplevel = 5;
inline bool RoleLogoutInfo::_internal_has_viplevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_viplevel() const {
  return _internal_has_viplevel();
}
inline void RoleLogoutInfo::clear_viplevel() {
  _impl_.viplevel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t RoleLogoutInfo::_internal_viplevel() const {
  return _impl_.viplevel_;
}
inline int32_t RoleLogoutInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.viplevel)
  return _internal_viplevel();
}
inline void RoleLogoutInfo::_internal_set_viplevel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.viplevel_ = value;
}
inline void RoleLogoutInfo::set_viplevel(int32_t value) {
  _internal_set_viplevel(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.viplevel)
}

// required int64 optime = 6;
inline bool RoleLogoutInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_optime() const {
  return _internal_has_optime();
}
inline void RoleLogoutInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int64_t RoleLogoutInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t RoleLogoutInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.optime)
  return _internal_optime();
}
inline void RoleLogoutInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.optime_ = value;
}
inline void RoleLogoutInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.optime)
}

// optional int32 areaid = 7;
inline bool RoleLogoutInfo::_internal_has_areaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_areaid() const {
  return _internal_has_areaid();
}
inline void RoleLogoutInfo::clear_areaid() {
  _impl_.areaid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t RoleLogoutInfo::_internal_areaid() const {
  return _impl_.areaid_;
}
inline int32_t RoleLogoutInfo::areaid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.areaid)
  return _internal_areaid();
}
inline void RoleLogoutInfo::_internal_set_areaid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.areaid_ = value;
}
inline void RoleLogoutInfo::set_areaid(int32_t value) {
  _internal_set_areaid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.areaid)
}

// optional string rolename = 8;
inline bool RoleLogoutInfo::_internal_has_rolename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_rolename() const {
  return _internal_has_rolename();
}
inline void RoleLogoutInfo::clear_rolename() {
  _impl_.rolename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RoleLogoutInfo::rolename() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.rolename)
  return _internal_rolename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLogoutInfo::set_rolename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rolename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.rolename)
}
inline std::string* RoleLogoutInfo::mutable_rolename() {
  std::string* _s = _internal_mutable_rolename();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLogoutInfo.rolename)
  return _s;
}
inline const std::string& RoleLogoutInfo::_internal_rolename() const {
  return _impl_.rolename_.Get();
}
inline void RoleLogoutInfo::_internal_set_rolename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rolename_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::_internal_mutable_rolename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rolename_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::release_rolename() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLogoutInfo.rolename)
  if (!_internal_has_rolename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rolename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLogoutInfo::set_allocated_rolename(std::string* rolename) {
  if (rolename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rolename_.SetAllocated(rolename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rolename_.IsDefault()) {
    _impl_.rolename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLogoutInfo.rolename)
}

// optional string idfa = 10;
inline bool RoleLogoutInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void RoleLogoutInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RoleLogoutInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLogoutInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.idfa)
}
inline std::string* RoleLogoutInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLogoutInfo.idfa)
  return _s;
}
inline const std::string& RoleLogoutInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void RoleLogoutInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLogoutInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLogoutInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLogoutInfo.idfa)
}

// optional string imei = 11;
inline bool RoleLogoutInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_imei() const {
  return _internal_has_imei();
}
inline void RoleLogoutInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RoleLogoutInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLogoutInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.imei)
}
inline std::string* RoleLogoutInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLogoutInfo.imei)
  return _s;
}
inline const std::string& RoleLogoutInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void RoleLogoutInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLogoutInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLogoutInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLogoutInfo.imei)
}

// optional string imodel = 12;
inline bool RoleLogoutInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RoleLogoutInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void RoleLogoutInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RoleLogoutInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.proto.RoleLogoutInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoleLogoutInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.RoleLogoutInfo.imodel)
}
inline std::string* RoleLogoutInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.proto.RoleLogoutInfo.imodel)
  return _s;
}
inline const std::string& RoleLogoutInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void RoleLogoutInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* RoleLogoutInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.proto.RoleLogoutInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RoleLogoutInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.RoleLogoutInfo.imodel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace symphony

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2flog_5fprotobuf_2eproto
