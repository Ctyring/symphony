// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_base.proto

#include "symphony/proto/msg_base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR ItemData::ItemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemid_)*/0
  , /*decltype(_impl_.itemnum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDataDefaultTypeInternal() {}
  union {
    ItemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDataDefaultTypeInternal _ItemData_default_instance_;
PROTOBUF_CONSTEXPR SkillItem::SkillItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skillid_)*/0u
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.keypos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SkillItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SkillItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SkillItemDefaultTypeInternal() {}
  union {
    SkillItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SkillItemDefaultTypeInternal _SkillItem_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2fmsg_5fbase_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2fmsg_5fbase_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2fmsg_5fbase_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2fmsg_5fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ItemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ItemData, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ItemData, _impl_.itemnum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillItem, _impl_.skillid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SkillItem, _impl_.keypos_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::symphony::proto::ItemData)},
  { 8, -1, -1, sizeof(::symphony::proto::SkillItem)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_ItemData_default_instance_._instance,
  &::symphony::proto::_SkillItem_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2fmsg_5fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035symphony/proto/msg_base.proto\022\016symphon"
  "y.proto\"+\n\010ItemData\022\016\n\006ItemID\030\001 \001(\005\022\017\n\007I"
  "temNum\030\002 \001(\005\";\n\tSkillItem\022\017\n\007SkillID\030\001 \001"
  "(\r\022\r\n\005Level\030\002 \001(\005\022\016\n\006KeyPos\030\003 \001(\005b\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto = {
    false, false, 161, descriptor_table_protodef_symphony_2fproto_2fmsg_5fbase_2eproto,
    "symphony/proto/msg_base.proto",
    &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2fmsg_5fbase_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2fmsg_5fbase_2eproto, file_level_enum_descriptors_symphony_2fproto_2fmsg_5fbase_2eproto,
    file_level_service_descriptors_symphony_2fproto_2fmsg_5fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2fmsg_5fbase_2eproto(&descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class ItemData::_Internal {
 public:
};

ItemData::ItemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ItemData)
}
ItemData::ItemData(const ItemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){}
    , decltype(_impl_.itemnum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.itemid_, &from._impl_.itemid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.itemnum_) -
    reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.itemnum_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ItemData)
}

inline void ItemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemid_){0}
    , decltype(_impl_.itemnum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemData::~ItemData() {
  // @@protoc_insertion_point(destructor:symphony.proto.ItemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ItemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.itemid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.itemnum_) -
      reinterpret_cast<char*>(&_impl_.itemid_)) + sizeof(_impl_.itemnum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ItemID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ItemNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.itemnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ItemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ItemID = 1;
  if (this->_internal_itemid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_itemid(), target);
  }

  // int32 ItemNum = 2;
  if (this->_internal_itemnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ItemData)
  return target;
}

size_t ItemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ItemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ItemID = 1;
  if (this->_internal_itemid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemid());
  }

  // int32 ItemNum = 2;
  if (this->_internal_itemnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_itemnum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemData::GetClassData() const { return &_class_data_; }


void ItemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemData*>(&to_msg);
  auto& from = static_cast<const ItemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ItemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_itemid() != 0) {
    _this->_internal_set_itemid(from._internal_itemid());
  }
  if (from._internal_itemnum() != 0) {
    _this->_internal_set_itemnum(from._internal_itemnum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemData::CopyFrom(const ItemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ItemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  return true;
}

void ItemData::InternalSwap(ItemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemData, _impl_.itemnum_)
      + sizeof(ItemData::_impl_.itemnum_)
      - PROTOBUF_FIELD_OFFSET(ItemData, _impl_.itemid_)>(
          reinterpret_cast<char*>(&_impl_.itemid_),
          reinterpret_cast<char*>(&other->_impl_.itemid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fbase_2eproto[0]);
}

// ===================================================================

class SkillItem::_Internal {
 public:
};

SkillItem::SkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SkillItem)
}
SkillItem::SkillItem(const SkillItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SkillItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skillid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.keypos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skillid_, &from._impl_.skillid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keypos_) -
    reinterpret_cast<char*>(&_impl_.skillid_)) + sizeof(_impl_.keypos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SkillItem)
}

inline void SkillItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skillid_){0u}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.keypos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SkillItem::~SkillItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.SkillItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SkillItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SkillItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SkillItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SkillItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skillid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.keypos_) -
      reinterpret_cast<char*>(&_impl_.skillid_)) + sizeof(_impl_.keypos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SkillItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SkillID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 KeyPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keypos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SkillItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SkillItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SkillID = 1;
  if (this->_internal_skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_skillid(), target);
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // int32 KeyPos = 3;
  if (this->_internal_keypos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_keypos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SkillItem)
  return target;
}

size_t SkillItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SkillItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SkillID = 1;
  if (this->_internal_skillid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skillid());
  }

  // int32 Level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 KeyPos = 3;
  if (this->_internal_keypos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keypos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SkillItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SkillItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SkillItem::GetClassData() const { return &_class_data_; }


void SkillItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SkillItem*>(&to_msg);
  auto& from = static_cast<const SkillItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SkillItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skillid() != 0) {
    _this->_internal_set_skillid(from._internal_skillid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_keypos() != 0) {
    _this->_internal_set_keypos(from._internal_keypos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SkillItem::CopyFrom(const SkillItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillItem::IsInitialized() const {
  return true;
}

void SkillItem::InternalSwap(SkillItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SkillItem, _impl_.keypos_)
      + sizeof(SkillItem::_impl_.keypos_)
      - PROTOBUF_FIELD_OFFSET(SkillItem, _impl_.skillid_)>(
          reinterpret_cast<char*>(&_impl_.skillid_),
          reinterpret_cast<char*>(&other->_impl_.skillid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SkillItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fbase_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::ItemData*
Arena::CreateMaybeMessage< ::symphony::proto::ItemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ItemData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SkillItem*
Arena::CreateMaybeMessage< ::symphony::proto::SkillItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SkillItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
