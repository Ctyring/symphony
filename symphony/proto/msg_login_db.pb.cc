// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_login_db.proto

#include "symphony/proto/msg_login_db.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR DBRoleData::DBRoleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_.actime_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.carrerid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.exp_)*/int64_t{0}
  , /*decltype(_impl_.langid_)*/0
  , /*decltype(_impl_.viplvl_)*/0
  , /*decltype(_impl_.fightvalue_)*/int64_t{0}
  , /*decltype(_impl_.vipexp_)*/0
  , /*decltype(_impl_.citycopyid_)*/0
  , /*decltype(_impl_.createtime_)*/uint64_t{0u}
  , /*decltype(_impl_.logontime_)*/uint64_t{0u}
  , /*decltype(_impl_.logofftime_)*/uint64_t{0u}
  , /*decltype(_impl_.guildid_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.onlinetime_)*/0u} {}
struct DBRoleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBRoleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBRoleDataDefaultTypeInternal() {}
  union {
    DBRoleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBRoleDataDefaultTypeInternal _DBRoleData_default_instance_;
PROTOBUF_CONSTEXPR DBBagItem::DBBagItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.itemguid_)*/uint64_t{0u}
  , /*decltype(_impl_.count_)*/int64_t{0}
  , /*decltype(_impl_.itemid_)*/0u
  , /*decltype(_impl_.bind_)*/0
  , /*decltype(_impl_.status_)*/0} {}
struct DBBagItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBBagItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBBagItemDefaultTypeInternal() {}
  union {
    DBBagItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBBagItemDefaultTypeInternal _DBBagItem_default_instance_;
PROTOBUF_CONSTEXPR DBBagData::DBBagData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBBagDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBBagDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBBagDataDefaultTypeInternal() {}
  union {
    DBBagData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBBagDataDefaultTypeInternal _DBBagData_default_instance_;
PROTOBUF_CONSTEXPR DBCopyItem::DBCopyItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.copyid_)*/0u
  , /*decltype(_impl_.starnum_)*/0
  , /*decltype(_impl_.battlecnt_)*/0
  , /*decltype(_impl_.resetcnt_)*/0
  , /*decltype(_impl_.battletime_)*/uint64_t{0u}
  , /*decltype(_impl_.resettime_)*/uint64_t{0u}} {}
struct DBCopyItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBCopyItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBCopyItemDefaultTypeInternal() {}
  union {
    DBCopyItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBCopyItemDefaultTypeInternal _DBCopyItem_default_instance_;
PROTOBUF_CONSTEXPR DBChapterItem::DBChapterItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.copytype_)*/0u
  , /*decltype(_impl_.chapterid_)*/0u
  , /*decltype(_impl_.staraward_)*/0u
  , /*decltype(_impl_.sceneaward_)*/0u} {}
struct DBChapterItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBChapterItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBChapterItemDefaultTypeInternal() {}
  union {
    DBChapterItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBChapterItemDefaultTypeInternal _DBChapterItem_default_instance_;
PROTOBUF_CONSTEXPR DBCopyData::DBCopyData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.copylist_)*/{}
  , /*decltype(_impl_.chapterlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBCopyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBCopyDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBCopyDataDefaultTypeInternal() {}
  union {
    DBCopyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBCopyDataDefaultTypeInternal _DBCopyData_default_instance_;
PROTOBUF_CONSTEXPR DBEquipItem::DBEquipItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.equipid_)*/0
  , /*decltype(_impl_.strengthlvl_)*/0
  , /*decltype(_impl_.refinelevel_)*/0
  , /*decltype(_impl_.starlevel_)*/0
  , /*decltype(_impl_.refineexp_)*/0
  , /*decltype(_impl_.starexp_)*/0
  , /*decltype(_impl_.isusing_)*/false} {}
struct DBEquipItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBEquipItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBEquipItemDefaultTypeInternal() {}
  union {
    DBEquipItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBEquipItemDefaultTypeInternal _DBEquipItem_default_instance_;
PROTOBUF_CONSTEXPR DBEquipData::DBEquipData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equiplist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBEquipDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBEquipDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBEquipDataDefaultTypeInternal() {}
  union {
    DBEquipData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBEquipDataDefaultTypeInternal _DBEquipData_default_instance_;
PROTOBUF_CONSTEXPR DBGemItem::DBGemItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.gemid_)*/0
  , /*decltype(_impl_.strengthlvl_)*/0
  , /*decltype(_impl_.refinelevel_)*/0
  , /*decltype(_impl_.starlevel_)*/0
  , /*decltype(_impl_.refineexp_)*/0
  , /*decltype(_impl_.starexp_)*/0
  , /*decltype(_impl_.pos_)*/0} {}
struct DBGemItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBGemItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBGemItemDefaultTypeInternal() {}
  union {
    DBGemItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBGemItemDefaultTypeInternal _DBGemItem_default_instance_;
PROTOBUF_CONSTEXPR DBGemData::DBGemData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gemlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBGemDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBGemDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBGemDataDefaultTypeInternal() {}
  union {
    DBGemData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBGemDataDefaultTypeInternal _DBGemData_default_instance_;
PROTOBUF_CONSTEXPR DBSkillItem::DBSkillItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.skillid_)*/0u
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.keypos_)*/0} {}
struct DBSkillItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBSkillItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBSkillItemDefaultTypeInternal() {}
  union {
    DBSkillItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBSkillItemDefaultTypeInternal _DBSkillItem_default_instance_;
PROTOBUF_CONSTEXPR DBSkillData::DBSkillData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skilllist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBSkillDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBSkillDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBSkillDataDefaultTypeInternal() {}
  union {
    DBSkillData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBSkillDataDefaultTypeInternal _DBSkillData_default_instance_;
PROTOBUF_CONSTEXPR DBPetItem::DBPetItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.petid_)*/0
  , /*decltype(_impl_.strengthlvl_)*/0
  , /*decltype(_impl_.refinelevel_)*/0
  , /*decltype(_impl_.starlevel_)*/0
  , /*decltype(_impl_.isusing_)*/false} {}
struct DBPetItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPetItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPetItemDefaultTypeInternal() {}
  union {
    DBPetItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPetItemDefaultTypeInternal _DBPetItem_default_instance_;
PROTOBUF_CONSTEXPR DBPetData::DBPetData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.petlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBPetDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPetDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPetDataDefaultTypeInternal() {}
  union {
    DBPetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPetDataDefaultTypeInternal _DBPetData_default_instance_;
PROTOBUF_CONSTEXPR DBMountItem::DBMountItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.mountid_)*/0
  , /*decltype(_impl_.strengthlvl_)*/0
  , /*decltype(_impl_.refinelevel_)*/0
  , /*decltype(_impl_.starlevel_)*/0
  , /*decltype(_impl_.isusing_)*/false} {}
struct DBMountItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBMountItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBMountItemDefaultTypeInternal() {}
  union {
    DBMountItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBMountItemDefaultTypeInternal _DBMountItem_default_instance_;
PROTOBUF_CONSTEXPR DBMountData::DBMountData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mountlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBMountDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBMountDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBMountDataDefaultTypeInternal() {}
  union {
    DBMountData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBMountDataDefaultTypeInternal _DBMountData_default_instance_;
PROTOBUF_CONSTEXPR DBPartnerItem::DBPartnerItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.partnerid_)*/0
  , /*decltype(_impl_.strengthlvl_)*/0
  , /*decltype(_impl_.refinelevel_)*/0
  , /*decltype(_impl_.starlevel_)*/0
  , /*decltype(_impl_.setpos_)*/0} {}
struct DBPartnerItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPartnerItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPartnerItemDefaultTypeInternal() {}
  union {
    DBPartnerItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPartnerItemDefaultTypeInternal _DBPartnerItem_default_instance_;
PROTOBUF_CONSTEXPR DBPartnerData::DBPartnerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partnerlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBPartnerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBPartnerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBPartnerDataDefaultTypeInternal() {}
  union {
    DBPartnerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBPartnerDataDefaultTypeInternal _DBPartnerData_default_instance_;
PROTOBUF_CONSTEXPR DBTaskItem::DBTaskItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.taskid_)*/0u
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.progress_)*/0} {}
struct DBTaskItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBTaskItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBTaskItemDefaultTypeInternal() {}
  union {
    DBTaskItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBTaskItemDefaultTypeInternal _DBTaskItem_default_instance_;
PROTOBUF_CONSTEXPR DBTaskData::DBTaskData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasklist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBTaskDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBTaskDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBTaskDataDefaultTypeInternal() {}
  union {
    DBTaskData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBTaskDataDefaultTypeInternal _DBTaskData_default_instance_;
PROTOBUF_CONSTEXPR DBMailItem::DBMailItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sender_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.items_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.guid_)*/uint64_t{0u}
  , /*decltype(_impl_.groupid_)*/uint64_t{0u}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.senderid_)*/uint64_t{0u}
  , /*decltype(_impl_.mailtype_)*/0u
  , /*decltype(_impl_.status_)*/0u} {}
struct DBMailItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBMailItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBMailItemDefaultTypeInternal() {}
  union {
    DBMailItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBMailItemDefaultTypeInternal _DBMailItem_default_instance_;
PROTOBUF_CONSTEXPR DBMailData::DBMailData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.maillist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBMailDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBMailDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBMailDataDefaultTypeInternal() {}
  union {
    DBMailData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBMailDataDefaultTypeInternal _DBMailData_default_instance_;
PROTOBUF_CONSTEXPR DBActivityItem::DBActivityItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.activityid_)*/0u
  , /*decltype(_impl_.activitytype_)*/0u
  , /*decltype(_impl_.jointime_)*/0u
  , /*decltype(_impl_.datalen_)*/0u} {}
struct DBActivityItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBActivityItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBActivityItemDefaultTypeInternal() {}
  union {
    DBActivityItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBActivityItemDefaultTypeInternal _DBActivityItem_default_instance_;
PROTOBUF_CONSTEXPR DBActivityData::DBActivityData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.activitylist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBActivityDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBActivityDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBActivityDataDefaultTypeInternal() {}
  union {
    DBActivityData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBActivityDataDefaultTypeInternal _DBActivityData_default_instance_;
PROTOBUF_CONSTEXPR DBCounterItem::DBCounterItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.counterid_)*/0u
  , /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_.value_)*/int64_t{0}
  , /*decltype(_impl_.time_)*/uint64_t{0u}
  , /*decltype(_impl_.param1_)*/0u
  , /*decltype(_impl_.param2_)*/0u} {}
struct DBCounterItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBCounterItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBCounterItemDefaultTypeInternal() {}
  union {
    DBCounterItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBCounterItemDefaultTypeInternal _DBCounterItem_default_instance_;
PROTOBUF_CONSTEXPR DBCounterData::DBCounterData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counterlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBCounterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBCounterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBCounterDataDefaultTypeInternal() {}
  union {
    DBCounterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBCounterDataDefaultTypeInternal _DBCounterData_default_instance_;
PROTOBUF_CONSTEXPR DBFriendItem::DBFriendItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.friendid_)*/uint64_t{0u}} {}
struct DBFriendItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBFriendItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBFriendItemDefaultTypeInternal() {}
  union {
    DBFriendItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBFriendItemDefaultTypeInternal _DBFriendItem_default_instance_;
PROTOBUF_CONSTEXPR DBFriendData::DBFriendData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friendlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DBFriendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBFriendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBFriendDataDefaultTypeInternal() {}
  union {
    DBFriendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBFriendDataDefaultTypeInternal _DBFriendData_default_instance_;
PROTOBUF_CONSTEXPR DBRoleLoginAck::DBRoleLoginAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roledata_)*/nullptr
  , /*decltype(_impl_.bagdata_)*/nullptr
  , /*decltype(_impl_.copydata_)*/nullptr
  , /*decltype(_impl_.equipdata_)*/nullptr
  , /*decltype(_impl_.gemdata_)*/nullptr
  , /*decltype(_impl_.petdata_)*/nullptr
  , /*decltype(_impl_.partnerdata_)*/nullptr
  , /*decltype(_impl_.taskdata_)*/nullptr
  , /*decltype(_impl_.maildata_)*/nullptr
  , /*decltype(_impl_.mountdata_)*/nullptr
  , /*decltype(_impl_.activitydata_)*/nullptr
  , /*decltype(_impl_.counterdata_)*/nullptr
  , /*decltype(_impl_.frienddata_)*/nullptr
  , /*decltype(_impl_.skilldata_)*/nullptr
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u} {}
struct DBRoleLoginAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DBRoleLoginAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DBRoleLoginAckDefaultTypeInternal() {}
  union {
    DBRoleLoginAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DBRoleLoginAckDefaultTypeInternal _DBRoleLoginAck_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[29];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.carrerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.langid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.viplvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.vipexp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.fightvalue_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.citycopyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.action_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.actime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.createtime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.logontime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.logofftime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.guildid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleData, _impl_.onlinetime_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  7,
  9,
  8,
  10,
  ~0u,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.itemguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.itemid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.bind_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagItem, _impl_.status_),
  0,
  1,
  2,
  4,
  3,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBBagData, _impl_.itemlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.starnum_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.battlecnt_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.resetcnt_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.battletime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyItem, _impl_.resettime_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_.copytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_.chapterid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_.staraward_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBChapterItem, _impl_.sceneaward_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyData, _impl_.copylist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCopyData, _impl_.chapterlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.equipid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.refinelevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.starlevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.refineexp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.starexp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipItem, _impl_.isusing_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBEquipData, _impl_.equiplist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.gemid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.refinelevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.starlevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.refineexp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.starexp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemItem, _impl_.pos_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBGemData, _impl_.gemlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _impl_.skillid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillItem, _impl_.keypos_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBSkillData, _impl_.skilllist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.petid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.refinelevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.starlevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetItem, _impl_.isusing_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPetData, _impl_.petlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.mountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.refinelevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.starlevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountItem, _impl_.isusing_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMountData, _impl_.mountlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.partnerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.strengthlvl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.refinelevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.starlevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerItem, _impl_.setpos_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBPartnerData, _impl_.partnerlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _impl_.taskid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskItem, _impl_.progress_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBTaskData, _impl_.tasklist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.groupid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.senderid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.sender_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.mailtype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.content_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailItem, _impl_.items_),
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBMailData, _impl_.maillist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.activityid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.activitytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.jointime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.datalen_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityItem, _impl_.data_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBActivityData, _impl_.activitylist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.counterid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.param1_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterItem, _impl_.param2_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBCounterData, _impl_.counterlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendItem, _impl_.friendid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBFriendData, _impl_.friendlist_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.roledata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.bagdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.copydata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.equipdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.gemdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.petdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.partnerdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.taskdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.maildata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.mountdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.activitydata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.counterdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.frienddata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::DBRoleLoginAck, _impl_.skilldata_),
  15,
  14,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, -1, sizeof(::symphony::proto::DBRoleData)},
  { 44, 57, -1, sizeof(::symphony::proto::DBBagItem)},
  { 64, -1, -1, sizeof(::symphony::proto::DBBagData)},
  { 71, 84, -1, sizeof(::symphony::proto::DBCopyItem)},
  { 91, 102, -1, sizeof(::symphony::proto::DBChapterItem)},
  { 107, -1, -1, sizeof(::symphony::proto::DBCopyData)},
  { 115, 130, -1, sizeof(::symphony::proto::DBEquipItem)},
  { 139, -1, -1, sizeof(::symphony::proto::DBEquipData)},
  { 146, 161, -1, sizeof(::symphony::proto::DBGemItem)},
  { 170, -1, -1, sizeof(::symphony::proto::DBGemData)},
  { 177, 187, -1, sizeof(::symphony::proto::DBSkillItem)},
  { 191, -1, -1, sizeof(::symphony::proto::DBSkillData)},
  { 198, 211, -1, sizeof(::symphony::proto::DBPetItem)},
  { 218, -1, -1, sizeof(::symphony::proto::DBPetData)},
  { 225, 238, -1, sizeof(::symphony::proto::DBMountItem)},
  { 245, -1, -1, sizeof(::symphony::proto::DBMountData)},
  { 252, 265, -1, sizeof(::symphony::proto::DBPartnerItem)},
  { 272, -1, -1, sizeof(::symphony::proto::DBPartnerData)},
  { 279, 289, -1, sizeof(::symphony::proto::DBTaskItem)},
  { 293, -1, -1, sizeof(::symphony::proto::DBTaskData)},
  { 300, 317, -1, sizeof(::symphony::proto::DBMailItem)},
  { 328, -1, -1, sizeof(::symphony::proto::DBMailData)},
  { 335, 347, -1, sizeof(::symphony::proto::DBActivityItem)},
  { 353, -1, -1, sizeof(::symphony::proto::DBActivityData)},
  { 360, 373, -1, sizeof(::symphony::proto::DBCounterItem)},
  { 380, -1, -1, sizeof(::symphony::proto::DBCounterData)},
  { 387, 395, -1, sizeof(::symphony::proto::DBFriendItem)},
  { 397, -1, -1, sizeof(::symphony::proto::DBFriendData)},
  { 404, 426, -1, sizeof(::symphony::proto::DBRoleLoginAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_DBRoleData_default_instance_._instance,
  &::symphony::proto::_DBBagItem_default_instance_._instance,
  &::symphony::proto::_DBBagData_default_instance_._instance,
  &::symphony::proto::_DBCopyItem_default_instance_._instance,
  &::symphony::proto::_DBChapterItem_default_instance_._instance,
  &::symphony::proto::_DBCopyData_default_instance_._instance,
  &::symphony::proto::_DBEquipItem_default_instance_._instance,
  &::symphony::proto::_DBEquipData_default_instance_._instance,
  &::symphony::proto::_DBGemItem_default_instance_._instance,
  &::symphony::proto::_DBGemData_default_instance_._instance,
  &::symphony::proto::_DBSkillItem_default_instance_._instance,
  &::symphony::proto::_DBSkillData_default_instance_._instance,
  &::symphony::proto::_DBPetItem_default_instance_._instance,
  &::symphony::proto::_DBPetData_default_instance_._instance,
  &::symphony::proto::_DBMountItem_default_instance_._instance,
  &::symphony::proto::_DBMountData_default_instance_._instance,
  &::symphony::proto::_DBPartnerItem_default_instance_._instance,
  &::symphony::proto::_DBPartnerData_default_instance_._instance,
  &::symphony::proto::_DBTaskItem_default_instance_._instance,
  &::symphony::proto::_DBTaskData_default_instance_._instance,
  &::symphony::proto::_DBMailItem_default_instance_._instance,
  &::symphony::proto::_DBMailData_default_instance_._instance,
  &::symphony::proto::_DBActivityItem_default_instance_._instance,
  &::symphony::proto::_DBActivityData_default_instance_._instance,
  &::symphony::proto::_DBCounterItem_default_instance_._instance,
  &::symphony::proto::_DBCounterData_default_instance_._instance,
  &::symphony::proto::_DBFriendItem_default_instance_._instance,
  &::symphony::proto::_DBFriendData_default_instance_._instance,
  &::symphony::proto::_DBRoleLoginAck_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!symphony/proto/msg_login_db.proto\022\016sym"
  "phony.proto\"\324\002\n\nDBRoleData\022\021\n\tAccountID\030"
  "\001 \001(\004\022\016\n\006RoleID\030\002 \001(\004\022\020\n\010CarrerID\030\003 \001(\005\022"
  "\r\n\005Level\030\004 \001(\005\022\013\n\003Exp\030\005 \001(\003\022\014\n\004Name\030\006 \001("
  "\t\022\016\n\006LangID\030\007 \001(\005\022\016\n\006VipLvl\030\010 \001(\005\022\016\n\006Vip"
  "Exp\030\t \001(\005\022\022\n\nFightValue\030\n \001(\003\022\022\n\nCityCop"
  "yID\030\013 \001(\005\022\016\n\006Action\030\014 \003(\003\022\016\n\006Actime\030\r \003("
  "\003\022\022\n\nCreateTime\030\016 \001(\004\022\021\n\tLogonTime\030\017 \001(\004"
  "\022\022\n\nLogoffTime\030\020 \001(\004\022\017\n\007GuildID\030\021 \001(\004\022\017\n"
  "\007Channel\030\022 \001(\005\022\022\n\nOnlineTime\030\023 \001(\r\"x\n\tDB"
  "BagItem\022\014\n\004Guid\030\001 \001(\004\022\016\n\006RoleID\030\002 \001(\004\022\020\n"
  "\010ItemGuid\030\003 \001(\004\022\016\n\006ItemID\030\004 \001(\r\022\r\n\005Count"
  "\030\005 \001(\003\022\014\n\004Bind\030\006 \001(\005\022\016\n\006Status\030\007 \001(\005\"8\n\t"
  "DBBagData\022+\n\010ItemList\030\001 \003(\0132\031.symphony.p"
  "roto.DBBagItem\"\211\001\n\nDBCopyItem\022\016\n\006RoleID\030"
  "\001 \001(\004\022\016\n\006CopyID\030\002 \001(\r\022\017\n\007StarNum\030\003 \001(\005\022\021"
  "\n\tBattleCnt\030\004 \001(\005\022\020\n\010ResetCnt\030\005 \001(\005\022\022\n\nB"
  "attleTime\030\006 \001(\004\022\021\n\tResetTime\030\007 \001(\004\"k\n\rDB"
  "ChapterItem\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010CopyType\030"
  "\002 \001(\r\022\021\n\tChapterID\030\003 \001(\r\022\021\n\tStarAward\030\004 "
  "\001(\r\022\022\n\nSceneAward\030\005 \001(\r\"n\n\nDBCopyData\022,\n"
  "\010CopyList\030\001 \003(\0132\032.symphony.proto.DBCopyI"
  "tem\0222\n\013ChapterList\030\002 \003(\0132\035.symphony.prot"
  "o.DBChapterItem\"\256\001\n\013DBEquipItem\022\016\n\006RoleI"
  "D\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\017\n\007EquipID\030\003 \001(\005\022\023"
  "\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineLevel\030\005 \001(\005"
  "\022\021\n\tStarLevel\030\006 \001(\005\022\021\n\tRefineExp\030\007 \001(\005\022\017"
  "\n\007StarExp\030\010 \001(\005\022\017\n\007IsUsing\030\t \001(\010\"=\n\013DBEq"
  "uipData\022.\n\tEquipList\030\001 \003(\0132\033.symphony.pr"
  "oto.DBEquipItem\"\246\001\n\tDBGemItem\022\016\n\006RoleID\030"
  "\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\r\n\005GemID\030\003 \001(\005\022\023\n\013St"
  "rengthLvl\030\004 \001(\005\022\023\n\013RefineLevel\030\005 \001(\005\022\021\n\t"
  "StarLevel\030\006 \001(\005\022\021\n\tRefineExp\030\007 \001(\005\022\017\n\007St"
  "arExp\030\010 \001(\005\022\013\n\003Pos\030\t \001(\005\"7\n\tDBGemData\022*\n"
  "\007GemList\030\001 \003(\0132\031.symphony.proto.DBGemIte"
  "m\"M\n\013DBSkillItem\022\016\n\006RoleID\030\001 \001(\004\022\017\n\007Skil"
  "lID\030\002 \001(\r\022\r\n\005Level\030\003 \001(\005\022\016\n\006KeyPos\030\004 \001(\005"
  "\"=\n\013DBSkillData\022.\n\tSkillList\030\001 \003(\0132\033.sym"
  "phony.proto.DBSkillItem\"\206\001\n\tDBPetItem\022\016\n"
  "\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\r\n\005PetID\030\003 \001"
  "(\005\022\023\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineLevel\030\005"
  " \001(\005\022\021\n\tStarLevel\030\006 \001(\005\022\017\n\007IsUsing\030\007 \001(\010"
  "\"7\n\tDBPetData\022*\n\007PetList\030\001 \003(\0132\031.symphon"
  "y.proto.DBPetItem\"\212\001\n\013DBMountItem\022\016\n\006Rol"
  "eID\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\017\n\007MountID\030\003 \001(\005"
  "\022\023\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineLevel\030\005 \001"
  "(\005\022\021\n\tStarLevel\030\006 \001(\005\022\017\n\007IsUsing\030\007 \001(\010\"="
  "\n\013DBMountData\022.\n\tMountList\030\001 \003(\0132\033.symph"
  "ony.proto.DBMountItem\"\215\001\n\rDBPartnerItem\022"
  "\016\n\006RoleID\030\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\021\n\tPartner"
  "ID\030\003 \001(\005\022\023\n\013StrengthLvl\030\004 \001(\005\022\023\n\013RefineL"
  "evel\030\005 \001(\005\022\021\n\tStarLevel\030\006 \001(\005\022\016\n\006SetPos\030"
  "\007 \001(\005\"C\n\rDBPartnerData\0222\n\013PartnerList\030\001 "
  "\003(\0132\035.symphony.proto.DBPartnerItem\"N\n\nDB"
  "TaskItem\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006TaskID\030\002 \001(\r"
  "\022\016\n\006Status\030\003 \001(\005\022\020\n\010Progress\030\004 \001(\005\":\n\nDB"
  "TaskData\022,\n\010TaskList\030\001 \003(\0132\032.symphony.pr"
  "oto.DBTaskItem\"\274\001\n\nDBMailItem\022\016\n\006RoleID\030"
  "\001 \001(\004\022\014\n\004Guid\030\002 \001(\004\022\017\n\007GroupID\030\003 \001(\004\022\014\n\004"
  "Time\030\004 \001(\004\022\020\n\010SenderID\030\005 \001(\004\022\016\n\006Sender\030\006"
  " \001(\t\022\020\n\010MailType\030\007 \001(\r\022\016\n\006Status\030\010 \001(\r\022\r"
  "\n\005Title\030\t \001(\t\022\017\n\007Content\030\n \001(\t\022\r\n\005Items\030"
  "\013 \001(\014\":\n\nDBMailData\022,\n\010MailList\030\001 \003(\0132\032."
  "symphony.proto.DBMailItem\"{\n\016DBActivityI"
  "tem\022\016\n\006RoleID\030\001 \001(\004\022\022\n\nActivityID\030\002 \001(\r\022"
  "\024\n\014ActivityType\030\003 \001(\r\022\020\n\010JoinTime\030\004 \001(\r\022"
  "\017\n\007DataLen\030\005 \001(\r\022\014\n\004Data\030\006 \001(\014\"F\n\016DBActi"
  "vityData\0224\n\014ActivityList\030\001 \003(\0132\036.symphon"
  "y.proto.DBActivityItem\"~\n\rDBCounterItem\022"
  "\016\n\006RoleID\030\001 \001(\004\022\021\n\tCounterID\030\002 \001(\r\022\r\n\005In"
  "dex\030\003 \001(\r\022\r\n\005Value\030\004 \001(\003\022\014\n\004Time\030\005 \001(\004\022\016"
  "\n\006Param1\030\006 \001(\r\022\016\n\006Param2\030\007 \001(\r\"C\n\rDBCoun"
  "terData\0222\n\013CounterList\030\001 \003(\0132\035.symphony."
  "proto.DBCounterItem\"0\n\014DBFriendItem\022\016\n\006R"
  "oleID\030\001 \001(\004\022\020\n\010FriendID\030\002 \001(\004\"@\n\014DBFrien"
  "dData\0220\n\nFriendList\030\001 \003(\0132\034.symphony.pro"
  "to.DBFriendItem\"\315\005\n\016DBRoleLoginAck\022\017\n\007Re"
  "tCode\030\001 \001(\r\022\016\n\006RoleID\030\002 \001(\004\022,\n\010RoleData\030"
  "\003 \001(\0132\032.symphony.proto.DBRoleData\022*\n\007Bag"
  "Data\030\004 \001(\0132\031.symphony.proto.DBBagData\022,\n"
  "\010CopyData\030\005 \001(\0132\032.symphony.proto.DBCopyD"
  "ata\022.\n\tEquipData\030\006 \001(\0132\033.symphony.proto."
  "DBEquipData\022*\n\007GemData\030\007 \001(\0132\031.symphony."
  "proto.DBGemData\022*\n\007PetData\030\010 \001(\0132\031.symph"
  "ony.proto.DBPetData\0222\n\013PartnerData\030\t \001(\013"
  "2\035.symphony.proto.DBPartnerData\022,\n\010TaskD"
  "ata\030\n \001(\0132\032.symphony.proto.DBTaskData\022,\n"
  "\010MailData\030\013 \001(\0132\032.symphony.proto.DBMailD"
  "ata\022.\n\tMountData\030\014 \001(\0132\033.symphony.proto."
  "DBMountData\0224\n\014ActivityData\030\r \001(\0132\036.symp"
  "hony.proto.DBActivityData\0222\n\013CounterData"
  "\030\016 \001(\0132\035.symphony.proto.DBCounterData\0220\n"
  "\nFriendData\030\017 \001(\0132\034.symphony.proto.DBFri"
  "endData\022.\n\tSkillData\030\020 \001(\0132\033.symphony.pr"
  "oto.DBSkillData"
  ;
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto = {
    false, false, 3775, descriptor_table_protodef_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto,
    "symphony/proto/msg_login_db.proto",
    &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once, nullptr, 0, 29,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto, file_level_enum_descriptors_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto,
    file_level_service_descriptors_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto(&descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class DBRoleData::_Internal {
 public:
  using HasBits = decltype(std::declval<DBRoleData>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_carrerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_langid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_viplvl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_vipexp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fightvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_citycopyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_createtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_logontime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_logofftime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_guildid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_onlinetime(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

DBRoleData::DBRoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBRoleData)
}
DBRoleData::DBRoleData(const DBRoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBRoleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_){from._impl_.action_}
    , decltype(_impl_.actime_){from._impl_.actime_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.carrerid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.langid_){}
    , decltype(_impl_.viplvl_){}
    , decltype(_impl_.fightvalue_){}
    , decltype(_impl_.vipexp_){}
    , decltype(_impl_.citycopyid_){}
    , decltype(_impl_.createtime_){}
    , decltype(_impl_.logontime_){}
    , decltype(_impl_.logofftime_){}
    , decltype(_impl_.guildid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.onlinetime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.onlinetime_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.onlinetime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBRoleData)
}

inline void DBRoleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_){arena}
    , decltype(_impl_.actime_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.carrerid_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.exp_){int64_t{0}}
    , decltype(_impl_.langid_){0}
    , decltype(_impl_.viplvl_){0}
    , decltype(_impl_.fightvalue_){int64_t{0}}
    , decltype(_impl_.vipexp_){0}
    , decltype(_impl_.citycopyid_){0}
    , decltype(_impl_.createtime_){uint64_t{0u}}
    , decltype(_impl_.logontime_){uint64_t{0u}}
    , decltype(_impl_.logofftime_){uint64_t{0u}}
    , decltype(_impl_.guildid_){uint64_t{0u}}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.onlinetime_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBRoleData::~DBRoleData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBRoleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBRoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_.~RepeatedField();
  _impl_.actime_.~RepeatedField();
  _impl_.name_.Destroy();
}

void DBRoleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBRoleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.action_.Clear();
  _impl_.actime_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.viplvl_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.viplvl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.fightvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.fightvalue_)) + sizeof(_impl_.channel_));
  }
  _impl_.onlinetime_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRoleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 CarrerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_carrerid(&has_bits);
          _impl_.carrerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 Exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_exp(&has_bits);
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.DBRoleData.Name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 LangID = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_langid(&has_bits);
          _impl_.langid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 VipLvl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_viplvl(&has_bits);
          _impl_.viplvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 VipExp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_vipexp(&has_bits);
          _impl_.vipexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 FightValue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_fightvalue(&has_bits);
          _impl_.fightvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 CityCopyID = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_citycopyid(&has_bits);
          _impl_.citycopyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_action(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_action(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 Actime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_actime(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_actime(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 CreateTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_createtime(&has_bits);
          _impl_.createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 LogonTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_logontime(&has_bits);
          _impl_.logontime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 LogoffTime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_logofftime(&has_bits);
          _impl_.logofftime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 GuildID = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_guildid(&has_bits);
          _impl_.guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Channel = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 OnlineTime = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_onlinetime(&has_bits);
          _impl_.onlinetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRoleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBRoleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 RoleID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // optional int32 CarrerID = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrerid(), target);
  }

  // optional int32 Level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // optional int64 Exp = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_exp(), target);
  }

  // optional string Name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.DBRoleData.Name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name(), target);
  }

  // optional int32 LangID = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_langid(), target);
  }

  // optional int32 VipLvl = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_viplvl(), target);
  }

  // optional int32 VipExp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_vipexp(), target);
  }

  // optional int64 FightValue = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_fightvalue(), target);
  }

  // optional int32 CityCopyID = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_citycopyid(), target);
  }

  // repeated int64 Action = 12;
  for (int i = 0, n = this->_internal_action_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_action(i), target);
  }

  // repeated int64 Actime = 13;
  for (int i = 0, n = this->_internal_actime_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_actime(i), target);
  }

  // optional uint64 CreateTime = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(14, this->_internal_createtime(), target);
  }

  // optional uint64 LogonTime = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_logontime(), target);
  }

  // optional uint64 LogoffTime = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(16, this->_internal_logofftime(), target);
  }

  // optional uint64 GuildID = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(17, this->_internal_guildid(), target);
  }

  // optional int32 Channel = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_channel(), target);
  }

  // optional uint32 OnlineTime = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_onlinetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBRoleData)
  return target;
}

size_t DBRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBRoleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 Action = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.action_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_action_size());
    total_size += data_size;
  }

  // repeated int64 Actime = 13;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.actime_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_actime_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 AccountID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional uint64 RoleID = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional int32 CarrerID = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrerid());
    }

    // optional int32 Level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int64 Exp = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_exp());
    }

    // optional int32 LangID = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_langid());
    }

    // optional int32 VipLvl = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_viplvl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 FightValue = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_fightvalue());
    }

    // optional int32 VipExp = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vipexp());
    }

    // optional int32 CityCopyID = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_citycopyid());
    }

    // optional uint64 CreateTime = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_createtime());
    }

    // optional uint64 LogonTime = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_logontime());
    }

    // optional uint64 LogoffTime = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_logofftime());
    }

    // optional uint64 GuildID = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_guildid());
    }

    // optional int32 Channel = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_channel());
    }

  }
  // optional uint32 OnlineTime = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_onlinetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRoleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBRoleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRoleData::GetClassData() const { return &_class_data_; }


void DBRoleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBRoleData*>(&to_msg);
  auto& from = static_cast<const DBRoleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBRoleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.action_.MergeFrom(from._impl_.action_);
  _this->_impl_.actime_.MergeFrom(from._impl_.actime_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.carrerid_ = from._impl_.carrerid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.exp_ = from._impl_.exp_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.langid_ = from._impl_.langid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.viplvl_ = from._impl_.viplvl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.fightvalue_ = from._impl_.fightvalue_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.vipexp_ = from._impl_.vipexp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.citycopyid_ = from._impl_.citycopyid_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.createtime_ = from._impl_.createtime_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.logontime_ = from._impl_.logontime_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.logofftime_ = from._impl_.logofftime_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.guildid_ = from._impl_.guildid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_onlinetime(from._internal_onlinetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRoleData::CopyFrom(const DBRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleData::IsInitialized() const {
  return true;
}

void DBRoleData::InternalSwap(DBRoleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.action_.InternalSwap(&other->_impl_.action_);
  _impl_.actime_.InternalSwap(&other->_impl_.actime_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBRoleData, _impl_.onlinetime_)
      + sizeof(DBRoleData::_impl_.onlinetime_)
      - PROTOBUF_FIELD_OFFSET(DBRoleData, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRoleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[0]);
}

// ===================================================================

class DBBagItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBBagItem>()._impl_._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_itemguid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bind(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBBagItem::DBBagItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBBagItem)
}
DBBagItem::DBBagItem(const DBBagItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBBagItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.itemguid_){}
    , decltype(_impl_.count_){}
    , decltype(_impl_.itemid_){}
    , decltype(_impl_.bind_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guid_, &from._impl_.guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.guid_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBBagItem)
}

inline void DBBagItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.itemguid_){uint64_t{0u}}
    , decltype(_impl_.count_){int64_t{0}}
    , decltype(_impl_.itemid_){0u}
    , decltype(_impl_.bind_){0}
    , decltype(_impl_.status_){0}
  };
}

DBBagItem::~DBBagItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBBagItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBBagItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBBagItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBBagItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBBagItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.guid_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBBagItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 Guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ItemGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_itemguid(&has_bits);
          _impl_.itemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ItemID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_itemid(&has_bits);
          _impl_.itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 Count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Bind = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_bind(&has_bits);
          _impl_.bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBBagItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBBagItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 Guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_guid(), target);
  }

  // optional uint64 RoleID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // optional uint64 ItemGuid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_itemguid(), target);
  }

  // optional uint32 ItemID = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_itemid(), target);
  }

  // optional int64 Count = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_count(), target);
  }

  // optional int32 Bind = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bind(), target);
  }

  // optional int32 Status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBBagItem)
  return target;
}

size_t DBBagItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBBagItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 Guid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional uint64 RoleID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 ItemGuid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_itemguid());
    }

    // optional int64 Count = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
    }

    // optional uint32 ItemID = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_itemid());
    }

    // optional int32 Bind = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bind());
    }

    // optional int32 Status = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBBagItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBBagItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBBagItem::GetClassData() const { return &_class_data_; }


void DBBagItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBBagItem*>(&to_msg);
  auto& from = static_cast<const DBBagItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBBagItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.itemguid_ = from._impl_.itemguid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.itemid_ = from._impl_.itemid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bind_ = from._impl_.bind_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBBagItem::CopyFrom(const DBBagItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBBagItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBBagItem::IsInitialized() const {
  return true;
}

void DBBagItem::InternalSwap(DBBagItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBBagItem, _impl_.status_)
      + sizeof(DBBagItem::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(DBBagItem, _impl_.guid_)>(
          reinterpret_cast<char*>(&_impl_.guid_),
          reinterpret_cast<char*>(&other->_impl_.guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBBagItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[1]);
}

// ===================================================================

class DBBagData::_Internal {
 public:
};

DBBagData::DBBagData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBBagData)
}
DBBagData::DBBagData(const DBBagData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBBagData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){from._impl_.itemlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBBagData)
}

inline void DBBagData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBBagData::~DBBagData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBBagData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBBagData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemlist_.~RepeatedPtrField();
}

void DBBagData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBBagData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBBagData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBBagData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBBagItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBBagData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBBagData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBBagItem ItemList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBBagData)
  return target;
}

size_t DBBagData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBBagData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBBagItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->_impl_.itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBBagData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBBagData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBBagData::GetClassData() const { return &_class_data_; }


void DBBagData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBBagData*>(&to_msg);
  auto& from = static_cast<const DBBagData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBBagData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemlist_.MergeFrom(from._impl_.itemlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBBagData::CopyFrom(const DBBagData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBBagData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBBagData::IsInitialized() const {
  return true;
}

void DBBagData::InternalSwap(DBBagData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemlist_.InternalSwap(&other->_impl_.itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBBagData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[2]);
}

// ===================================================================

class DBCopyItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBCopyItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copyid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battlecnt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_resetcnt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_battletime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_resettime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBCopyItem::DBCopyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBCopyItem)
}
DBCopyItem::DBCopyItem(const DBCopyItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBCopyItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.starnum_){}
    , decltype(_impl_.battlecnt_){}
    , decltype(_impl_.resetcnt_){}
    , decltype(_impl_.battletime_){}
    , decltype(_impl_.resettime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.resettime_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.resettime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBCopyItem)
}

inline void DBCopyItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.copyid_){0u}
    , decltype(_impl_.starnum_){0}
    , decltype(_impl_.battlecnt_){0}
    , decltype(_impl_.resetcnt_){0}
    , decltype(_impl_.battletime_){uint64_t{0u}}
    , decltype(_impl_.resettime_){uint64_t{0u}}
  };
}

DBCopyItem::~DBCopyItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBCopyItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBCopyItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBCopyItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBCopyItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBCopyItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resettime_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.resettime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCopyItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_copyid(&has_bits);
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_starnum(&has_bits);
          _impl_.starnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 BattleCnt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_battlecnt(&has_bits);
          _impl_.battlecnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ResetCnt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_resetcnt(&has_bits);
          _impl_.resetcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 BattleTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_battletime(&has_bits);
          _impl_.battletime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ResetTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_resettime(&has_bits);
          _impl_.resettime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBCopyItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBCopyItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 CopyID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copyid(), target);
  }

  // optional int32 StarNum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_starnum(), target);
  }

  // optional int32 BattleCnt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_battlecnt(), target);
  }

  // optional int32 ResetCnt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_resetcnt(), target);
  }

  // optional uint64 BattleTime = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_battletime(), target);
  }

  // optional uint64 ResetTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_resettime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBCopyItem)
  return target;
}

size_t DBCopyItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBCopyItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 CopyID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copyid());
    }

    // optional int32 StarNum = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starnum());
    }

    // optional int32 BattleCnt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_battlecnt());
    }

    // optional int32 ResetCnt = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_resetcnt());
    }

    // optional uint64 BattleTime = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_battletime());
    }

    // optional uint64 ResetTime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_resettime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBCopyItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBCopyItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBCopyItem::GetClassData() const { return &_class_data_; }


void DBCopyItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBCopyItem*>(&to_msg);
  auto& from = static_cast<const DBCopyItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBCopyItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.copyid_ = from._impl_.copyid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.starnum_ = from._impl_.starnum_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.battlecnt_ = from._impl_.battlecnt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.resetcnt_ = from._impl_.resetcnt_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.battletime_ = from._impl_.battletime_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.resettime_ = from._impl_.resettime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBCopyItem::CopyFrom(const DBCopyItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBCopyItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCopyItem::IsInitialized() const {
  return true;
}

void DBCopyItem::InternalSwap(DBCopyItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBCopyItem, _impl_.resettime_)
      + sizeof(DBCopyItem::_impl_.resettime_)
      - PROTOBUF_FIELD_OFFSET(DBCopyItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCopyItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[3]);
}

// ===================================================================

class DBChapterItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBChapterItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_copytype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chapterid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_staraward(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sceneaward(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DBChapterItem::DBChapterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBChapterItem)
}
DBChapterItem::DBChapterItem(const DBChapterItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBChapterItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.copytype_){}
    , decltype(_impl_.chapterid_){}
    , decltype(_impl_.staraward_){}
    , decltype(_impl_.sceneaward_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sceneaward_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.sceneaward_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBChapterItem)
}

inline void DBChapterItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.copytype_){0u}
    , decltype(_impl_.chapterid_){0u}
    , decltype(_impl_.staraward_){0u}
    , decltype(_impl_.sceneaward_){0u}
  };
}

DBChapterItem::~DBChapterItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBChapterItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBChapterItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBChapterItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBChapterItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBChapterItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.sceneaward_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.sceneaward_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBChapterItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 CopyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_copytype(&has_bits);
          _impl_.copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ChapterID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_chapterid(&has_bits);
          _impl_.chapterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 StarAward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_staraward(&has_bits);
          _impl_.staraward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 SceneAward = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_sceneaward(&has_bits);
          _impl_.sceneaward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBChapterItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBChapterItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 CopyType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_copytype(), target);
  }

  // optional uint32 ChapterID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_chapterid(), target);
  }

  // optional uint32 StarAward = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_staraward(), target);
  }

  // optional uint32 SceneAward = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sceneaward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBChapterItem)
  return target;
}

size_t DBChapterItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBChapterItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 CopyType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copytype());
    }

    // optional uint32 ChapterID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chapterid());
    }

    // optional uint32 StarAward = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_staraward());
    }

    // optional uint32 SceneAward = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sceneaward());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBChapterItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBChapterItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBChapterItem::GetClassData() const { return &_class_data_; }


void DBChapterItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBChapterItem*>(&to_msg);
  auto& from = static_cast<const DBChapterItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBChapterItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.copytype_ = from._impl_.copytype_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.chapterid_ = from._impl_.chapterid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.staraward_ = from._impl_.staraward_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sceneaward_ = from._impl_.sceneaward_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBChapterItem::CopyFrom(const DBChapterItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBChapterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBChapterItem::IsInitialized() const {
  return true;
}

void DBChapterItem::InternalSwap(DBChapterItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBChapterItem, _impl_.sceneaward_)
      + sizeof(DBChapterItem::_impl_.sceneaward_)
      - PROTOBUF_FIELD_OFFSET(DBChapterItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBChapterItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[4]);
}

// ===================================================================

class DBCopyData::_Internal {
 public:
};

DBCopyData::DBCopyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBCopyData)
}
DBCopyData::DBCopyData(const DBCopyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBCopyData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.copylist_){from._impl_.copylist_}
    , decltype(_impl_.chapterlist_){from._impl_.chapterlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBCopyData)
}

inline void DBCopyData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.copylist_){arena}
    , decltype(_impl_.chapterlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBCopyData::~DBCopyData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBCopyData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBCopyData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.copylist_.~RepeatedPtrField();
  _impl_.chapterlist_.~RepeatedPtrField();
}

void DBCopyData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBCopyData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBCopyData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.copylist_.Clear();
  _impl_.chapterlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCopyData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBCopyItem CopyList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.DBChapterItem ChapterList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chapterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBCopyData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBCopyData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBCopyItem CopyList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_copylist_size()); i < n; i++) {
    const auto& repfield = this->_internal_copylist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .symphony.proto.DBChapterItem ChapterList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chapterlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_chapterlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBCopyData)
  return target;
}

size_t DBCopyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBCopyData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBCopyItem CopyList = 1;
  total_size += 1UL * this->_internal_copylist_size();
  for (const auto& msg : this->_impl_.copylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .symphony.proto.DBChapterItem ChapterList = 2;
  total_size += 1UL * this->_internal_chapterlist_size();
  for (const auto& msg : this->_impl_.chapterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBCopyData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBCopyData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBCopyData::GetClassData() const { return &_class_data_; }


void DBCopyData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBCopyData*>(&to_msg);
  auto& from = static_cast<const DBCopyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBCopyData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.copylist_.MergeFrom(from._impl_.copylist_);
  _this->_impl_.chapterlist_.MergeFrom(from._impl_.chapterlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBCopyData::CopyFrom(const DBCopyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBCopyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCopyData::IsInitialized() const {
  return true;
}

void DBCopyData::InternalSwap(DBCopyData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.copylist_.InternalSwap(&other->_impl_.copylist_);
  _impl_.chapterlist_.InternalSwap(&other->_impl_.chapterlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCopyData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[5]);
}

// ===================================================================

class DBEquipItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBEquipItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_equipid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strengthlvl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_refinelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_refineexp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_starexp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isusing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

DBEquipItem::DBEquipItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBEquipItem)
}
DBEquipItem::DBEquipItem(const DBEquipItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBEquipItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.equipid_){}
    , decltype(_impl_.strengthlvl_){}
    , decltype(_impl_.refinelevel_){}
    , decltype(_impl_.starlevel_){}
    , decltype(_impl_.refineexp_){}
    , decltype(_impl_.starexp_){}
    , decltype(_impl_.isusing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isusing_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.isusing_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBEquipItem)
}

inline void DBEquipItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.equipid_){0}
    , decltype(_impl_.strengthlvl_){0}
    , decltype(_impl_.refinelevel_){0}
    , decltype(_impl_.starlevel_){0}
    , decltype(_impl_.refineexp_){0}
    , decltype(_impl_.starexp_){0}
    , decltype(_impl_.isusing_){false}
  };
}

DBEquipItem::~DBEquipItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBEquipItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBEquipItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBEquipItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBEquipItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBEquipItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.starexp_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.starexp_));
  }
  _impl_.isusing_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBEquipItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 EquipID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_equipid(&has_bits);
          _impl_.equipid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_strengthlvl(&has_bits);
          _impl_.strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_refinelevel(&has_bits);
          _impl_.refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starlevel(&has_bits);
          _impl_.starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_refineexp(&has_bits);
          _impl_.refineexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarExp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_starexp(&has_bits);
          _impl_.starexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool IsUsing = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_isusing(&has_bits);
          _impl_.isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBEquipItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBEquipItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional int32 EquipID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_equipid(), target);
  }

  // optional int32 StrengthLvl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // optional int32 RefineLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // optional int32 StarLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // optional int32 RefineExp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_refineexp(), target);
  }

  // optional int32 StarExp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_starexp(), target);
  }

  // optional bool IsUsing = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBEquipItem)
  return target;
}

size_t DBEquipItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBEquipItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional int32 EquipID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equipid());
    }

    // optional int32 StrengthLvl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strengthlvl());
    }

    // optional int32 RefineLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refinelevel());
    }

    // optional int32 StarLevel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starlevel());
    }

    // optional int32 RefineExp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refineexp());
    }

    // optional int32 StarExp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starexp());
    }

  }
  // optional bool IsUsing = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBEquipItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBEquipItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBEquipItem::GetClassData() const { return &_class_data_; }


void DBEquipItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBEquipItem*>(&to_msg);
  auto& from = static_cast<const DBEquipItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBEquipItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.equipid_ = from._impl_.equipid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strengthlvl_ = from._impl_.strengthlvl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.refinelevel_ = from._impl_.refinelevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.starlevel_ = from._impl_.starlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.refineexp_ = from._impl_.refineexp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.starexp_ = from._impl_.starexp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_isusing(from._internal_isusing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBEquipItem::CopyFrom(const DBEquipItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBEquipItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipItem::IsInitialized() const {
  return true;
}

void DBEquipItem::InternalSwap(DBEquipItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBEquipItem, _impl_.isusing_)
      + sizeof(DBEquipItem::_impl_.isusing_)
      - PROTOBUF_FIELD_OFFSET(DBEquipItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBEquipItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[6]);
}

// ===================================================================

class DBEquipData::_Internal {
 public:
};

DBEquipData::DBEquipData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBEquipData)
}
DBEquipData::DBEquipData(const DBEquipData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBEquipData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equiplist_){from._impl_.equiplist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBEquipData)
}

inline void DBEquipData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equiplist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBEquipData::~DBEquipData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBEquipData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBEquipData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equiplist_.~RepeatedPtrField();
}

void DBEquipData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBEquipData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBEquipData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equiplist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBEquipData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBEquipItem EquipList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equiplist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBEquipData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBEquipData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBEquipItem EquipList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equiplist_size()); i < n; i++) {
    const auto& repfield = this->_internal_equiplist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBEquipData)
  return target;
}

size_t DBEquipData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBEquipData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBEquipItem EquipList = 1;
  total_size += 1UL * this->_internal_equiplist_size();
  for (const auto& msg : this->_impl_.equiplist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBEquipData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBEquipData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBEquipData::GetClassData() const { return &_class_data_; }


void DBEquipData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBEquipData*>(&to_msg);
  auto& from = static_cast<const DBEquipData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBEquipData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equiplist_.MergeFrom(from._impl_.equiplist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBEquipData::CopyFrom(const DBEquipData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBEquipData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBEquipData::IsInitialized() const {
  return true;
}

void DBEquipData::InternalSwap(DBEquipData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equiplist_.InternalSwap(&other->_impl_.equiplist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBEquipData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[7]);
}

// ===================================================================

class DBGemItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBGemItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gemid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strengthlvl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_refinelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_refineexp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_starexp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

DBGemItem::DBGemItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBGemItem)
}
DBGemItem::DBGemItem(const DBGemItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBGemItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.gemid_){}
    , decltype(_impl_.strengthlvl_){}
    , decltype(_impl_.refinelevel_){}
    , decltype(_impl_.starlevel_){}
    , decltype(_impl_.refineexp_){}
    , decltype(_impl_.starexp_){}
    , decltype(_impl_.pos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pos_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.pos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBGemItem)
}

inline void DBGemItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.gemid_){0}
    , decltype(_impl_.strengthlvl_){0}
    , decltype(_impl_.refinelevel_){0}
    , decltype(_impl_.starlevel_){0}
    , decltype(_impl_.refineexp_){0}
    , decltype(_impl_.starexp_){0}
    , decltype(_impl_.pos_){0}
  };
}

DBGemItem::~DBGemItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBGemItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBGemItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBGemItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBGemItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBGemItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.starexp_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.starexp_));
  }
  _impl_.pos_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBGemItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 GemID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gemid(&has_bits);
          _impl_.gemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_strengthlvl(&has_bits);
          _impl_.strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_refinelevel(&has_bits);
          _impl_.refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starlevel(&has_bits);
          _impl_.starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineExp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_refineexp(&has_bits);
          _impl_.refineexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarExp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_starexp(&has_bits);
          _impl_.starexp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Pos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pos(&has_bits);
          _impl_.pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBGemItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBGemItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional int32 GemID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_gemid(), target);
  }

  // optional int32 StrengthLvl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // optional int32 RefineLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // optional int32 StarLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // optional int32 RefineExp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_refineexp(), target);
  }

  // optional int32 StarExp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_starexp(), target);
  }

  // optional int32 Pos = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBGemItem)
  return target;
}

size_t DBGemItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBGemItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional int32 GemID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gemid());
    }

    // optional int32 StrengthLvl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strengthlvl());
    }

    // optional int32 RefineLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refinelevel());
    }

    // optional int32 StarLevel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starlevel());
    }

    // optional int32 RefineExp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refineexp());
    }

    // optional int32 StarExp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starexp());
    }

  }
  // optional int32 Pos = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBGemItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBGemItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBGemItem::GetClassData() const { return &_class_data_; }


void DBGemItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBGemItem*>(&to_msg);
  auto& from = static_cast<const DBGemItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBGemItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.gemid_ = from._impl_.gemid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strengthlvl_ = from._impl_.strengthlvl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.refinelevel_ = from._impl_.refinelevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.starlevel_ = from._impl_.starlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.refineexp_ = from._impl_.refineexp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.starexp_ = from._impl_.starexp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_pos(from._internal_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBGemItem::CopyFrom(const DBGemItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBGemItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGemItem::IsInitialized() const {
  return true;
}

void DBGemItem::InternalSwap(DBGemItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBGemItem, _impl_.pos_)
      + sizeof(DBGemItem::_impl_.pos_)
      - PROTOBUF_FIELD_OFFSET(DBGemItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBGemItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[8]);
}

// ===================================================================

class DBGemData::_Internal {
 public:
};

DBGemData::DBGemData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBGemData)
}
DBGemData::DBGemData(const DBGemData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBGemData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gemlist_){from._impl_.gemlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBGemData)
}

inline void DBGemData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gemlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBGemData::~DBGemData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBGemData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBGemData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gemlist_.~RepeatedPtrField();
}

void DBGemData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBGemData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBGemData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBGemData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBGemItem GemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBGemData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBGemData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBGemItem GemList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_gemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBGemData)
  return target;
}

size_t DBGemData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBGemData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBGemItem GemList = 1;
  total_size += 1UL * this->_internal_gemlist_size();
  for (const auto& msg : this->_impl_.gemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBGemData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBGemData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBGemData::GetClassData() const { return &_class_data_; }


void DBGemData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBGemData*>(&to_msg);
  auto& from = static_cast<const DBGemData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBGemData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gemlist_.MergeFrom(from._impl_.gemlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBGemData::CopyFrom(const DBGemData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBGemData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBGemData::IsInitialized() const {
  return true;
}

void DBGemData::InternalSwap(DBGemData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gemlist_.InternalSwap(&other->_impl_.gemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBGemData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[9]);
}

// ===================================================================

class DBSkillItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBSkillItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_skillid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_keypos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DBSkillItem::DBSkillItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBSkillItem)
}
DBSkillItem::DBSkillItem(const DBSkillItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBSkillItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.skillid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.keypos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.keypos_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.keypos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBSkillItem)
}

inline void DBSkillItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.skillid_){0u}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.keypos_){0}
  };
}

DBSkillItem::~DBSkillItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBSkillItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBSkillItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBSkillItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBSkillItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBSkillItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.keypos_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.keypos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBSkillItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 SkillID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_skillid(&has_bits);
          _impl_.skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 KeyPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_keypos(&has_bits);
          _impl_.keypos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBSkillItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBSkillItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 SkillID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_skillid(), target);
  }

  // optional int32 Level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // optional int32 KeyPos = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_keypos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBSkillItem)
  return target;
}

size_t DBSkillItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBSkillItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 SkillID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_skillid());
    }

    // optional int32 Level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int32 KeyPos = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_keypos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBSkillItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBSkillItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBSkillItem::GetClassData() const { return &_class_data_; }


void DBSkillItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBSkillItem*>(&to_msg);
  auto& from = static_cast<const DBSkillItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBSkillItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.skillid_ = from._impl_.skillid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.keypos_ = from._impl_.keypos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBSkillItem::CopyFrom(const DBSkillItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBSkillItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSkillItem::IsInitialized() const {
  return true;
}

void DBSkillItem::InternalSwap(DBSkillItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBSkillItem, _impl_.keypos_)
      + sizeof(DBSkillItem::_impl_.keypos_)
      - PROTOBUF_FIELD_OFFSET(DBSkillItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSkillItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[10]);
}

// ===================================================================

class DBSkillData::_Internal {
 public:
};

DBSkillData::DBSkillData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBSkillData)
}
DBSkillData::DBSkillData(const DBSkillData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBSkillData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skilllist_){from._impl_.skilllist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBSkillData)
}

inline void DBSkillData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skilllist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBSkillData::~DBSkillData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBSkillData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBSkillData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skilllist_.~RepeatedPtrField();
}

void DBSkillData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBSkillData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBSkillData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skilllist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBSkillData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBSkillItem SkillList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skilllist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBSkillData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBSkillData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBSkillItem SkillList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skilllist_size()); i < n; i++) {
    const auto& repfield = this->_internal_skilllist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBSkillData)
  return target;
}

size_t DBSkillData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBSkillData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBSkillItem SkillList = 1;
  total_size += 1UL * this->_internal_skilllist_size();
  for (const auto& msg : this->_impl_.skilllist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBSkillData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBSkillData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBSkillData::GetClassData() const { return &_class_data_; }


void DBSkillData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBSkillData*>(&to_msg);
  auto& from = static_cast<const DBSkillData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBSkillData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skilllist_.MergeFrom(from._impl_.skilllist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBSkillData::CopyFrom(const DBSkillData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBSkillData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBSkillData::IsInitialized() const {
  return true;
}

void DBSkillData::InternalSwap(DBSkillData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skilllist_.InternalSwap(&other->_impl_.skilllist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBSkillData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[11]);
}

// ===================================================================

class DBPetItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPetItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_petid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strengthlvl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_refinelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isusing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBPetItem::DBPetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBPetItem)
}
DBPetItem::DBPetItem(const DBPetItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBPetItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.petid_){}
    , decltype(_impl_.strengthlvl_){}
    , decltype(_impl_.refinelevel_){}
    , decltype(_impl_.starlevel_){}
    , decltype(_impl_.isusing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isusing_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.isusing_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBPetItem)
}

inline void DBPetItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.petid_){0}
    , decltype(_impl_.strengthlvl_){0}
    , decltype(_impl_.refinelevel_){0}
    , decltype(_impl_.starlevel_){0}
    , decltype(_impl_.isusing_){false}
  };
}

DBPetItem::~DBPetItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBPetItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPetItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBPetItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBPetItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isusing_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.isusing_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPetItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 PetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_petid(&has_bits);
          _impl_.petid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_strengthlvl(&has_bits);
          _impl_.strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_refinelevel(&has_bits);
          _impl_.refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starlevel(&has_bits);
          _impl_.starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool IsUsing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_isusing(&has_bits);
          _impl_.isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPetItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBPetItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional int32 PetID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_petid(), target);
  }

  // optional int32 StrengthLvl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // optional int32 RefineLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // optional int32 StarLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // optional bool IsUsing = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBPetItem)
  return target;
}

size_t DBPetItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBPetItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional int32 PetID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_petid());
    }

    // optional int32 StrengthLvl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strengthlvl());
    }

    // optional int32 RefineLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refinelevel());
    }

    // optional int32 StarLevel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starlevel());
    }

    // optional bool IsUsing = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPetItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBPetItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPetItem::GetClassData() const { return &_class_data_; }


void DBPetItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBPetItem*>(&to_msg);
  auto& from = static_cast<const DBPetItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBPetItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.petid_ = from._impl_.petid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strengthlvl_ = from._impl_.strengthlvl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.refinelevel_ = from._impl_.refinelevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.starlevel_ = from._impl_.starlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.isusing_ = from._impl_.isusing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPetItem::CopyFrom(const DBPetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBPetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPetItem::IsInitialized() const {
  return true;
}

void DBPetItem::InternalSwap(DBPetItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPetItem, _impl_.isusing_)
      + sizeof(DBPetItem::_impl_.isusing_)
      - PROTOBUF_FIELD_OFFSET(DBPetItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPetItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[12]);
}

// ===================================================================

class DBPetData::_Internal {
 public:
};

DBPetData::DBPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBPetData)
}
DBPetData::DBPetData(const DBPetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBPetData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.petlist_){from._impl_.petlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBPetData)
}

inline void DBPetData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.petlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBPetData::~DBPetData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBPetData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.petlist_.~RepeatedPtrField();
}

void DBPetData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPetData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBPetData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.petlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPetData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBPetItem PetList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_petlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPetData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBPetData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBPetItem PetList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_petlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_petlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBPetData)
  return target;
}

size_t DBPetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBPetData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBPetItem PetList = 1;
  total_size += 1UL * this->_internal_petlist_size();
  for (const auto& msg : this->_impl_.petlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBPetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPetData::GetClassData() const { return &_class_data_; }


void DBPetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBPetData*>(&to_msg);
  auto& from = static_cast<const DBPetData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBPetData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.petlist_.MergeFrom(from._impl_.petlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPetData::CopyFrom(const DBPetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPetData::IsInitialized() const {
  return true;
}

void DBPetData::InternalSwap(DBPetData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.petlist_.InternalSwap(&other->_impl_.petlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPetData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[13]);
}

// ===================================================================

class DBMountItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBMountItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mountid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strengthlvl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_refinelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isusing(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBMountItem::DBMountItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBMountItem)
}
DBMountItem::DBMountItem(const DBMountItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBMountItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.mountid_){}
    , decltype(_impl_.strengthlvl_){}
    , decltype(_impl_.refinelevel_){}
    , decltype(_impl_.starlevel_){}
    , decltype(_impl_.isusing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.isusing_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.isusing_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBMountItem)
}

inline void DBMountItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.mountid_){0}
    , decltype(_impl_.strengthlvl_){0}
    , decltype(_impl_.refinelevel_){0}
    , decltype(_impl_.starlevel_){0}
    , decltype(_impl_.isusing_){false}
  };
}

DBMountItem::~DBMountItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBMountItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBMountItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBMountItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBMountItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBMountItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.isusing_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.isusing_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMountItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 MountID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mountid(&has_bits);
          _impl_.mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_strengthlvl(&has_bits);
          _impl_.strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_refinelevel(&has_bits);
          _impl_.refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starlevel(&has_bits);
          _impl_.starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool IsUsing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_isusing(&has_bits);
          _impl_.isusing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMountItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBMountItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional int32 MountID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_mountid(), target);
  }

  // optional int32 StrengthLvl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // optional int32 RefineLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // optional int32 StarLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // optional bool IsUsing = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_isusing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBMountItem)
  return target;
}

size_t DBMountItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBMountItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional int32 MountID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mountid());
    }

    // optional int32 StrengthLvl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strengthlvl());
    }

    // optional int32 RefineLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refinelevel());
    }

    // optional int32 StarLevel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starlevel());
    }

    // optional bool IsUsing = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMountItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBMountItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMountItem::GetClassData() const { return &_class_data_; }


void DBMountItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBMountItem*>(&to_msg);
  auto& from = static_cast<const DBMountItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBMountItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mountid_ = from._impl_.mountid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strengthlvl_ = from._impl_.strengthlvl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.refinelevel_ = from._impl_.refinelevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.starlevel_ = from._impl_.starlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.isusing_ = from._impl_.isusing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMountItem::CopyFrom(const DBMountItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBMountItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMountItem::IsInitialized() const {
  return true;
}

void DBMountItem::InternalSwap(DBMountItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBMountItem, _impl_.isusing_)
      + sizeof(DBMountItem::_impl_.isusing_)
      - PROTOBUF_FIELD_OFFSET(DBMountItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMountItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[14]);
}

// ===================================================================

class DBMountData::_Internal {
 public:
};

DBMountData::DBMountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBMountData)
}
DBMountData::DBMountData(const DBMountData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBMountData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mountlist_){from._impl_.mountlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBMountData)
}

inline void DBMountData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mountlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBMountData::~DBMountData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBMountData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBMountData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.mountlist_.~RepeatedPtrField();
}

void DBMountData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBMountData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBMountData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mountlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMountData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBMountItem MountList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mountlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMountData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBMountData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBMountItem MountList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_mountlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_mountlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBMountData)
  return target;
}

size_t DBMountData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBMountData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBMountItem MountList = 1;
  total_size += 1UL * this->_internal_mountlist_size();
  for (const auto& msg : this->_impl_.mountlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMountData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBMountData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMountData::GetClassData() const { return &_class_data_; }


void DBMountData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBMountData*>(&to_msg);
  auto& from = static_cast<const DBMountData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBMountData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.mountlist_.MergeFrom(from._impl_.mountlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMountData::CopyFrom(const DBMountData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBMountData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMountData::IsInitialized() const {
  return true;
}

void DBMountData::InternalSwap(DBMountData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.mountlist_.InternalSwap(&other->_impl_.mountlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMountData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[15]);
}

// ===================================================================

class DBPartnerItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBPartnerItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_partnerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_strengthlvl(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_refinelevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_starlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_setpos(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBPartnerItem::DBPartnerItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBPartnerItem)
}
DBPartnerItem::DBPartnerItem(const DBPartnerItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBPartnerItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.partnerid_){}
    , decltype(_impl_.strengthlvl_){}
    , decltype(_impl_.refinelevel_){}
    , decltype(_impl_.starlevel_){}
    , decltype(_impl_.setpos_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.setpos_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.setpos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBPartnerItem)
}

inline void DBPartnerItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.partnerid_){0}
    , decltype(_impl_.strengthlvl_){0}
    , decltype(_impl_.refinelevel_){0}
    , decltype(_impl_.starlevel_){0}
    , decltype(_impl_.setpos_){0}
  };
}

DBPartnerItem::~DBPartnerItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBPartnerItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPartnerItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBPartnerItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPartnerItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBPartnerItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.setpos_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.setpos_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPartnerItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 PartnerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_partnerid(&has_bits);
          _impl_.partnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StrengthLvl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_strengthlvl(&has_bits);
          _impl_.strengthlvl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RefineLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_refinelevel(&has_bits);
          _impl_.refinelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 StarLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_starlevel(&has_bits);
          _impl_.starlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 SetPos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_setpos(&has_bits);
          _impl_.setpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPartnerItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBPartnerItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional int32 PartnerID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partnerid(), target);
  }

  // optional int32 StrengthLvl = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_strengthlvl(), target);
  }

  // optional int32 RefineLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_refinelevel(), target);
  }

  // optional int32 StarLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_starlevel(), target);
  }

  // optional int32 SetPos = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_setpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBPartnerItem)
  return target;
}

size_t DBPartnerItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBPartnerItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional int32 PartnerID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partnerid());
    }

    // optional int32 StrengthLvl = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strengthlvl());
    }

    // optional int32 RefineLevel = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refinelevel());
    }

    // optional int32 StarLevel = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_starlevel());
    }

    // optional int32 SetPos = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_setpos());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPartnerItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBPartnerItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPartnerItem::GetClassData() const { return &_class_data_; }


void DBPartnerItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBPartnerItem*>(&to_msg);
  auto& from = static_cast<const DBPartnerItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBPartnerItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.partnerid_ = from._impl_.partnerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.strengthlvl_ = from._impl_.strengthlvl_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.refinelevel_ = from._impl_.refinelevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.starlevel_ = from._impl_.starlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.setpos_ = from._impl_.setpos_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPartnerItem::CopyFrom(const DBPartnerItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBPartnerItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPartnerItem::IsInitialized() const {
  return true;
}

void DBPartnerItem::InternalSwap(DBPartnerItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBPartnerItem, _impl_.setpos_)
      + sizeof(DBPartnerItem::_impl_.setpos_)
      - PROTOBUF_FIELD_OFFSET(DBPartnerItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPartnerItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[16]);
}

// ===================================================================

class DBPartnerData::_Internal {
 public:
};

DBPartnerData::DBPartnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBPartnerData)
}
DBPartnerData::DBPartnerData(const DBPartnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBPartnerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partnerlist_){from._impl_.partnerlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBPartnerData)
}

inline void DBPartnerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partnerlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBPartnerData::~DBPartnerData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBPartnerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBPartnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partnerlist_.~RepeatedPtrField();
}

void DBPartnerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBPartnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBPartnerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partnerlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBPartnerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBPartnerItem PartnerList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partnerlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBPartnerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBPartnerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBPartnerItem PartnerList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_partnerlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_partnerlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBPartnerData)
  return target;
}

size_t DBPartnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBPartnerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBPartnerItem PartnerList = 1;
  total_size += 1UL * this->_internal_partnerlist_size();
  for (const auto& msg : this->_impl_.partnerlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBPartnerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBPartnerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBPartnerData::GetClassData() const { return &_class_data_; }


void DBPartnerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBPartnerData*>(&to_msg);
  auto& from = static_cast<const DBPartnerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBPartnerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.partnerlist_.MergeFrom(from._impl_.partnerlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBPartnerData::CopyFrom(const DBPartnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBPartnerData::IsInitialized() const {
  return true;
}

void DBPartnerData::InternalSwap(DBPartnerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.partnerlist_.InternalSwap(&other->_impl_.partnerlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBPartnerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[17]);
}

// ===================================================================

class DBTaskItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBTaskItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_taskid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DBTaskItem::DBTaskItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBTaskItem)
}
DBTaskItem::DBTaskItem(const DBTaskItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBTaskItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.taskid_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.progress_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.progress_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBTaskItem)
}

inline void DBTaskItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.taskid_){0u}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.progress_){0}
  };
}

DBTaskItem::~DBTaskItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBTaskItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBTaskItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBTaskItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBTaskItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBTaskItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.progress_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.progress_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBTaskItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 TaskID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_taskid(&has_bits);
          _impl_.taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBTaskItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBTaskItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 TaskID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_taskid(), target);
  }

  // optional int32 Status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_status(), target);
  }

  // optional int32 Progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBTaskItem)
  return target;
}

size_t DBTaskItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBTaskItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 TaskID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_taskid());
    }

    // optional int32 Status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
    }

    // optional int32 Progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBTaskItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBTaskItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBTaskItem::GetClassData() const { return &_class_data_; }


void DBTaskItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBTaskItem*>(&to_msg);
  auto& from = static_cast<const DBTaskItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBTaskItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.taskid_ = from._impl_.taskid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBTaskItem::CopyFrom(const DBTaskItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBTaskItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBTaskItem::IsInitialized() const {
  return true;
}

void DBTaskItem::InternalSwap(DBTaskItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBTaskItem, _impl_.progress_)
      + sizeof(DBTaskItem::_impl_.progress_)
      - PROTOBUF_FIELD_OFFSET(DBTaskItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBTaskItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[18]);
}

// ===================================================================

class DBTaskData::_Internal {
 public:
};

DBTaskData::DBTaskData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBTaskData)
}
DBTaskData::DBTaskData(const DBTaskData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBTaskData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasklist_){from._impl_.tasklist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBTaskData)
}

inline void DBTaskData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasklist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBTaskData::~DBTaskData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBTaskData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBTaskData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasklist_.~RepeatedPtrField();
}

void DBTaskData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBTaskData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBTaskData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasklist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBTaskData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBTaskItem TaskList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasklist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBTaskData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBTaskData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBTaskItem TaskList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasklist_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasklist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBTaskData)
  return target;
}

size_t DBTaskData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBTaskData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBTaskItem TaskList = 1;
  total_size += 1UL * this->_internal_tasklist_size();
  for (const auto& msg : this->_impl_.tasklist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBTaskData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBTaskData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBTaskData::GetClassData() const { return &_class_data_; }


void DBTaskData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBTaskData*>(&to_msg);
  auto& from = static_cast<const DBTaskData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBTaskData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasklist_.MergeFrom(from._impl_.tasklist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBTaskData::CopyFrom(const DBTaskData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBTaskData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBTaskData::IsInitialized() const {
  return true;
}

void DBTaskData::InternalSwap(DBTaskData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasklist_.InternalSwap(&other->_impl_.tasklist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBTaskData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[19]);
}

// ===================================================================

class DBMailItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBMailItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_groupid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_senderid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sender(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mailtype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_items(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DBMailItem::DBMailItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBMailItem)
}
DBMailItem::DBMailItem(const DBMailItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBMailItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.items_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.groupid_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.senderid_){}
    , decltype(_impl_.mailtype_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sender()) {
    _this->_impl_.sender_.Set(from._internal_sender(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_content()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _impl_.items_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_items()) {
    _this->_impl_.items_.Set(from._internal_items(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBMailItem)
}

inline void DBMailItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sender_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.items_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.guid_){uint64_t{0u}}
    , decltype(_impl_.groupid_){uint64_t{0u}}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.senderid_){uint64_t{0u}}
    , decltype(_impl_.mailtype_){0u}
    , decltype(_impl_.status_){0u}
  };
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sender_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.items_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.items_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBMailItem::~DBMailItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBMailItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBMailItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sender_.Destroy();
  _impl_.title_.Destroy();
  _impl_.content_.Destroy();
  _impl_.items_.Destroy();
}

void DBMailItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBMailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBMailItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sender_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.items_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.senderid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.senderid_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMailItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guid(&has_bits);
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 GroupID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_groupid(&has_bits);
          _impl_.groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 SenderID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_senderid(&has_bits);
          _impl_.senderid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.DBMailItem.Sender");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 MailType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_mailtype(&has_bits);
          _impl_.mailtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 Status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Title = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.DBMailItem.Title");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string Content = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.DBMailItem.Content");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes Items = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_items();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMailItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBMailItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 Guid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_guid(), target);
  }

  // optional uint64 GroupID = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_groupid(), target);
  }

  // optional uint64 Time = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_time(), target);
  }

  // optional uint64 SenderID = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_senderid(), target);
  }

  // optional string Sender = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sender().data(), static_cast<int>(this->_internal_sender().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.DBMailItem.Sender");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sender(), target);
  }

  // optional uint32 MailType = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mailtype(), target);
  }

  // optional uint32 Status = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_status(), target);
  }

  // optional string Title = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.DBMailItem.Title");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_title(), target);
  }

  // optional string Content = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.DBMailItem.Content");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_content(), target);
  }

  // optional bytes Items = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBMailItem)
  return target;
}

size_t DBMailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBMailItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string Sender = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sender());
    }

    // optional string Title = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string Content = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_content());
    }

    // optional bytes Items = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_items());
    }

    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 Guid = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guid());
    }

    // optional uint64 GroupID = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_groupid());
    }

    // optional uint64 Time = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint64 SenderID = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_senderid());
    }

    // optional uint32 MailType = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mailtype());
    }

    // optional uint32 Status = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMailItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBMailItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMailItem::GetClassData() const { return &_class_data_; }


void DBMailItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBMailItem*>(&to_msg);
  auto& from = static_cast<const DBMailItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBMailItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sender(from._internal_sender());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_content(from._internal_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_items(from._internal_items());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.guid_ = from._impl_.guid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.groupid_ = from._impl_.groupid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.senderid_ = from._impl_.senderid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.mailtype_ = from._impl_.mailtype_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMailItem::CopyFrom(const DBMailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBMailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMailItem::IsInitialized() const {
  return true;
}

void DBMailItem::InternalSwap(DBMailItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sender_, lhs_arena,
      &other->_impl_.sender_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.items_, lhs_arena,
      &other->_impl_.items_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBMailItem, _impl_.status_)
      + sizeof(DBMailItem::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(DBMailItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMailItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[20]);
}

// ===================================================================

class DBMailData::_Internal {
 public:
};

DBMailData::DBMailData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBMailData)
}
DBMailData::DBMailData(const DBMailData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBMailData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.maillist_){from._impl_.maillist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBMailData)
}

inline void DBMailData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.maillist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBMailData::~DBMailData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBMailData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBMailData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.maillist_.~RepeatedPtrField();
}

void DBMailData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBMailData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBMailData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.maillist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBMailData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBMailItem MailList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_maillist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBMailData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBMailData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBMailItem MailList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_maillist_size()); i < n; i++) {
    const auto& repfield = this->_internal_maillist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBMailData)
  return target;
}

size_t DBMailData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBMailData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBMailItem MailList = 1;
  total_size += 1UL * this->_internal_maillist_size();
  for (const auto& msg : this->_impl_.maillist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBMailData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBMailData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBMailData::GetClassData() const { return &_class_data_; }


void DBMailData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBMailData*>(&to_msg);
  auto& from = static_cast<const DBMailData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBMailData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.maillist_.MergeFrom(from._impl_.maillist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBMailData::CopyFrom(const DBMailData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBMailData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBMailData::IsInitialized() const {
  return true;
}

void DBMailData::InternalSwap(DBMailData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.maillist_.InternalSwap(&other->_impl_.maillist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBMailData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[21]);
}

// ===================================================================

class DBActivityItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBActivityItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_activityid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_activitytype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jointime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_datalen(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DBActivityItem::DBActivityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBActivityItem)
}
DBActivityItem::DBActivityItem(const DBActivityItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBActivityItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.activityid_){}
    , decltype(_impl_.activitytype_){}
    , decltype(_impl_.jointime_){}
    , decltype(_impl_.datalen_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.datalen_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.datalen_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBActivityItem)
}

inline void DBActivityItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.activityid_){0u}
    , decltype(_impl_.activitytype_){0u}
    , decltype(_impl_.jointime_){0u}
    , decltype(_impl_.datalen_){0u}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DBActivityItem::~DBActivityItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBActivityItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBActivityItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void DBActivityItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBActivityItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBActivityItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.datalen_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.datalen_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBActivityItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ActivityID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_activityid(&has_bits);
          _impl_.activityid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ActivityType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_activitytype(&has_bits);
          _impl_.activitytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 JoinTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_jointime(&has_bits);
          _impl_.jointime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 DataLen = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_datalen(&has_bits);
          _impl_.datalen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes Data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBActivityItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBActivityItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 ActivityID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_activityid(), target);
  }

  // optional uint32 ActivityType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_activitytype(), target);
  }

  // optional uint32 JoinTime = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_jointime(), target);
  }

  // optional uint32 DataLen = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_datalen(), target);
  }

  // optional bytes Data = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBActivityItem)
  return target;
}

size_t DBActivityItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBActivityItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes Data = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 ActivityID = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activityid());
    }

    // optional uint32 ActivityType = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_activitytype());
    }

    // optional uint32 JoinTime = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_jointime());
    }

    // optional uint32 DataLen = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_datalen());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBActivityItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBActivityItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBActivityItem::GetClassData() const { return &_class_data_; }


void DBActivityItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBActivityItem*>(&to_msg);
  auto& from = static_cast<const DBActivityItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBActivityItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.activityid_ = from._impl_.activityid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.activitytype_ = from._impl_.activitytype_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.jointime_ = from._impl_.jointime_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.datalen_ = from._impl_.datalen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBActivityItem::CopyFrom(const DBActivityItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBActivityItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBActivityItem::IsInitialized() const {
  return true;
}

void DBActivityItem::InternalSwap(DBActivityItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBActivityItem, _impl_.datalen_)
      + sizeof(DBActivityItem::_impl_.datalen_)
      - PROTOBUF_FIELD_OFFSET(DBActivityItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBActivityItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[22]);
}

// ===================================================================

class DBActivityData::_Internal {
 public:
};

DBActivityData::DBActivityData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBActivityData)
}
DBActivityData::DBActivityData(const DBActivityData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBActivityData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.activitylist_){from._impl_.activitylist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBActivityData)
}

inline void DBActivityData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.activitylist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBActivityData::~DBActivityData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBActivityData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBActivityData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.activitylist_.~RepeatedPtrField();
}

void DBActivityData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBActivityData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBActivityData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.activitylist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBActivityData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBActivityItem ActivityList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_activitylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBActivityData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBActivityData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBActivityItem ActivityList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_activitylist_size()); i < n; i++) {
    const auto& repfield = this->_internal_activitylist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBActivityData)
  return target;
}

size_t DBActivityData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBActivityData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBActivityItem ActivityList = 1;
  total_size += 1UL * this->_internal_activitylist_size();
  for (const auto& msg : this->_impl_.activitylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBActivityData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBActivityData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBActivityData::GetClassData() const { return &_class_data_; }


void DBActivityData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBActivityData*>(&to_msg);
  auto& from = static_cast<const DBActivityData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBActivityData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.activitylist_.MergeFrom(from._impl_.activitylist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBActivityData::CopyFrom(const DBActivityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBActivityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBActivityData::IsInitialized() const {
  return true;
}

void DBActivityData::InternalSwap(DBActivityData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.activitylist_.InternalSwap(&other->_impl_.activitylist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBActivityData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[23]);
}

// ===================================================================

class DBCounterItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBCounterItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_counterid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DBCounterItem::DBCounterItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBCounterItem)
}
DBCounterItem::DBCounterItem(const DBCounterItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBCounterItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.counterid_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.time_){}
    , decltype(_impl_.param1_){}
    , decltype(_impl_.param2_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.param2_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.param2_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBCounterItem)
}

inline void DBCounterItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.counterid_){0u}
    , decltype(_impl_.index_){0u}
    , decltype(_impl_.value_){int64_t{0}}
    , decltype(_impl_.time_){uint64_t{0u}}
    , decltype(_impl_.param1_){0u}
    , decltype(_impl_.param2_){0u}
  };
}

DBCounterItem::~DBCounterItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBCounterItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBCounterItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBCounterItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBCounterItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBCounterItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.param2_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.param2_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCounterItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 CounterID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_counterid(&has_bits);
          _impl_.counterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 Index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 Value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 Time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 Param1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_param1(&has_bits);
          _impl_.param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 Param2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_param2(&has_bits);
          _impl_.param2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBCounterItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBCounterItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint32 CounterID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_counterid(), target);
  }

  // optional uint32 Index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index(), target);
  }

  // optional int64 Value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_value(), target);
  }

  // optional uint64 Time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_time(), target);
  }

  // optional uint32 Param1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_param1(), target);
  }

  // optional uint32 Param2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_param2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBCounterItem)
  return target;
}

size_t DBCounterItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBCounterItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 CounterID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_counterid());
    }

    // optional uint32 Index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
    }

    // optional int64 Value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
    }

    // optional uint64 Time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_time());
    }

    // optional uint32 Param1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param1());
    }

    // optional uint32 Param2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param2());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBCounterItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBCounterItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBCounterItem::GetClassData() const { return &_class_data_; }


void DBCounterItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBCounterItem*>(&to_msg);
  auto& from = static_cast<const DBCounterItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBCounterItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.counterid_ = from._impl_.counterid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.param1_ = from._impl_.param1_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.param2_ = from._impl_.param2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBCounterItem::CopyFrom(const DBCounterItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBCounterItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCounterItem::IsInitialized() const {
  return true;
}

void DBCounterItem::InternalSwap(DBCounterItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBCounterItem, _impl_.param2_)
      + sizeof(DBCounterItem::_impl_.param2_)
      - PROTOBUF_FIELD_OFFSET(DBCounterItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCounterItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[24]);
}

// ===================================================================

class DBCounterData::_Internal {
 public:
};

DBCounterData::DBCounterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBCounterData)
}
DBCounterData::DBCounterData(const DBCounterData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBCounterData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counterlist_){from._impl_.counterlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBCounterData)
}

inline void DBCounterData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.counterlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBCounterData::~DBCounterData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBCounterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBCounterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counterlist_.~RepeatedPtrField();
}

void DBCounterData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBCounterData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBCounterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counterlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBCounterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBCounterItem CounterList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counterlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBCounterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBCounterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBCounterItem CounterList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counterlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_counterlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBCounterData)
  return target;
}

size_t DBCounterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBCounterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBCounterItem CounterList = 1;
  total_size += 1UL * this->_internal_counterlist_size();
  for (const auto& msg : this->_impl_.counterlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBCounterData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBCounterData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBCounterData::GetClassData() const { return &_class_data_; }


void DBCounterData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBCounterData*>(&to_msg);
  auto& from = static_cast<const DBCounterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBCounterData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.counterlist_.MergeFrom(from._impl_.counterlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBCounterData::CopyFrom(const DBCounterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBCounterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBCounterData::IsInitialized() const {
  return true;
}

void DBCounterData::InternalSwap(DBCounterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.counterlist_.InternalSwap(&other->_impl_.counterlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBCounterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[25]);
}

// ===================================================================

class DBFriendItem::_Internal {
 public:
  using HasBits = decltype(std::declval<DBFriendItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_friendid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DBFriendItem::DBFriendItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBFriendItem)
}
DBFriendItem::DBFriendItem(const DBFriendItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBFriendItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.friendid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.friendid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.friendid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBFriendItem)
}

inline void DBFriendItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.friendid_){uint64_t{0u}}
  };
}

DBFriendItem::~DBFriendItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBFriendItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBFriendItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DBFriendItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBFriendItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBFriendItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friendid_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.friendid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBFriendItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 FriendID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_friendid(&has_bits);
          _impl_.friendid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBFriendItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBFriendItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional uint64 FriendID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_friendid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBFriendItem)
  return target;
}

size_t DBFriendItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBFriendItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint64 FriendID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_friendid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBFriendItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBFriendItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBFriendItem::GetClassData() const { return &_class_data_; }


void DBFriendItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBFriendItem*>(&to_msg);
  auto& from = static_cast<const DBFriendItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBFriendItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.friendid_ = from._impl_.friendid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBFriendItem::CopyFrom(const DBFriendItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBFriendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendItem::IsInitialized() const {
  return true;
}

void DBFriendItem::InternalSwap(DBFriendItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBFriendItem, _impl_.friendid_)
      + sizeof(DBFriendItem::_impl_.friendid_)
      - PROTOBUF_FIELD_OFFSET(DBFriendItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFriendItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[26]);
}

// ===================================================================

class DBFriendData::_Internal {
 public:
};

DBFriendData::DBFriendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBFriendData)
}
DBFriendData::DBFriendData(const DBFriendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBFriendData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friendlist_){from._impl_.friendlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBFriendData)
}

inline void DBFriendData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friendlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DBFriendData::~DBFriendData() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBFriendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBFriendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friendlist_.~RepeatedPtrField();
}

void DBFriendData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBFriendData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBFriendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friendlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBFriendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.DBFriendItem FriendList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_friendlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBFriendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBFriendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.DBFriendItem FriendList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_friendlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_friendlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBFriendData)
  return target;
}

size_t DBFriendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBFriendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.DBFriendItem FriendList = 1;
  total_size += 1UL * this->_internal_friendlist_size();
  for (const auto& msg : this->_impl_.friendlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBFriendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBFriendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBFriendData::GetClassData() const { return &_class_data_; }


void DBFriendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBFriendData*>(&to_msg);
  auto& from = static_cast<const DBFriendData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBFriendData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friendlist_.MergeFrom(from._impl_.friendlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBFriendData::CopyFrom(const DBFriendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBFriendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBFriendData::IsInitialized() const {
  return true;
}

void DBFriendData::InternalSwap(DBFriendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friendlist_.InternalSwap(&other->_impl_.friendlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DBFriendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[27]);
}

// ===================================================================

class DBRoleLoginAck::_Internal {
 public:
  using HasBits = decltype(std::declval<DBRoleLoginAck>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::symphony::proto::DBRoleData& roledata(const DBRoleLoginAck* msg);
  static void set_has_roledata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::symphony::proto::DBBagData& bagdata(const DBRoleLoginAck* msg);
  static void set_has_bagdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::symphony::proto::DBCopyData& copydata(const DBRoleLoginAck* msg);
  static void set_has_copydata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::symphony::proto::DBEquipData& equipdata(const DBRoleLoginAck* msg);
  static void set_has_equipdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::symphony::proto::DBGemData& gemdata(const DBRoleLoginAck* msg);
  static void set_has_gemdata(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::symphony::proto::DBPetData& petdata(const DBRoleLoginAck* msg);
  static void set_has_petdata(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::symphony::proto::DBPartnerData& partnerdata(const DBRoleLoginAck* msg);
  static void set_has_partnerdata(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::symphony::proto::DBTaskData& taskdata(const DBRoleLoginAck* msg);
  static void set_has_taskdata(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::symphony::proto::DBMailData& maildata(const DBRoleLoginAck* msg);
  static void set_has_maildata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::symphony::proto::DBMountData& mountdata(const DBRoleLoginAck* msg);
  static void set_has_mountdata(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::symphony::proto::DBActivityData& activitydata(const DBRoleLoginAck* msg);
  static void set_has_activitydata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::symphony::proto::DBCounterData& counterdata(const DBRoleLoginAck* msg);
  static void set_has_counterdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::symphony::proto::DBFriendData& frienddata(const DBRoleLoginAck* msg);
  static void set_has_frienddata(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::symphony::proto::DBSkillData& skilldata(const DBRoleLoginAck* msg);
  static void set_has_skilldata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::symphony::proto::DBRoleData&
DBRoleLoginAck::_Internal::roledata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.roledata_;
}
const ::symphony::proto::DBBagData&
DBRoleLoginAck::_Internal::bagdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.bagdata_;
}
const ::symphony::proto::DBCopyData&
DBRoleLoginAck::_Internal::copydata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.copydata_;
}
const ::symphony::proto::DBEquipData&
DBRoleLoginAck::_Internal::equipdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.equipdata_;
}
const ::symphony::proto::DBGemData&
DBRoleLoginAck::_Internal::gemdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.gemdata_;
}
const ::symphony::proto::DBPetData&
DBRoleLoginAck::_Internal::petdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.petdata_;
}
const ::symphony::proto::DBPartnerData&
DBRoleLoginAck::_Internal::partnerdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.partnerdata_;
}
const ::symphony::proto::DBTaskData&
DBRoleLoginAck::_Internal::taskdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.taskdata_;
}
const ::symphony::proto::DBMailData&
DBRoleLoginAck::_Internal::maildata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.maildata_;
}
const ::symphony::proto::DBMountData&
DBRoleLoginAck::_Internal::mountdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.mountdata_;
}
const ::symphony::proto::DBActivityData&
DBRoleLoginAck::_Internal::activitydata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.activitydata_;
}
const ::symphony::proto::DBCounterData&
DBRoleLoginAck::_Internal::counterdata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.counterdata_;
}
const ::symphony::proto::DBFriendData&
DBRoleLoginAck::_Internal::frienddata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.frienddata_;
}
const ::symphony::proto::DBSkillData&
DBRoleLoginAck::_Internal::skilldata(const DBRoleLoginAck* msg) {
  return *msg->_impl_.skilldata_;
}
DBRoleLoginAck::DBRoleLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.DBRoleLoginAck)
}
DBRoleLoginAck::DBRoleLoginAck(const DBRoleLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DBRoleLoginAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roledata_){nullptr}
    , decltype(_impl_.bagdata_){nullptr}
    , decltype(_impl_.copydata_){nullptr}
    , decltype(_impl_.equipdata_){nullptr}
    , decltype(_impl_.gemdata_){nullptr}
    , decltype(_impl_.petdata_){nullptr}
    , decltype(_impl_.partnerdata_){nullptr}
    , decltype(_impl_.taskdata_){nullptr}
    , decltype(_impl_.maildata_){nullptr}
    , decltype(_impl_.mountdata_){nullptr}
    , decltype(_impl_.activitydata_){nullptr}
    , decltype(_impl_.counterdata_){nullptr}
    , decltype(_impl_.frienddata_){nullptr}
    , decltype(_impl_.skilldata_){nullptr}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roledata()) {
    _this->_impl_.roledata_ = new ::symphony::proto::DBRoleData(*from._impl_.roledata_);
  }
  if (from._internal_has_bagdata()) {
    _this->_impl_.bagdata_ = new ::symphony::proto::DBBagData(*from._impl_.bagdata_);
  }
  if (from._internal_has_copydata()) {
    _this->_impl_.copydata_ = new ::symphony::proto::DBCopyData(*from._impl_.copydata_);
  }
  if (from._internal_has_equipdata()) {
    _this->_impl_.equipdata_ = new ::symphony::proto::DBEquipData(*from._impl_.equipdata_);
  }
  if (from._internal_has_gemdata()) {
    _this->_impl_.gemdata_ = new ::symphony::proto::DBGemData(*from._impl_.gemdata_);
  }
  if (from._internal_has_petdata()) {
    _this->_impl_.petdata_ = new ::symphony::proto::DBPetData(*from._impl_.petdata_);
  }
  if (from._internal_has_partnerdata()) {
    _this->_impl_.partnerdata_ = new ::symphony::proto::DBPartnerData(*from._impl_.partnerdata_);
  }
  if (from._internal_has_taskdata()) {
    _this->_impl_.taskdata_ = new ::symphony::proto::DBTaskData(*from._impl_.taskdata_);
  }
  if (from._internal_has_maildata()) {
    _this->_impl_.maildata_ = new ::symphony::proto::DBMailData(*from._impl_.maildata_);
  }
  if (from._internal_has_mountdata()) {
    _this->_impl_.mountdata_ = new ::symphony::proto::DBMountData(*from._impl_.mountdata_);
  }
  if (from._internal_has_activitydata()) {
    _this->_impl_.activitydata_ = new ::symphony::proto::DBActivityData(*from._impl_.activitydata_);
  }
  if (from._internal_has_counterdata()) {
    _this->_impl_.counterdata_ = new ::symphony::proto::DBCounterData(*from._impl_.counterdata_);
  }
  if (from._internal_has_frienddata()) {
    _this->_impl_.frienddata_ = new ::symphony::proto::DBFriendData(*from._impl_.frienddata_);
  }
  if (from._internal_has_skilldata()) {
    _this->_impl_.skilldata_ = new ::symphony::proto::DBSkillData(*from._impl_.skilldata_);
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.DBRoleLoginAck)
}

inline void DBRoleLoginAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roledata_){nullptr}
    , decltype(_impl_.bagdata_){nullptr}
    , decltype(_impl_.copydata_){nullptr}
    , decltype(_impl_.equipdata_){nullptr}
    , decltype(_impl_.gemdata_){nullptr}
    , decltype(_impl_.petdata_){nullptr}
    , decltype(_impl_.partnerdata_){nullptr}
    , decltype(_impl_.taskdata_){nullptr}
    , decltype(_impl_.maildata_){nullptr}
    , decltype(_impl_.mountdata_){nullptr}
    , decltype(_impl_.activitydata_){nullptr}
    , decltype(_impl_.counterdata_){nullptr}
    , decltype(_impl_.frienddata_){nullptr}
    , decltype(_impl_.skilldata_){nullptr}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
  };
}

DBRoleLoginAck::~DBRoleLoginAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.DBRoleLoginAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DBRoleLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.roledata_;
  if (this != internal_default_instance()) delete _impl_.bagdata_;
  if (this != internal_default_instance()) delete _impl_.copydata_;
  if (this != internal_default_instance()) delete _impl_.equipdata_;
  if (this != internal_default_instance()) delete _impl_.gemdata_;
  if (this != internal_default_instance()) delete _impl_.petdata_;
  if (this != internal_default_instance()) delete _impl_.partnerdata_;
  if (this != internal_default_instance()) delete _impl_.taskdata_;
  if (this != internal_default_instance()) delete _impl_.maildata_;
  if (this != internal_default_instance()) delete _impl_.mountdata_;
  if (this != internal_default_instance()) delete _impl_.activitydata_;
  if (this != internal_default_instance()) delete _impl_.counterdata_;
  if (this != internal_default_instance()) delete _impl_.frienddata_;
  if (this != internal_default_instance()) delete _impl_.skilldata_;
}

void DBRoleLoginAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DBRoleLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.DBRoleLoginAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.roledata_ != nullptr);
      _impl_.roledata_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bagdata_ != nullptr);
      _impl_.bagdata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.copydata_ != nullptr);
      _impl_.copydata_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.equipdata_ != nullptr);
      _impl_.equipdata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.gemdata_ != nullptr);
      _impl_.gemdata_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.petdata_ != nullptr);
      _impl_.petdata_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.partnerdata_ != nullptr);
      _impl_.partnerdata_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.taskdata_ != nullptr);
      _impl_.taskdata_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.maildata_ != nullptr);
      _impl_.maildata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.mountdata_ != nullptr);
      _impl_.mountdata_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.activitydata_ != nullptr);
      _impl_.activitydata_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.counterdata_ != nullptr);
      _impl_.counterdata_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.frienddata_ != nullptr);
      _impl_.frienddata_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.skilldata_ != nullptr);
      _impl_.skilldata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000c000u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retcode_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.retcode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DBRoleLoginAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBRoleData RoleData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBBagData BagData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bagdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBCopyData CopyData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_copydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBEquipData EquipData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBGemData GemData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gemdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBPetData PetData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_petdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBPartnerData PartnerData = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_partnerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBTaskData TaskData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_taskdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBMailData MailData = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_maildata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBMountData MountData = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mountdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBActivityData ActivityData = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_activitydata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBCounterData CounterData = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBFriendData FriendData = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_frienddata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .symphony.proto.DBSkillData SkillData = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_skilldata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DBRoleLoginAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.DBRoleLoginAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint64 RoleID = 2;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // optional .symphony.proto.DBRoleData RoleData = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::roledata(this),
        _Internal::roledata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBBagData BagData = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bagdata(this),
        _Internal::bagdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBCopyData CopyData = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::copydata(this),
        _Internal::copydata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBEquipData EquipData = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::equipdata(this),
        _Internal::equipdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBGemData GemData = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::gemdata(this),
        _Internal::gemdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBPetData PetData = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::petdata(this),
        _Internal::petdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBPartnerData PartnerData = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::partnerdata(this),
        _Internal::partnerdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBTaskData TaskData = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::taskdata(this),
        _Internal::taskdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBMailData MailData = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::maildata(this),
        _Internal::maildata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBMountData MountData = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::mountdata(this),
        _Internal::mountdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBActivityData ActivityData = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::activitydata(this),
        _Internal::activitydata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBCounterData CounterData = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::counterdata(this),
        _Internal::counterdata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBFriendData FriendData = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::frienddata(this),
        _Internal::frienddata(this).GetCachedSize(), target, stream);
  }

  // optional .symphony.proto.DBSkillData SkillData = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::skilldata(this),
        _Internal::skilldata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.DBRoleLoginAck)
  return target;
}

size_t DBRoleLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.DBRoleLoginAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .symphony.proto.DBRoleData RoleData = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.roledata_);
    }

    // optional .symphony.proto.DBBagData BagData = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bagdata_);
    }

    // optional .symphony.proto.DBCopyData CopyData = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.copydata_);
    }

    // optional .symphony.proto.DBEquipData EquipData = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.equipdata_);
    }

    // optional .symphony.proto.DBGemData GemData = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gemdata_);
    }

    // optional .symphony.proto.DBPetData PetData = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.petdata_);
    }

    // optional .symphony.proto.DBPartnerData PartnerData = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.partnerdata_);
    }

    // optional .symphony.proto.DBTaskData TaskData = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.taskdata_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .symphony.proto.DBMailData MailData = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.maildata_);
    }

    // optional .symphony.proto.DBMountData MountData = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mountdata_);
    }

    // optional .symphony.proto.DBActivityData ActivityData = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activitydata_);
    }

    // optional .symphony.proto.DBCounterData CounterData = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counterdata_);
    }

    // optional .symphony.proto.DBFriendData FriendData = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frienddata_);
    }

    // optional .symphony.proto.DBSkillData SkillData = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.skilldata_);
    }

    // optional uint64 RoleID = 2;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 RetCode = 1;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DBRoleLoginAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DBRoleLoginAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DBRoleLoginAck::GetClassData() const { return &_class_data_; }


void DBRoleLoginAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DBRoleLoginAck*>(&to_msg);
  auto& from = static_cast<const DBRoleLoginAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.DBRoleLoginAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_roledata()->::symphony::proto::DBRoleData::MergeFrom(
          from._internal_roledata());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_bagdata()->::symphony::proto::DBBagData::MergeFrom(
          from._internal_bagdata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_copydata()->::symphony::proto::DBCopyData::MergeFrom(
          from._internal_copydata());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_equipdata()->::symphony::proto::DBEquipData::MergeFrom(
          from._internal_equipdata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gemdata()->::symphony::proto::DBGemData::MergeFrom(
          from._internal_gemdata());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_petdata()->::symphony::proto::DBPetData::MergeFrom(
          from._internal_petdata());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_partnerdata()->::symphony::proto::DBPartnerData::MergeFrom(
          from._internal_partnerdata());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_taskdata()->::symphony::proto::DBTaskData::MergeFrom(
          from._internal_taskdata());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_maildata()->::symphony::proto::DBMailData::MergeFrom(
          from._internal_maildata());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_mountdata()->::symphony::proto::DBMountData::MergeFrom(
          from._internal_mountdata());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_activitydata()->::symphony::proto::DBActivityData::MergeFrom(
          from._internal_activitydata());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_counterdata()->::symphony::proto::DBCounterData::MergeFrom(
          from._internal_counterdata());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_frienddata()->::symphony::proto::DBFriendData::MergeFrom(
          from._internal_frienddata());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_skilldata()->::symphony::proto::DBSkillData::MergeFrom(
          from._internal_skilldata());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.retcode_ = from._impl_.retcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DBRoleLoginAck::CopyFrom(const DBRoleLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.DBRoleLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBRoleLoginAck::IsInitialized() const {
  return true;
}

void DBRoleLoginAck::InternalSwap(DBRoleLoginAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DBRoleLoginAck, _impl_.retcode_)
      + sizeof(DBRoleLoginAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(DBRoleLoginAck, _impl_.roledata_)>(
          reinterpret_cast<char*>(&_impl_.roledata_),
          reinterpret_cast<char*>(&other->_impl_.roledata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DBRoleLoginAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5flogin_5fdb_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::DBRoleData*
Arena::CreateMaybeMessage< ::symphony::proto::DBRoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBRoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBBagItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBBagItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBBagItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBBagData*
Arena::CreateMaybeMessage< ::symphony::proto::DBBagData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBBagData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBCopyItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBCopyItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBCopyItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBChapterItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBChapterItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBChapterItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBCopyData*
Arena::CreateMaybeMessage< ::symphony::proto::DBCopyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBCopyData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBEquipItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBEquipItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBEquipItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBEquipData*
Arena::CreateMaybeMessage< ::symphony::proto::DBEquipData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBEquipData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBGemItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBGemItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBGemItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBGemData*
Arena::CreateMaybeMessage< ::symphony::proto::DBGemData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBGemData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBSkillItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBSkillItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBSkillItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBSkillData*
Arena::CreateMaybeMessage< ::symphony::proto::DBSkillData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBSkillData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBPetItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBPetItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBPetItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBPetData*
Arena::CreateMaybeMessage< ::symphony::proto::DBPetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBPetData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBMountItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBMountItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBMountItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBMountData*
Arena::CreateMaybeMessage< ::symphony::proto::DBMountData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBMountData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBPartnerItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBPartnerItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBPartnerItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBPartnerData*
Arena::CreateMaybeMessage< ::symphony::proto::DBPartnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBPartnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBTaskItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBTaskItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBTaskItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBTaskData*
Arena::CreateMaybeMessage< ::symphony::proto::DBTaskData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBTaskData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBMailItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBMailItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBMailItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBMailData*
Arena::CreateMaybeMessage< ::symphony::proto::DBMailData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBMailData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBActivityItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBActivityItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBActivityItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBActivityData*
Arena::CreateMaybeMessage< ::symphony::proto::DBActivityData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBActivityData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBCounterItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBCounterItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBCounterItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBCounterData*
Arena::CreateMaybeMessage< ::symphony::proto::DBCounterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBCounterData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBFriendItem*
Arena::CreateMaybeMessage< ::symphony::proto::DBFriendItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBFriendItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBFriendData*
Arena::CreateMaybeMessage< ::symphony::proto::DBFriendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBFriendData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::DBRoleLoginAck*
Arena::CreateMaybeMessage< ::symphony::proto::DBRoleLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::DBRoleLoginAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
