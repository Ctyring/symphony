// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/servers/log_server/log_protobuf.proto

#include "symphony/servers/log_server/log_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace ls {
PROTOBUF_CONSTEXPR AccountCreateInfo::AccountCreateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}} {}
struct AccountCreateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountCreateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountCreateInfoDefaultTypeInternal() {}
  union {
    AccountCreateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountCreateInfoDefaultTypeInternal _AccountCreateInfo_default_instance_;
PROTOBUF_CONSTEXPR AccountLoginInfo::AccountLoginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}} {}
struct AccountLoginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountLoginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountLoginInfoDefaultTypeInternal() {}
  union {
    AccountLoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountLoginInfoDefaultTypeInternal _AccountLoginInfo_default_instance_;
}  // namespace ls
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.imodel_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountCreateInfo, _impl_.uuid_),
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::ls::AccountLoginInfo, _impl_.imodel_),
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::symphony::ls::AccountCreateInfo)},
  { 26, 42, -1, sizeof(::symphony::ls::AccountLoginInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::ls::_AccountCreateInfo_default_instance_._instance,
  &::symphony::ls::_AccountLoginInfo_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.symphony/servers/log_server/log_protob"
  "uf.proto\022\013symphony.ls\"\256\001\n\021AccountCreateI"
  "nfo\022\021\n\taccountid\030\001 \002(\003\022\017\n\007version\030\002 \001(\005\022"
  "\017\n\007channel\030\003 \001(\005\022\016\n\006optime\030\004 \002(\003\022\016\n\006imod"
  "el\030\005 \001(\t\022\014\n\004imei\030\006 \001(\t\022\n\n\002ip\030\007 \002(\t\022\016\n\006op"
  "enid\030\010 \001(\t\022\014\n\004idfa\030\t \001(\t\022\014\n\004uuid\030\n \001(\t\"\255"
  "\001\n\020AccountLoginInfo\022\021\n\taccountid\030\001 \002(\003\022\017"
  "\n\007version\030\002 \001(\005\022\017\n\007channel\030\003 \001(\005\022\016\n\006opti"
  "me\030\004 \002(\003\022\n\n\002ip\030\005 \002(\t\022\016\n\006openid\030\006 \001(\t\022\014\n\004"
  "uuid\030\007 \001(\t\022\014\n\004idfa\030\010 \001(\t\022\014\n\004imei\030\t \001(\t\022\016"
  "\n\006imodel\030\n \001(\t"
  ;
static ::_pbi::once_flag descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto = {
    false, false, 414, descriptor_table_protodef_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto,
    "symphony/servers/log_server/log_protobuf.proto",
    &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto::offsets,
    file_level_metadata_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto, file_level_enum_descriptors_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto,
    file_level_service_descriptors_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_getter() {
  return &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto(&descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto);
namespace symphony {
namespace ls {

// ===================================================================

class AccountCreateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountCreateInfo>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_openid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000244) ^ 0x00000244) != 0;
  }
};

AccountCreateInfo::AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.ls.AccountCreateInfo)
}
AccountCreateInfo::AccountCreateInfo(const AccountCreateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountCreateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_openid()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optime_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.optime_));
  // @@protoc_insertion_point(copy_constructor:symphony.ls.AccountCreateInfo)
}

inline void AccountCreateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
  };
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountCreateInfo::~AccountCreateInfo() {
  // @@protoc_insertion_point(destructor:symphony.ls.AccountCreateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountCreateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imodel_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.uuid_.Destroy();
}

void AccountCreateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountCreateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.ls.AccountCreateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.openid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optime_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.optime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string openid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.openid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountCreateInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountCreateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.ls.AccountCreateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 accountid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // required int64 optime = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_optime(), target);
  }

  // optional string imodel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_imodel(), target);
  }

  // optional string imei = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.imei");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_imei(), target);
  }

  // required string ip = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip(), target);
  }

  // optional string openid = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.openid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_openid(), target);
  }

  // optional string idfa = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_idfa(), target);
  }

  // optional string uuid = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountCreateInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.ls.AccountCreateInfo)
  return target;
}

size_t AccountCreateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.ls.AccountCreateInfo)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t AccountCreateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.ls.AccountCreateInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000244) ^ 0x00000244) == 0) {  // All required fields are present.
    // required string ip = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string imodel = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

    // optional string imei = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional string openid = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_openid());
    }

    // optional string idfa = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string uuid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountCreateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreateInfo::GetClassData() const { return &_class_data_; }


void AccountCreateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountCreateInfo*>(&to_msg);
  auto& from = static_cast<const AccountCreateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.ls.AccountCreateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_openid(from._internal_openid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreateInfo::CopyFrom(const AccountCreateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.ls.AccountCreateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreateInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AccountCreateInfo::InternalSwap(AccountCreateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountCreateInfo, _impl_.optime_)
      + sizeof(AccountCreateInfo::_impl_.optime_)
      - PROTOBUF_FIELD_OFFSET(AccountCreateInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto[0]);
}

// ===================================================================

class AccountLoginInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountLoginInfo>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_openid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000241) ^ 0x00000241) != 0;
  }
};

AccountLoginInfo::AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.ls.AccountLoginInfo)
}
AccountLoginInfo::AccountLoginInfo(const AccountLoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountLoginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_openid()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optime_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.optime_));
  // @@protoc_insertion_point(copy_constructor:symphony.ls.AccountLoginInfo)
}

inline void AccountLoginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountLoginInfo::~AccountLoginInfo() {
  // @@protoc_insertion_point(destructor:symphony.ls.AccountLoginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountLoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.imodel_.Destroy();
}

void AccountLoginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.ls.AccountLoginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.openid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optime_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.optime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string openid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.openid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.ls.AccountLoginInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountLoginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.ls.AccountLoginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 accountid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // required int64 optime = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_optime(), target);
  }

  // required string ip = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // optional string openid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.openid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_openid(), target);
  }

  // optional string uuid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_uuid(), target);
  }

  // optional string idfa = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_idfa(), target);
  }

  // optional string imei = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.imei");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_imei(), target);
  }

  // optional string imodel = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.ls.AccountLoginInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_imodel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.ls.AccountLoginInfo)
  return target;
}

size_t AccountLoginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.ls.AccountLoginInfo)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t AccountLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.ls.AccountLoginInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000241) ^ 0x00000241) == 0) {  // All required fields are present.
    // required string ip = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string openid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_openid());
    }

    // optional string uuid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional string idfa = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string imei = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string imodel = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountLoginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountLoginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountLoginInfo::GetClassData() const { return &_class_data_; }


void AccountLoginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountLoginInfo*>(&to_msg);
  auto& from = static_cast<const AccountLoginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.ls.AccountLoginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_openid(from._internal_openid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountLoginInfo::CopyFrom(const AccountLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.ls.AccountLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AccountLoginInfo::InternalSwap(AccountLoginInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountLoginInfo, _impl_.optime_)
      + sizeof(AccountLoginInfo::_impl_.optime_)
      - PROTOBUF_FIELD_OFFSET(AccountLoginInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ls
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::ls::AccountCreateInfo*
Arena::CreateMaybeMessage< ::symphony::ls::AccountCreateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::ls::AccountCreateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::ls::AccountLoginInfo*
Arena::CreateMaybeMessage< ::symphony::ls::AccountLoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::ls::AccountLoginInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
