// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/servers/log_server/log_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto;
namespace symphony {
namespace ls {
class AccountCreateInfo;
struct AccountCreateInfoDefaultTypeInternal;
extern AccountCreateInfoDefaultTypeInternal _AccountCreateInfo_default_instance_;
class AccountLoginInfo;
struct AccountLoginInfoDefaultTypeInternal;
extern AccountLoginInfoDefaultTypeInternal _AccountLoginInfo_default_instance_;
}  // namespace ls
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> ::symphony::ls::AccountCreateInfo* Arena::CreateMaybeMessage<::symphony::ls::AccountCreateInfo>(Arena*);
template<> ::symphony::ls::AccountLoginInfo* Arena::CreateMaybeMessage<::symphony::ls::AccountLoginInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace symphony {
namespace ls {

// ===================================================================

class AccountCreateInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.ls.AccountCreateInfo) */ {
 public:
  inline AccountCreateInfo() : AccountCreateInfo(nullptr) {}
  ~AccountCreateInfo() override;
  explicit PROTOBUF_CONSTEXPR AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCreateInfo(const AccountCreateInfo& from);
  AccountCreateInfo(AccountCreateInfo&& from) noexcept
    : AccountCreateInfo() {
    *this = ::std::move(from);
  }

  inline AccountCreateInfo& operator=(const AccountCreateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreateInfo& operator=(AccountCreateInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCreateInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCreateInfo* internal_default_instance() {
    return reinterpret_cast<const AccountCreateInfo*>(
               &_AccountCreateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountCreateInfo& a, AccountCreateInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreateInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreateInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountCreateInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountCreateInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCreateInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountCreateInfo& from) {
    AccountCreateInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreateInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.ls.AccountCreateInfo";
  }
  protected:
  explicit AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImodelFieldNumber = 5,
    kImeiFieldNumber = 6,
    kIpFieldNumber = 7,
    kOpenidFieldNumber = 8,
    kIdfaFieldNumber = 9,
    kUuidFieldNumber = 10,
    kAccountidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kChannelFieldNumber = 3,
    kOptimeFieldNumber = 4,
  };
  // optional string imodel = 5;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // optional string imei = 6;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // required string ip = 7;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string openid = 8;
  bool has_openid() const;
  private:
  bool _internal_has_openid() const;
  public:
  void clear_openid();
  const std::string& openid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_openid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // optional string idfa = 9;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string uuid = 10;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // required int64 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 4;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.ls.AccountCreateInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    int64_t accountid_;
    int32_t version_;
    int32_t channel_;
    int64_t optime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class AccountLoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.ls.AccountLoginInfo) */ {
 public:
  inline AccountLoginInfo() : AccountLoginInfo(nullptr) {}
  ~AccountLoginInfo() override;
  explicit PROTOBUF_CONSTEXPR AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountLoginInfo(const AccountLoginInfo& from);
  AccountLoginInfo(AccountLoginInfo&& from) noexcept
    : AccountLoginInfo() {
    *this = ::std::move(from);
  }

  inline AccountLoginInfo& operator=(const AccountLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountLoginInfo& operator=(AccountLoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountLoginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountLoginInfo* internal_default_instance() {
    return reinterpret_cast<const AccountLoginInfo*>(
               &_AccountLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountLoginInfo& a, AccountLoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountLoginInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountLoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountLoginInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountLoginInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountLoginInfo& from) {
    AccountLoginInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountLoginInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.ls.AccountLoginInfo";
  }
  protected:
  explicit AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 5,
    kOpenidFieldNumber = 6,
    kUuidFieldNumber = 7,
    kIdfaFieldNumber = 8,
    kImeiFieldNumber = 9,
    kImodelFieldNumber = 10,
    kAccountidFieldNumber = 1,
    kVersionFieldNumber = 2,
    kChannelFieldNumber = 3,
    kOptimeFieldNumber = 4,
  };
  // required string ip = 5;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional string openid = 6;
  bool has_openid() const;
  private:
  bool _internal_has_openid() const;
  public:
  void clear_openid();
  const std::string& openid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_openid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_openid();
  PROTOBUF_NODISCARD std::string* release_openid();
  void set_allocated_openid(std::string* openid);
  private:
  const std::string& _internal_openid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_openid(const std::string& value);
  std::string* _internal_mutable_openid();
  public:

  // optional string uuid = 7;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string idfa = 8;
  bool has_idfa() const;
  private:
  bool _internal_has_idfa() const;
  public:
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_NODISCARD std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // optional string imei = 9;
  bool has_imei() const;
  private:
  bool _internal_has_imei() const;
  public:
  void clear_imei();
  const std::string& imei() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imei(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imei();
  PROTOBUF_NODISCARD std::string* release_imei();
  void set_allocated_imei(std::string* imei);
  private:
  const std::string& _internal_imei() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imei(const std::string& value);
  std::string* _internal_mutable_imei();
  public:

  // optional string imodel = 10;
  bool has_imodel() const;
  private:
  bool _internal_has_imodel() const;
  public:
  void clear_imodel();
  const std::string& imodel() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_imodel(ArgT0&& arg0, ArgT... args);
  std::string* mutable_imodel();
  PROTOBUF_NODISCARD std::string* release_imodel();
  void set_allocated_imodel(std::string* imodel);
  private:
  const std::string& _internal_imodel() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imodel(const std::string& value);
  std::string* _internal_mutable_imodel();
  public:

  // required int64 accountid = 1;
  bool has_accountid() const;
  private:
  bool _internal_has_accountid() const;
  public:
  void clear_accountid();
  int64_t accountid() const;
  void set_accountid(int64_t value);
  private:
  int64_t _internal_accountid() const;
  void _internal_set_accountid(int64_t value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int32_t version() const;
  void set_version(int32_t value);
  private:
  int32_t _internal_version() const;
  void _internal_set_version(int32_t value);
  public:

  // optional int32 channel = 3;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  int32_t channel() const;
  void set_channel(int32_t value);
  private:
  int32_t _internal_channel() const;
  void _internal_set_channel(int32_t value);
  public:

  // required int64 optime = 4;
  bool has_optime() const;
  private:
  bool _internal_has_optime() const;
  public:
  void clear_optime();
  int64_t optime() const;
  void set_optime(int64_t value);
  private:
  int64_t _internal_optime() const;
  void _internal_set_optime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.ls.AccountLoginInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr openid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imei_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imodel_;
    int64_t accountid_;
    int32_t version_;
    int32_t channel_;
    int64_t optime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountCreateInfo

// required int64 accountid = 1;
inline bool AccountCreateInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void AccountCreateInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AccountCreateInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t AccountCreateInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.accountid)
  return _internal_accountid();
}
inline void AccountCreateInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void AccountCreateInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.accountid)
}

// optional int32 version = 2;
inline bool AccountCreateInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_version() const {
  return _internal_has_version();
}
inline void AccountCreateInfo::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t AccountCreateInfo::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AccountCreateInfo::version() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.version)
  return _internal_version();
}
inline void AccountCreateInfo::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.version_ = value;
}
inline void AccountCreateInfo::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.version)
}

// optional int32 channel = 3;
inline bool AccountCreateInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_channel() const {
  return _internal_has_channel();
}
inline void AccountCreateInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t AccountCreateInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t AccountCreateInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.channel)
  return _internal_channel();
}
inline void AccountCreateInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_ = value;
}
inline void AccountCreateInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.channel)
}

// required int64 optime = 4;
inline bool AccountCreateInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_optime() const {
  return _internal_has_optime();
}
inline void AccountCreateInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t AccountCreateInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t AccountCreateInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.optime)
  return _internal_optime();
}
inline void AccountCreateInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void AccountCreateInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.optime)
}

// optional string imodel = 5;
inline bool AccountCreateInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void AccountCreateInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountCreateInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.imodel)
}
inline std::string* AccountCreateInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.imodel)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void AccountCreateInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.imodel)
}

// optional string imei = 6;
inline bool AccountCreateInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_imei() const {
  return _internal_has_imei();
}
inline void AccountCreateInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountCreateInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.imei)
}
inline std::string* AccountCreateInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.imei)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void AccountCreateInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.imei)
}

// required string ip = 7;
inline bool AccountCreateInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_ip() const {
  return _internal_has_ip();
}
inline void AccountCreateInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountCreateInfo::ip() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.ip)
}
inline std::string* AccountCreateInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.ip)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AccountCreateInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_ip() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.ip)
}

// optional string openid = 8;
inline bool AccountCreateInfo::_internal_has_openid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_openid() const {
  return _internal_has_openid();
}
inline void AccountCreateInfo::clear_openid() {
  _impl_.openid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccountCreateInfo::openid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.openid)
  return _internal_openid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_openid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.openid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.openid)
}
inline std::string* AccountCreateInfo::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.openid)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void AccountCreateInfo::_internal_set_openid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_openid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.openid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_openid() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.openid)
  if (!_internal_has_openid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.openid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.openid_.SetAllocated(openid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.openid)
}

// optional string idfa = 9;
inline bool AccountCreateInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void AccountCreateInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AccountCreateInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.idfa)
}
inline std::string* AccountCreateInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.idfa)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void AccountCreateInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.idfa)
}

// optional string uuid = 10;
inline bool AccountCreateInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountCreateInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void AccountCreateInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AccountCreateInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountCreateInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountCreateInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountCreateInfo.uuid)
}
inline std::string* AccountCreateInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountCreateInfo.uuid)
  return _s;
}
inline const std::string& AccountCreateInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void AccountCreateInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountCreateInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountCreateInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountCreateInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountCreateInfo.uuid)
}

// -------------------------------------------------------------------

// AccountLoginInfo

// required int64 accountid = 1;
inline bool AccountLoginInfo::_internal_has_accountid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_accountid() const {
  return _internal_has_accountid();
}
inline void AccountLoginInfo::clear_accountid() {
  _impl_.accountid_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int64_t AccountLoginInfo::_internal_accountid() const {
  return _impl_.accountid_;
}
inline int64_t AccountLoginInfo::accountid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.accountid)
  return _internal_accountid();
}
inline void AccountLoginInfo::_internal_set_accountid(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.accountid_ = value;
}
inline void AccountLoginInfo::set_accountid(int64_t value) {
  _internal_set_accountid(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.accountid)
}

// optional int32 version = 2;
inline bool AccountLoginInfo::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_version() const {
  return _internal_has_version();
}
inline void AccountLoginInfo::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t AccountLoginInfo::_internal_version() const {
  return _impl_.version_;
}
inline int32_t AccountLoginInfo::version() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.version)
  return _internal_version();
}
inline void AccountLoginInfo::_internal_set_version(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.version_ = value;
}
inline void AccountLoginInfo::set_version(int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.version)
}

// optional int32 channel = 3;
inline bool AccountLoginInfo::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_channel() const {
  return _internal_has_channel();
}
inline void AccountLoginInfo::clear_channel() {
  _impl_.channel_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t AccountLoginInfo::_internal_channel() const {
  return _impl_.channel_;
}
inline int32_t AccountLoginInfo::channel() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.channel)
  return _internal_channel();
}
inline void AccountLoginInfo::_internal_set_channel(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_ = value;
}
inline void AccountLoginInfo::set_channel(int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.channel)
}

// required int64 optime = 4;
inline bool AccountLoginInfo::_internal_has_optime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_optime() const {
  return _internal_has_optime();
}
inline void AccountLoginInfo::clear_optime() {
  _impl_.optime_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int64_t AccountLoginInfo::_internal_optime() const {
  return _impl_.optime_;
}
inline int64_t AccountLoginInfo::optime() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.optime)
  return _internal_optime();
}
inline void AccountLoginInfo::_internal_set_optime(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.optime_ = value;
}
inline void AccountLoginInfo::set_optime(int64_t value) {
  _internal_set_optime(value);
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.optime)
}

// required string ip = 5;
inline bool AccountLoginInfo::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_ip() const {
  return _internal_has_ip();
}
inline void AccountLoginInfo::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AccountLoginInfo::ip() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.ip)
}
inline std::string* AccountLoginInfo::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.ip)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void AccountLoginInfo::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_ip() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.ip)
}

// optional string openid = 6;
inline bool AccountLoginInfo::_internal_has_openid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_openid() const {
  return _internal_has_openid();
}
inline void AccountLoginInfo::clear_openid() {
  _impl_.openid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AccountLoginInfo::openid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.openid)
  return _internal_openid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_openid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.openid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.openid)
}
inline std::string* AccountLoginInfo::mutable_openid() {
  std::string* _s = _internal_mutable_openid();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.openid)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_openid() const {
  return _impl_.openid_.Get();
}
inline void AccountLoginInfo::_internal_set_openid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.openid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_openid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.openid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_openid() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.openid)
  if (!_internal_has_openid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.openid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_openid(std::string* openid) {
  if (openid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.openid_.SetAllocated(openid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.openid_.IsDefault()) {
    _impl_.openid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.openid)
}

// optional string uuid = 7;
inline bool AccountLoginInfo::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_uuid() const {
  return _internal_has_uuid();
}
inline void AccountLoginInfo::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AccountLoginInfo::uuid() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.uuid)
}
inline std::string* AccountLoginInfo::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.uuid)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void AccountLoginInfo::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_uuid() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.uuid)
}

// optional string idfa = 8;
inline bool AccountLoginInfo::_internal_has_idfa() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_idfa() const {
  return _internal_has_idfa();
}
inline void AccountLoginInfo::clear_idfa() {
  _impl_.idfa_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AccountLoginInfo::idfa() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.idfa_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.idfa)
}
inline std::string* AccountLoginInfo::mutable_idfa() {
  std::string* _s = _internal_mutable_idfa();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.idfa)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_idfa() const {
  return _impl_.idfa_.Get();
}
inline void AccountLoginInfo::_internal_set_idfa(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.idfa_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_idfa() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.idfa_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.idfa)
  if (!_internal_has_idfa()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.idfa_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.idfa_.SetAllocated(idfa, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.idfa_.IsDefault()) {
    _impl_.idfa_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.idfa)
}

// optional string imei = 9;
inline bool AccountLoginInfo::_internal_has_imei() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_imei() const {
  return _internal_has_imei();
}
inline void AccountLoginInfo::clear_imei() {
  _impl_.imei_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AccountLoginInfo::imei() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.imei)
  return _internal_imei();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_imei(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.imei_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.imei)
}
inline std::string* AccountLoginInfo::mutable_imei() {
  std::string* _s = _internal_mutable_imei();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.imei)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_imei() const {
  return _impl_.imei_.Get();
}
inline void AccountLoginInfo::_internal_set_imei(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.imei_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_imei() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.imei_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_imei() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.imei)
  if (!_internal_has_imei()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.imei_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_imei(std::string* imei) {
  if (imei != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.imei_.SetAllocated(imei, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imei_.IsDefault()) {
    _impl_.imei_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.imei)
}

// optional string imodel = 10;
inline bool AccountLoginInfo::_internal_has_imodel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AccountLoginInfo::has_imodel() const {
  return _internal_has_imodel();
}
inline void AccountLoginInfo::clear_imodel() {
  _impl_.imodel_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AccountLoginInfo::imodel() const {
  // @@protoc_insertion_point(field_get:symphony.ls.AccountLoginInfo.imodel)
  return _internal_imodel();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountLoginInfo::set_imodel(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.imodel_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.ls.AccountLoginInfo.imodel)
}
inline std::string* AccountLoginInfo::mutable_imodel() {
  std::string* _s = _internal_mutable_imodel();
  // @@protoc_insertion_point(field_mutable:symphony.ls.AccountLoginInfo.imodel)
  return _s;
}
inline const std::string& AccountLoginInfo::_internal_imodel() const {
  return _impl_.imodel_.Get();
}
inline void AccountLoginInfo::_internal_set_imodel(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.imodel_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::_internal_mutable_imodel() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.imodel_.Mutable(GetArenaForAllocation());
}
inline std::string* AccountLoginInfo::release_imodel() {
  // @@protoc_insertion_point(field_release:symphony.ls.AccountLoginInfo.imodel)
  if (!_internal_has_imodel()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.imodel_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AccountLoginInfo::set_allocated_imodel(std::string* imodel) {
  if (imodel != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.imodel_.SetAllocated(imodel, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.imodel_.IsDefault()) {
    _impl_.imodel_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.ls.AccountLoginInfo.imodel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ls
}  // namespace symphony

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_symphony_2fservers_2flog_5fserver_2flog_5fprotobuf_2eproto
