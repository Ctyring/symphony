// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_role.proto

#include "symphony/proto/msg_role.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR RoleItem::RoleItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.carrer_)*/0
  , /*decltype(_impl_.level_)*/0} {}
struct RoleItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleItemDefaultTypeInternal() {}
  union {
    RoleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleItemDefaultTypeInternal _RoleItem_default_instance_;
PROTOBUF_CONSTEXPR RoleListReq::RoleListReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.logincode_)*/0
  , /*decltype(_impl_.serverid_)*/0u} {}
struct RoleListReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleListReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleListReqDefaultTypeInternal() {}
  union {
    RoleListReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleListReqDefaultTypeInternal _RoleListReq_default_instance_;
PROTOBUF_CONSTEXPR RoleListAck::RoleListAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rolelist_)*/{}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u} {}
struct RoleListAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleListAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleListAckDefaultTypeInternal() {}
  union {
    RoleListAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleListAckDefaultTypeInternal _RoleListAck_default_instance_;
PROTOBUF_CONSTEXPR RoleCreateReq::RoleCreateReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.carrer_)*/0
  , /*decltype(_impl_.channel_)*/0} {}
struct RoleCreateReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleCreateReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleCreateReqDefaultTypeInternal() {}
  union {
    RoleCreateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleCreateReqDefaultTypeInternal _RoleCreateReq_default_instance_;
PROTOBUF_CONSTEXPR RoleCreateAck::RoleCreateAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.carrer_)*/0} {}
struct RoleCreateAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleCreateAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleCreateAckDefaultTypeInternal() {}
  union {
    RoleCreateAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleCreateAckDefaultTypeInternal _RoleCreateAck_default_instance_;
PROTOBUF_CONSTEXPR RoleDeleteReq::RoleDeleteReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}} {}
struct RoleDeleteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDeleteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDeleteReqDefaultTypeInternal() {}
  union {
    RoleDeleteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDeleteReqDefaultTypeInternal _RoleDeleteReq_default_instance_;
PROTOBUF_CONSTEXPR RoleDeleteAck::RoleDeleteAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.retcode_)*/0u} {}
struct RoleDeleteAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDeleteAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDeleteAckDefaultTypeInternal() {}
  union {
    RoleDeleteAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDeleteAckDefaultTypeInternal _RoleDeleteAck_default_instance_;
PROTOBUF_CONSTEXPR RoleLoginReq::RoleLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.langid_)*/0} {}
struct RoleLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLoginReqDefaultTypeInternal() {}
  union {
    RoleLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLoginReqDefaultTypeInternal _RoleLoginReq_default_instance_;
PROTOBUF_CONSTEXPR RoleLogoutReq::RoleLogoutReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}} {}
struct RoleLogoutReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLogoutReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLogoutReqDefaultTypeInternal() {}
  union {
    RoleLogoutReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLogoutReqDefaultTypeInternal _RoleLogoutReq_default_instance_;
PROTOBUF_CONSTEXPR RoleLogoutAck::RoleLogoutAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.retcode_)*/0u} {}
struct RoleLogoutAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLogoutAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLogoutAckDefaultTypeInternal() {}
  union {
    RoleLogoutAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLogoutAckDefaultTypeInternal _RoleLogoutAck_default_instance_;
PROTOBUF_CONSTEXPR RoleOtherLoginNty::RoleOtherLoginNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.retcode_)*/0u} {}
struct RoleOtherLoginNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleOtherLoginNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleOtherLoginNtyDefaultTypeInternal() {}
  union {
    RoleOtherLoginNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleOtherLoginNtyDefaultTypeInternal _RoleOtherLoginNty_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2fmsg_5frole_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2fmsg_5frole_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2fmsg_5frole_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _impl_.carrer_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleItem, _impl_.level_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListReq, _impl_.logincode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListReq, _impl_.serverid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListAck, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleListAck, _impl_.rolelist_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _impl_.carrer_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateReq, _impl_.channel_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateAck, _impl_.carrer_),
  3,
  1,
  2,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteReq, _impl_.roleid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDeleteAck, _impl_.retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginReq, _impl_.langid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutReq, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutReq, _impl_.accountid_),
  0,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutAck, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutAck, _impl_.retcode_),
  0,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleOtherLoginNty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleOtherLoginNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleOtherLoginNty, _impl_.retcode_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::symphony::proto::RoleItem)},
  { 14, 23, -1, sizeof(::symphony::proto::RoleListReq)},
  { 26, 35, -1, sizeof(::symphony::proto::RoleListAck)},
  { 38, 48, -1, sizeof(::symphony::proto::RoleCreateReq)},
  { 52, 63, -1, sizeof(::symphony::proto::RoleCreateAck)},
  { 68, 76, -1, sizeof(::symphony::proto::RoleDeleteReq)},
  { 78, 85, -1, sizeof(::symphony::proto::RoleDeleteAck)},
  { 86, 95, -1, sizeof(::symphony::proto::RoleLoginReq)},
  { 98, 105, -1, sizeof(::symphony::proto::RoleLogoutReq)},
  { 106, 113, -1, sizeof(::symphony::proto::RoleLogoutAck)},
  { 114, 121, -1, sizeof(::symphony::proto::RoleOtherLoginNty)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_RoleItem_default_instance_._instance,
  &::symphony::proto::_RoleListReq_default_instance_._instance,
  &::symphony::proto::_RoleListAck_default_instance_._instance,
  &::symphony::proto::_RoleCreateReq_default_instance_._instance,
  &::symphony::proto::_RoleCreateAck_default_instance_._instance,
  &::symphony::proto::_RoleDeleteReq_default_instance_._instance,
  &::symphony::proto::_RoleDeleteAck_default_instance_._instance,
  &::symphony::proto::_RoleLoginReq_default_instance_._instance,
  &::symphony::proto::_RoleLogoutReq_default_instance_._instance,
  &::symphony::proto::_RoleLogoutAck_default_instance_._instance,
  &::symphony::proto::_RoleOtherLoginNty_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2fmsg_5frole_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035symphony/proto/msg_role.proto\022\016symphon"
  "y.proto\"G\n\010RoleItem\022\016\n\006RoleID\030\001 \001(\004\022\014\n\004N"
  "ame\030\002 \001(\t\022\016\n\006Carrer\030\003 \001(\005\022\r\n\005Level\030\004 \001(\005"
  "\"E\n\013RoleListReq\022\021\n\tAccountID\030\001 \001(\004\022\021\n\tLo"
  "ginCode\030\002 \001(\005\022\020\n\010ServerID\030\003 \001(\r\"]\n\013RoleL"
  "istAck\022\017\n\007RetCode\030\001 \001(\r\022\021\n\tAccountID\030\002 \001"
  "(\004\022*\n\010RoleList\030\003 \003(\0132\030.symphony.proto.Ro"
  "leItem\"Q\n\rRoleCreateReq\022\021\n\tAccountID\030\001 \001"
  "(\004\022\014\n\004Name\030\002 \001(\t\022\016\n\006Carrer\030\003 \001(\005\022\017\n\007Chan"
  "nel\030\004 \001(\005\"a\n\rRoleCreateAck\022\017\n\007RetCode\030\001 "
  "\001(\r\022\021\n\tAccountID\030\002 \001(\004\022\016\n\006RoleID\030\003 \001(\004\022\014"
  "\n\004Name\030\004 \001(\t\022\016\n\006Carrer\030\005 \001(\005\"2\n\rRoleDele"
  "teReq\022\021\n\tAccountID\030\001 \001(\004\022\016\n\006RoleID\030\002 \001(\004"
  "\" \n\rRoleDeleteAck\022\017\n\007RetCode\030\001 \001(\r\"A\n\014Ro"
  "leLoginReq\022\021\n\tAccountID\030\001 \001(\004\022\016\n\006RoleID\030"
  "\002 \001(\004\022\016\n\006LangID\030\003 \001(\005\"\"\n\rRoleLogoutReq\022\021"
  "\n\tAccountID\030\001 \001(\004\" \n\rRoleLogoutAck\022\017\n\007Re"
  "tCode\030\001 \001(\r\"$\n\021RoleOtherLoginNty\022\017\n\007RetC"
  "ode\030\001 \001(\r"
  ;
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto = {
    false, false, 729, descriptor_table_protodef_symphony_2fproto_2fmsg_5frole_2eproto,
    "symphony/proto/msg_role.proto",
    &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2fmsg_5frole_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto, file_level_enum_descriptors_symphony_2fproto_2fmsg_5frole_2eproto,
    file_level_service_descriptors_symphony_2fproto_2fmsg_5frole_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2fmsg_5frole_2eproto(&descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class RoleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleItem>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carrer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RoleItem::RoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleItem)
}
RoleItem::RoleItem(const RoleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.carrer_){}
    , decltype(_impl_.level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleItem)
}

inline void RoleItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.carrer_){0}
    , decltype(_impl_.level_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleItem::~RoleItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RoleItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleItem.Name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 Carrer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_carrer(&has_bits);
          _impl_.carrer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 RoleID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleItem.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 Carrer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrer(), target);
  }

  // optional int32 Level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleItem)
  return target;
}

size_t RoleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 RoleID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional int32 Carrer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrer());
    }

    // optional int32 Level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleItem::GetClassData() const { return &_class_data_; }


void RoleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleItem*>(&to_msg);
  auto& from = static_cast<const RoleItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.carrer_ = from._impl_.carrer_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleItem::CopyFrom(const RoleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItem::IsInitialized() const {
  return true;
}

void RoleItem::InternalSwap(RoleItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleItem, _impl_.level_)
      + sizeof(RoleItem::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(RoleItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[0]);
}

// ===================================================================

class RoleListReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleListReq>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logincode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serverid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RoleListReq::RoleListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleListReq)
}
RoleListReq::RoleListReq(const RoleListReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleListReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.logincode_){}
    , decltype(_impl_.serverid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleListReq)
}

inline void RoleListReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.logincode_){0}
    , decltype(_impl_.serverid_){0u}
  };
}

RoleListReq::~RoleListReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleListReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleListReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleListReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleListReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleListReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.serverid_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.serverid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleListReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 LoginCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logincode(&has_bits);
          _impl_.logincode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ServerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_serverid(&has_bits);
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleListReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleListReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional int32 LoginCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_logincode(), target);
  }

  // optional uint32 ServerID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleListReq)
  return target;
}

size_t RoleListReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleListReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 AccountID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional int32 LoginCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logincode());
    }

    // optional uint32 ServerID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleListReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleListReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleListReq::GetClassData() const { return &_class_data_; }


void RoleListReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleListReq*>(&to_msg);
  auto& from = static_cast<const RoleListReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleListReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.logincode_ = from._impl_.logincode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.serverid_ = from._impl_.serverid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleListReq::CopyFrom(const RoleListReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleListReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListReq::IsInitialized() const {
  return true;
}

void RoleListReq::InternalSwap(RoleListReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleListReq, _impl_.serverid_)
      + sizeof(RoleListReq::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(RoleListReq, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleListReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[1]);
}

// ===================================================================

class RoleListAck::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleListAck>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleListAck::RoleListAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleListAck)
}
RoleListAck::RoleListAck(const RoleListAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleListAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolelist_){from._impl_.rolelist_}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleListAck)
}

inline void RoleListAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolelist_){arena}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
  };
}

RoleListAck::~RoleListAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleListAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleListAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rolelist_.~RepeatedPtrField();
}

void RoleListAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleListAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleListAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rolelist_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retcode_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.retcode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleListAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.RoleItem RoleList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rolelist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleListAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleListAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint64 AccountID = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // repeated .symphony.proto.RoleItem RoleList = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rolelist_size()); i < n; i++) {
    const auto& repfield = this->_internal_rolelist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleListAck)
  return target;
}

size_t RoleListAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleListAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.RoleItem RoleList = 3;
  total_size += 1UL * this->_internal_rolelist_size();
  for (const auto& msg : this->_impl_.rolelist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 AccountID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional uint32 RetCode = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleListAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleListAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleListAck::GetClassData() const { return &_class_data_; }


void RoleListAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleListAck*>(&to_msg);
  auto& from = static_cast<const RoleListAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleListAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rolelist_.MergeFrom(from._impl_.rolelist_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.retcode_ = from._impl_.retcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleListAck::CopyFrom(const RoleListAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleListAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListAck::IsInitialized() const {
  return true;
}

void RoleListAck::InternalSwap(RoleListAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rolelist_.InternalSwap(&other->_impl_.rolelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleListAck, _impl_.retcode_)
      + sizeof(RoleListAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(RoleListAck, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleListAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[2]);
}

// ===================================================================

class RoleCreateReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleCreateReq>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carrer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RoleCreateReq::RoleCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleCreateReq)
}
RoleCreateReq::RoleCreateReq(const RoleCreateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleCreateReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.carrer_){}
    , decltype(_impl_.channel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channel_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.channel_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleCreateReq)
}

inline void RoleCreateReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.carrer_){0}
    , decltype(_impl_.channel_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleCreateReq::~RoleCreateReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleCreateReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleCreateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RoleCreateReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleCreateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.channel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleCreateReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateReq.Name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 Carrer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_carrer(&has_bits);
          _impl_.carrer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 Channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleCreateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleCreateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional string Name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateReq.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 Carrer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrer(), target);
  }

  // optional int32 Channel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleCreateReq)
  return target;
}

size_t RoleCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleCreateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string Name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 AccountID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional int32 Carrer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrer());
    }

    // optional int32 Channel = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleCreateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleCreateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleCreateReq::GetClassData() const { return &_class_data_; }


void RoleCreateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleCreateReq*>(&to_msg);
  auto& from = static_cast<const RoleCreateReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleCreateReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.carrer_ = from._impl_.carrer_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleCreateReq::CopyFrom(const RoleCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCreateReq::IsInitialized() const {
  return true;
}

void RoleCreateReq::InternalSwap(RoleCreateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleCreateReq, _impl_.channel_)
      + sizeof(RoleCreateReq::_impl_.channel_)
      - PROTOBUF_FIELD_OFFSET(RoleCreateReq, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleCreateReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[3]);
}

// ===================================================================

class RoleCreateAck::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleCreateAck>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carrer(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RoleCreateAck::RoleCreateAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleCreateAck)
}
RoleCreateAck::RoleCreateAck(const RoleCreateAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleCreateAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.retcode_){}
    , decltype(_impl_.carrer_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.carrer_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.carrer_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleCreateAck)
}

inline void RoleCreateAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , decltype(_impl_.carrer_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleCreateAck::~RoleCreateAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleCreateAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleCreateAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void RoleCreateAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleCreateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleCreateAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.carrer_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.carrer_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleCreateAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateAck.Name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 Carrer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_carrer(&has_bits);
          _impl_.carrer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleCreateAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleCreateAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // optional uint64 AccountID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // optional uint64 RoleID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_roleid(), target);
  }

  // optional string Name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateAck.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // optional int32 Carrer = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_carrer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleCreateAck)
  return target;
}

size_t RoleCreateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleCreateAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string Name = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint64 AccountID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional uint64 RoleID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional uint32 RetCode = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
    }

    // optional int32 Carrer = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrer());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleCreateAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleCreateAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleCreateAck::GetClassData() const { return &_class_data_; }


void RoleCreateAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleCreateAck*>(&to_msg);
  auto& from = static_cast<const RoleCreateAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleCreateAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.retcode_ = from._impl_.retcode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.carrer_ = from._impl_.carrer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleCreateAck::CopyFrom(const RoleCreateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleCreateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCreateAck::IsInitialized() const {
  return true;
}

void RoleCreateAck::InternalSwap(RoleCreateAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleCreateAck, _impl_.carrer_)
      + sizeof(RoleCreateAck::_impl_.carrer_)
      - PROTOBUF_FIELD_OFFSET(RoleCreateAck, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleCreateAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[4]);
}

// ===================================================================

class RoleDeleteReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleDeleteReq>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RoleDeleteReq::RoleDeleteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleDeleteReq)
}
RoleDeleteReq::RoleDeleteReq(const RoleDeleteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDeleteReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.roleid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roleid_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.roleid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleDeleteReq)
}

inline void RoleDeleteReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
  };
}

RoleDeleteReq::~RoleDeleteReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleDeleteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDeleteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDeleteReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDeleteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleDeleteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.roleid_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.roleid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDeleteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDeleteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleDeleteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 RoleID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleDeleteReq)
  return target;
}

size_t RoleDeleteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleDeleteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 AccountID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional uint64 RoleID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDeleteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDeleteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDeleteReq::GetClassData() const { return &_class_data_; }


void RoleDeleteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDeleteReq*>(&to_msg);
  auto& from = static_cast<const RoleDeleteReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleDeleteReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDeleteReq::CopyFrom(const RoleDeleteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleDeleteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDeleteReq::IsInitialized() const {
  return true;
}

void RoleDeleteReq::InternalSwap(RoleDeleteReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDeleteReq, _impl_.roleid_)
      + sizeof(RoleDeleteReq::_impl_.roleid_)
      - PROTOBUF_FIELD_OFFSET(RoleDeleteReq, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDeleteReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[5]);
}

// ===================================================================

class RoleDeleteAck::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleDeleteAck>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleDeleteAck::RoleDeleteAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleDeleteAck)
}
RoleDeleteAck::RoleDeleteAck(const RoleDeleteAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDeleteAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleDeleteAck)
}

inline void RoleDeleteAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){0u}
  };
}

RoleDeleteAck::~RoleDeleteAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleDeleteAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDeleteAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDeleteAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDeleteAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleDeleteAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDeleteAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDeleteAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleDeleteAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleDeleteAck)
  return target;
}

size_t RoleDeleteAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleDeleteAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 RetCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDeleteAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDeleteAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDeleteAck::GetClassData() const { return &_class_data_; }


void RoleDeleteAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDeleteAck*>(&to_msg);
  auto& from = static_cast<const RoleDeleteAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleDeleteAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDeleteAck::CopyFrom(const RoleDeleteAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleDeleteAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDeleteAck::IsInitialized() const {
  return true;
}

void RoleDeleteAck::InternalSwap(RoleDeleteAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDeleteAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[6]);
}

// ===================================================================

class RoleLoginReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleLoginReq>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_langid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RoleLoginReq::RoleLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleLoginReq)
}
RoleLoginReq::RoleLoginReq(const RoleLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.langid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.langid_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.langid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleLoginReq)
}

inline void RoleLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.langid_){0}
  };
}

RoleLoginReq::~RoleLoginReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.langid_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.langid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 LangID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_langid(&has_bits);
          _impl_.langid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint64 RoleID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // optional int32 LangID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_langid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleLoginReq)
  return target;
}

size_t RoleLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 AccountID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
    }

    // optional uint64 RoleID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
    }

    // optional int32 LangID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_langid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLoginReq::GetClassData() const { return &_class_data_; }


void RoleLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLoginReq*>(&to_msg);
  auto& from = static_cast<const RoleLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.langid_ = from._impl_.langid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLoginReq::CopyFrom(const RoleLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLoginReq::IsInitialized() const {
  return true;
}

void RoleLoginReq::InternalSwap(RoleLoginReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleLoginReq, _impl_.langid_)
      + sizeof(RoleLoginReq::_impl_.langid_)
      - PROTOBUF_FIELD_OFFSET(RoleLoginReq, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[7]);
}

// ===================================================================

class RoleLogoutReq::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleLogoutReq>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleLogoutReq::RoleLogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleLogoutReq)
}
RoleLogoutReq::RoleLogoutReq(const RoleLogoutReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLogoutReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accountid_ = from._impl_.accountid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleLogoutReq)
}

inline void RoleLogoutReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accountid_){uint64_t{0u}}
  };
}

RoleLogoutReq::~RoleLogoutReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleLogoutReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLogoutReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleLogoutReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLogoutReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleLogoutReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accountid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLogoutReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLogoutReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleLogoutReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 AccountID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleLogoutReq)
  return target;
}

size_t RoleLogoutReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleLogoutReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 AccountID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLogoutReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLogoutReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLogoutReq::GetClassData() const { return &_class_data_; }


void RoleLogoutReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLogoutReq*>(&to_msg);
  auto& from = static_cast<const RoleLogoutReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleLogoutReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accountid()) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLogoutReq::CopyFrom(const RoleLogoutReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleLogoutReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLogoutReq::IsInitialized() const {
  return true;
}

void RoleLogoutReq::InternalSwap(RoleLogoutReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accountid_, other->_impl_.accountid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLogoutReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[8]);
}

// ===================================================================

class RoleLogoutAck::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleLogoutAck>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleLogoutAck::RoleLogoutAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleLogoutAck)
}
RoleLogoutAck::RoleLogoutAck(const RoleLogoutAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLogoutAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleLogoutAck)
}

inline void RoleLogoutAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){0u}
  };
}

RoleLogoutAck::~RoleLogoutAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleLogoutAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLogoutAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleLogoutAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLogoutAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleLogoutAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLogoutAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLogoutAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleLogoutAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleLogoutAck)
  return target;
}

size_t RoleLogoutAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleLogoutAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 RetCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLogoutAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLogoutAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLogoutAck::GetClassData() const { return &_class_data_; }


void RoleLogoutAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLogoutAck*>(&to_msg);
  auto& from = static_cast<const RoleLogoutAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleLogoutAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLogoutAck::CopyFrom(const RoleLogoutAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleLogoutAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLogoutAck::IsInitialized() const {
  return true;
}

void RoleLogoutAck::InternalSwap(RoleLogoutAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLogoutAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[9]);
}

// ===================================================================

class RoleOtherLoginNty::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleOtherLoginNty>()._impl_._has_bits_);
  static void set_has_retcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RoleOtherLoginNty::RoleOtherLoginNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleOtherLoginNty)
}
RoleOtherLoginNty::RoleOtherLoginNty(const RoleOtherLoginNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleOtherLoginNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleOtherLoginNty)
}

inline void RoleOtherLoginNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.retcode_){0u}
  };
}

RoleOtherLoginNty::~RoleOtherLoginNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleOtherLoginNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleOtherLoginNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleOtherLoginNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleOtherLoginNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleOtherLoginNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleOtherLoginNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_retcode(&has_bits);
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleOtherLoginNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleOtherLoginNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 RetCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleOtherLoginNty)
  return target;
}

size_t RoleOtherLoginNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleOtherLoginNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 RetCode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleOtherLoginNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleOtherLoginNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleOtherLoginNty::GetClassData() const { return &_class_data_; }


void RoleOtherLoginNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleOtherLoginNty*>(&to_msg);
  auto& from = static_cast<const RoleOtherLoginNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleOtherLoginNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_retcode()) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleOtherLoginNty::CopyFrom(const RoleOtherLoginNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleOtherLoginNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleOtherLoginNty::IsInitialized() const {
  return true;
}

void RoleOtherLoginNty::InternalSwap(RoleOtherLoginNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleOtherLoginNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5frole_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5frole_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleItem*
Arena::CreateMaybeMessage< ::symphony::proto::RoleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleListReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleListReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleListReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleListAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleListAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleListAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleCreateReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleCreateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleCreateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleCreateAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleCreateAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleCreateAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleDeleteReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleDeleteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleDeleteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleDeleteAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleDeleteAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleDeleteAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleLoginReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleLogoutReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleLogoutReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleLogoutReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleLogoutAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleLogoutAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleLogoutAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleOtherLoginNty*
Arena::CreateMaybeMessage< ::symphony::proto::RoleOtherLoginNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleOtherLoginNty >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
