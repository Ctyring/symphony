// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_copy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5fcopy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5fcopy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "symphony/proto/msg_base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_symphony_2fproto_2fmsg_5fcopy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5fcopy_2eproto;
namespace symphony {
namespace proto {
class BattleResultNty;
struct BattleResultNtyDefaultTypeInternal;
extern BattleResultNtyDefaultTypeInternal _BattleResultNty_default_instance_;
class MainCopyAck;
struct MainCopyAckDefaultTypeInternal;
extern MainCopyAckDefaultTypeInternal _MainCopyAck_default_instance_;
class MainCopyReq;
struct MainCopyReqDefaultTypeInternal;
extern MainCopyReqDefaultTypeInternal _MainCopyReq_default_instance_;
class MainCopyResultNty;
struct MainCopyResultNtyDefaultTypeInternal;
extern MainCopyResultNtyDefaultTypeInternal _MainCopyResultNty_default_instance_;
class Msg_BroadRoomNotify;
struct Msg_BroadRoomNotifyDefaultTypeInternal;
extern Msg_BroadRoomNotifyDefaultTypeInternal _Msg_BroadRoomNotify_default_instance_;
class Msg_CreateRoomAck;
struct Msg_CreateRoomAckDefaultTypeInternal;
extern Msg_CreateRoomAckDefaultTypeInternal _Msg_CreateRoomAck_default_instance_;
class Msg_CreateRoomReq;
struct Msg_CreateRoomReqDefaultTypeInternal;
extern Msg_CreateRoomReqDefaultTypeInternal _Msg_CreateRoomReq_default_instance_;
class Msg_JoinRoomAck;
struct Msg_JoinRoomAckDefaultTypeInternal;
extern Msg_JoinRoomAckDefaultTypeInternal _Msg_JoinRoomAck_default_instance_;
class Msg_JoinRoomReq;
struct Msg_JoinRoomReqDefaultTypeInternal;
extern Msg_JoinRoomReqDefaultTypeInternal _Msg_JoinRoomReq_default_instance_;
class Msg_KickRoomAck;
struct Msg_KickRoomAckDefaultTypeInternal;
extern Msg_KickRoomAckDefaultTypeInternal _Msg_KickRoomAck_default_instance_;
class Msg_KickRoomReq;
struct Msg_KickRoomReqDefaultTypeInternal;
extern Msg_KickRoomReqDefaultTypeInternal _Msg_KickRoomReq_default_instance_;
class Msg_LeaveRoomAck;
struct Msg_LeaveRoomAckDefaultTypeInternal;
extern Msg_LeaveRoomAckDefaultTypeInternal _Msg_LeaveRoomAck_default_instance_;
class Msg_LeaveRoomReq;
struct Msg_LeaveRoomReqDefaultTypeInternal;
extern Msg_LeaveRoomReqDefaultTypeInternal _Msg_LeaveRoomReq_default_instance_;
class Msg_RoomPlayerInfo;
struct Msg_RoomPlayerInfoDefaultTypeInternal;
extern Msg_RoomPlayerInfoDefaultTypeInternal _Msg_RoomPlayerInfo_default_instance_;
class Msg_StartRoomAck;
struct Msg_StartRoomAckDefaultTypeInternal;
extern Msg_StartRoomAckDefaultTypeInternal _Msg_StartRoomAck_default_instance_;
class Msg_StartRoomReq;
struct Msg_StartRoomReqDefaultTypeInternal;
extern Msg_StartRoomReqDefaultTypeInternal _Msg_StartRoomReq_default_instance_;
class ResultObject;
struct ResultObjectDefaultTypeInternal;
extern ResultObjectDefaultTypeInternal _ResultObject_default_instance_;
class ResultPlayer;
struct ResultPlayerDefaultTypeInternal;
extern ResultPlayerDefaultTypeInternal _ResultPlayer_default_instance_;
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> ::symphony::proto::BattleResultNty* Arena::CreateMaybeMessage<::symphony::proto::BattleResultNty>(Arena*);
template<> ::symphony::proto::MainCopyAck* Arena::CreateMaybeMessage<::symphony::proto::MainCopyAck>(Arena*);
template<> ::symphony::proto::MainCopyReq* Arena::CreateMaybeMessage<::symphony::proto::MainCopyReq>(Arena*);
template<> ::symphony::proto::MainCopyResultNty* Arena::CreateMaybeMessage<::symphony::proto::MainCopyResultNty>(Arena*);
template<> ::symphony::proto::Msg_BroadRoomNotify* Arena::CreateMaybeMessage<::symphony::proto::Msg_BroadRoomNotify>(Arena*);
template<> ::symphony::proto::Msg_CreateRoomAck* Arena::CreateMaybeMessage<::symphony::proto::Msg_CreateRoomAck>(Arena*);
template<> ::symphony::proto::Msg_CreateRoomReq* Arena::CreateMaybeMessage<::symphony::proto::Msg_CreateRoomReq>(Arena*);
template<> ::symphony::proto::Msg_JoinRoomAck* Arena::CreateMaybeMessage<::symphony::proto::Msg_JoinRoomAck>(Arena*);
template<> ::symphony::proto::Msg_JoinRoomReq* Arena::CreateMaybeMessage<::symphony::proto::Msg_JoinRoomReq>(Arena*);
template<> ::symphony::proto::Msg_KickRoomAck* Arena::CreateMaybeMessage<::symphony::proto::Msg_KickRoomAck>(Arena*);
template<> ::symphony::proto::Msg_KickRoomReq* Arena::CreateMaybeMessage<::symphony::proto::Msg_KickRoomReq>(Arena*);
template<> ::symphony::proto::Msg_LeaveRoomAck* Arena::CreateMaybeMessage<::symphony::proto::Msg_LeaveRoomAck>(Arena*);
template<> ::symphony::proto::Msg_LeaveRoomReq* Arena::CreateMaybeMessage<::symphony::proto::Msg_LeaveRoomReq>(Arena*);
template<> ::symphony::proto::Msg_RoomPlayerInfo* Arena::CreateMaybeMessage<::symphony::proto::Msg_RoomPlayerInfo>(Arena*);
template<> ::symphony::proto::Msg_StartRoomAck* Arena::CreateMaybeMessage<::symphony::proto::Msg_StartRoomAck>(Arena*);
template<> ::symphony::proto::Msg_StartRoomReq* Arena::CreateMaybeMessage<::symphony::proto::Msg_StartRoomReq>(Arena*);
template<> ::symphony::proto::ResultObject* Arena::CreateMaybeMessage<::symphony::proto::ResultObject>(Arena*);
template<> ::symphony::proto::ResultPlayer* Arena::CreateMaybeMessage<::symphony::proto::ResultPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace symphony {
namespace proto {

// ===================================================================

class ResultObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.ResultObject) */ {
 public:
  inline ResultObject() : ResultObject(nullptr) {}
  ~ResultObject() override;
  explicit PROTOBUF_CONSTEXPR ResultObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultObject(const ResultObject& from);
  ResultObject(ResultObject&& from) noexcept
    : ResultObject() {
    *this = ::std::move(from);
  }

  inline ResultObject& operator=(const ResultObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultObject& operator=(ResultObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultObject* internal_default_instance() {
    return reinterpret_cast<const ResultObject*>(
               &_ResultObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResultObject& a, ResultObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultObject& from) {
    ResultObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.ResultObject";
  }
  protected:
  explicit ResultObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kActorIDFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
    kResultFieldNumber = 4,
    kKillFieldNumber = 5,
    kDeathFieldNumber = 6,
    kHealFieldNumber = 7,
    kDamageFieldNumber = 8,
  };
  // uint64 ObjectID = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // int32 ActorID = 2;
  void clear_actorid();
  int32_t actorid() const;
  void set_actorid(int32_t value);
  private:
  int32_t _internal_actorid() const;
  void _internal_set_actorid(int32_t value);
  public:

  // int32 ObjectType = 3;
  void clear_objecttype();
  int32_t objecttype() const;
  void set_objecttype(int32_t value);
  private:
  int32_t _internal_objecttype() const;
  void _internal_set_objecttype(int32_t value);
  public:

  // int32 Result = 4;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // int32 Kill = 5;
  void clear_kill();
  int32_t kill() const;
  void set_kill(int32_t value);
  private:
  int32_t _internal_kill() const;
  void _internal_set_kill(int32_t value);
  public:

  // int32 Death = 6;
  void clear_death();
  int32_t death() const;
  void set_death(int32_t value);
  private:
  int32_t _internal_death() const;
  void _internal_set_death(int32_t value);
  public:

  // int32 Heal = 7;
  void clear_heal();
  int32_t heal() const;
  void set_heal(int32_t value);
  private:
  int32_t _internal_heal() const;
  void _internal_set_heal(int32_t value);
  public:

  // int32 Damage = 8;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.ResultObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    int32_t actorid_;
    int32_t objecttype_;
    int32_t result_;
    int32_t kill_;
    int32_t death_;
    int32_t heal_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class ResultPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.ResultPlayer) */ {
 public:
  inline ResultPlayer() : ResultPlayer(nullptr) {}
  ~ResultPlayer() override;
  explicit PROTOBUF_CONSTEXPR ResultPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultPlayer(const ResultPlayer& from);
  ResultPlayer(ResultPlayer&& from) noexcept
    : ResultPlayer() {
    *this = ::std::move(from);
  }

  inline ResultPlayer& operator=(const ResultPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultPlayer& operator=(ResultPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultPlayer* internal_default_instance() {
    return reinterpret_cast<const ResultPlayer*>(
               &_ResultPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResultPlayer& a, ResultPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultPlayer& from) {
    ResultPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.ResultPlayer";
  }
  protected:
  explicit ResultPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIDFieldNumber = 1,
    kActorIDFieldNumber = 2,
    kObjectTypeFieldNumber = 3,
    kResultFieldNumber = 4,
    kKillFieldNumber = 5,
    kDeathFieldNumber = 6,
    kHealFieldNumber = 7,
    kDamageFieldNumber = 8,
  };
  // uint64 ObjectID = 1;
  void clear_objectid();
  uint64_t objectid() const;
  void set_objectid(uint64_t value);
  private:
  uint64_t _internal_objectid() const;
  void _internal_set_objectid(uint64_t value);
  public:

  // int32 ActorID = 2;
  void clear_actorid();
  int32_t actorid() const;
  void set_actorid(int32_t value);
  private:
  int32_t _internal_actorid() const;
  void _internal_set_actorid(int32_t value);
  public:

  // int32 ObjectType = 3;
  void clear_objecttype();
  int32_t objecttype() const;
  void set_objecttype(int32_t value);
  private:
  int32_t _internal_objecttype() const;
  void _internal_set_objecttype(int32_t value);
  public:

  // int32 Result = 4;
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // int32 Kill = 5;
  void clear_kill();
  int32_t kill() const;
  void set_kill(int32_t value);
  private:
  int32_t _internal_kill() const;
  void _internal_set_kill(int32_t value);
  public:

  // int32 Death = 6;
  void clear_death();
  int32_t death() const;
  void set_death(int32_t value);
  private:
  int32_t _internal_death() const;
  void _internal_set_death(int32_t value);
  public:

  // int32 Heal = 7;
  void clear_heal();
  int32_t heal() const;
  void set_heal(int32_t value);
  private:
  int32_t _internal_heal() const;
  void _internal_set_heal(int32_t value);
  public:

  // int32 Damage = 8;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.ResultPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t objectid_;
    int32_t actorid_;
    int32_t objecttype_;
    int32_t result_;
    int32_t kill_;
    int32_t death_;
    int32_t heal_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class BattleResultNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.BattleResultNty) */ {
 public:
  inline BattleResultNty() : BattleResultNty(nullptr) {}
  ~BattleResultNty() override;
  explicit PROTOBUF_CONSTEXPR BattleResultNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleResultNty(const BattleResultNty& from);
  BattleResultNty(BattleResultNty&& from) noexcept
    : BattleResultNty() {
    *this = ::std::move(from);
  }

  inline BattleResultNty& operator=(const BattleResultNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleResultNty& operator=(BattleResultNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleResultNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleResultNty* internal_default_instance() {
    return reinterpret_cast<const BattleResultNty*>(
               &_BattleResultNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BattleResultNty& a, BattleResultNty& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleResultNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleResultNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BattleResultNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BattleResultNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BattleResultNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BattleResultNty& from) {
    BattleResultNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleResultNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.BattleResultNty";
  }
  protected:
  explicit BattleResultNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 6,
    kObjectListFieldNumber = 7,
    kServerIDFieldNumber = 1,
    kCopyGuidFieldNumber = 2,
    kCopyIDFieldNumber = 3,
    kCopyTypeFieldNumber = 4,
    kLastTimeFieldNumber = 5,
  };
  // repeated .symphony.proto.ResultPlayer PlayerList = 6;
  int playerlist_size() const;
  private:
  int _internal_playerlist_size() const;
  public:
  void clear_playerlist();
  ::symphony::proto::ResultPlayer* mutable_playerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultPlayer >*
      mutable_playerlist();
  private:
  const ::symphony::proto::ResultPlayer& _internal_playerlist(int index) const;
  ::symphony::proto::ResultPlayer* _internal_add_playerlist();
  public:
  const ::symphony::proto::ResultPlayer& playerlist(int index) const;
  ::symphony::proto::ResultPlayer* add_playerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultPlayer >&
      playerlist() const;

  // repeated .symphony.proto.ResultObject ObjectList = 7;
  int objectlist_size() const;
  private:
  int _internal_objectlist_size() const;
  public:
  void clear_objectlist();
  ::symphony::proto::ResultObject* mutable_objectlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultObject >*
      mutable_objectlist();
  private:
  const ::symphony::proto::ResultObject& _internal_objectlist(int index) const;
  ::symphony::proto::ResultObject* _internal_add_objectlist();
  public:
  const ::symphony::proto::ResultObject& objectlist(int index) const;
  ::symphony::proto::ResultObject* add_objectlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultObject >&
      objectlist() const;

  // int32 ServerID = 1;
  void clear_serverid();
  int32_t serverid() const;
  void set_serverid(int32_t value);
  private:
  int32_t _internal_serverid() const;
  void _internal_set_serverid(int32_t value);
  public:

  // uint32 CopyGuid = 2;
  void clear_copyguid();
  uint32_t copyguid() const;
  void set_copyguid(uint32_t value);
  private:
  uint32_t _internal_copyguid() const;
  void _internal_set_copyguid(uint32_t value);
  public:

  // int32 CopyID = 3;
  void clear_copyid();
  int32_t copyid() const;
  void set_copyid(int32_t value);
  private:
  int32_t _internal_copyid() const;
  void _internal_set_copyid(int32_t value);
  public:

  // int32 CopyType = 4;
  void clear_copytype();
  int32_t copytype() const;
  void set_copytype(int32_t value);
  private:
  int32_t _internal_copytype() const;
  void _internal_set_copytype(int32_t value);
  public:

  // uint64 LastTime = 5;
  void clear_lasttime();
  uint64_t lasttime() const;
  void set_lasttime(uint64_t value);
  private:
  uint64_t _internal_lasttime() const;
  void _internal_set_lasttime(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.BattleResultNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultPlayer > playerlist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultObject > objectlist_;
    int32_t serverid_;
    uint32_t copyguid_;
    int32_t copyid_;
    int32_t copytype_;
    uint64_t lasttime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class MainCopyReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.MainCopyReq) */ {
 public:
  inline MainCopyReq() : MainCopyReq(nullptr) {}
  ~MainCopyReq() override;
  explicit PROTOBUF_CONSTEXPR MainCopyReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainCopyReq(const MainCopyReq& from);
  MainCopyReq(MainCopyReq&& from) noexcept
    : MainCopyReq() {
    *this = ::std::move(from);
  }

  inline MainCopyReq& operator=(const MainCopyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainCopyReq& operator=(MainCopyReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainCopyReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainCopyReq* internal_default_instance() {
    return reinterpret_cast<const MainCopyReq*>(
               &_MainCopyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MainCopyReq& a, MainCopyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(MainCopyReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainCopyReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainCopyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainCopyReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainCopyReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MainCopyReq& from) {
    MainCopyReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainCopyReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.MainCopyReq";
  }
  protected:
  explicit MainCopyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCopyIDFieldNumber = 1,
  };
  // int32 CopyID = 1;
  void clear_copyid();
  int32_t copyid() const;
  void set_copyid(int32_t value);
  private:
  int32_t _internal_copyid() const;
  void _internal_set_copyid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.MainCopyReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t copyid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class MainCopyAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.MainCopyAck) */ {
 public:
  inline MainCopyAck() : MainCopyAck(nullptr) {}
  ~MainCopyAck() override;
  explicit PROTOBUF_CONSTEXPR MainCopyAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainCopyAck(const MainCopyAck& from);
  MainCopyAck(MainCopyAck&& from) noexcept
    : MainCopyAck() {
    *this = ::std::move(from);
  }

  inline MainCopyAck& operator=(const MainCopyAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainCopyAck& operator=(MainCopyAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainCopyAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainCopyAck* internal_default_instance() {
    return reinterpret_cast<const MainCopyAck*>(
               &_MainCopyAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MainCopyAck& a, MainCopyAck& b) {
    a.Swap(&b);
  }
  inline void Swap(MainCopyAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainCopyAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainCopyAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainCopyAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainCopyAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MainCopyAck& from) {
    MainCopyAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainCopyAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.MainCopyAck";
  }
  protected:
  explicit MainCopyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
  };
  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.MainCopyAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class MainCopyResultNty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.MainCopyResultNty) */ {
 public:
  inline MainCopyResultNty() : MainCopyResultNty(nullptr) {}
  ~MainCopyResultNty() override;
  explicit PROTOBUF_CONSTEXPR MainCopyResultNty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MainCopyResultNty(const MainCopyResultNty& from);
  MainCopyResultNty(MainCopyResultNty&& from) noexcept
    : MainCopyResultNty() {
    *this = ::std::move(from);
  }

  inline MainCopyResultNty& operator=(const MainCopyResultNty& from) {
    CopyFrom(from);
    return *this;
  }
  inline MainCopyResultNty& operator=(MainCopyResultNty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MainCopyResultNty& default_instance() {
    return *internal_default_instance();
  }
  static inline const MainCopyResultNty* internal_default_instance() {
    return reinterpret_cast<const MainCopyResultNty*>(
               &_MainCopyResultNty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MainCopyResultNty& a, MainCopyResultNty& b) {
    a.Swap(&b);
  }
  inline void Swap(MainCopyResultNty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MainCopyResultNty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MainCopyResultNty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MainCopyResultNty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MainCopyResultNty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MainCopyResultNty& from) {
    MainCopyResultNty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MainCopyResultNty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.MainCopyResultNty";
  }
  protected:
  explicit MainCopyResultNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 6,
    kRoleIDFieldNumber = 1,
    kCopyIDFieldNumber = 2,
    kCopyResultFieldNumber = 3,
    kLastTimeFieldNumber = 5,
    kStarNumFieldNumber = 4,
  };
  // repeated .symphony.proto.ItemData ItemList = 6;
  int itemlist_size() const;
  private:
  int _internal_itemlist_size() const;
  public:
  void clear_itemlist();
  ::symphony::proto::ItemData* mutable_itemlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ItemData >*
      mutable_itemlist();
  private:
  const ::symphony::proto::ItemData& _internal_itemlist(int index) const;
  ::symphony::proto::ItemData* _internal_add_itemlist();
  public:
  const ::symphony::proto::ItemData& itemlist(int index) const;
  ::symphony::proto::ItemData* add_itemlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ItemData >&
      itemlist() const;

  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // int32 CopyID = 2;
  void clear_copyid();
  int32_t copyid() const;
  void set_copyid(int32_t value);
  private:
  int32_t _internal_copyid() const;
  void _internal_set_copyid(int32_t value);
  public:

  // int32 CopyResult = 3;
  void clear_copyresult();
  int32_t copyresult() const;
  void set_copyresult(int32_t value);
  private:
  int32_t _internal_copyresult() const;
  void _internal_set_copyresult(int32_t value);
  public:

  // uint64 LastTime = 5;
  void clear_lasttime();
  uint64_t lasttime() const;
  void set_lasttime(uint64_t value);
  private:
  uint64_t _internal_lasttime() const;
  void _internal_set_lasttime(uint64_t value);
  public:

  // int32 StarNum = 4;
  void clear_starnum();
  int32_t starnum() const;
  void set_starnum(int32_t value);
  private:
  int32_t _internal_starnum() const;
  void _internal_set_starnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.MainCopyResultNty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ItemData > itemlist_;
    uint64_t roleid_;
    int32_t copyid_;
    int32_t copyresult_;
    uint64_t lasttime_;
    int32_t starnum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_CreateRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_CreateRoomReq) */ {
 public:
  inline Msg_CreateRoomReq() : Msg_CreateRoomReq(nullptr) {}
  ~Msg_CreateRoomReq() override;
  explicit PROTOBUF_CONSTEXPR Msg_CreateRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_CreateRoomReq(const Msg_CreateRoomReq& from);
  Msg_CreateRoomReq(Msg_CreateRoomReq&& from) noexcept
    : Msg_CreateRoomReq() {
    *this = ::std::move(from);
  }

  inline Msg_CreateRoomReq& operator=(const Msg_CreateRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_CreateRoomReq& operator=(Msg_CreateRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_CreateRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_CreateRoomReq* internal_default_instance() {
    return reinterpret_cast<const Msg_CreateRoomReq*>(
               &_Msg_CreateRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Msg_CreateRoomReq& a, Msg_CreateRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_CreateRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_CreateRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_CreateRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_CreateRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_CreateRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_CreateRoomReq& from) {
    Msg_CreateRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_CreateRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_CreateRoomReq";
  }
  protected:
  explicit Msg_CreateRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kCopyIDFieldNumber = 2,
  };
  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint32 CopyID = 2;
  void clear_copyid();
  uint32_t copyid() const;
  void set_copyid(uint32_t value);
  private:
  uint32_t _internal_copyid() const;
  void _internal_set_copyid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_CreateRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roleid_;
    uint32_t copyid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_CreateRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_CreateRoomAck) */ {
 public:
  inline Msg_CreateRoomAck() : Msg_CreateRoomAck(nullptr) {}
  ~Msg_CreateRoomAck() override;
  explicit PROTOBUF_CONSTEXPR Msg_CreateRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_CreateRoomAck(const Msg_CreateRoomAck& from);
  Msg_CreateRoomAck(Msg_CreateRoomAck&& from) noexcept
    : Msg_CreateRoomAck() {
    *this = ::std::move(from);
  }

  inline Msg_CreateRoomAck& operator=(const Msg_CreateRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_CreateRoomAck& operator=(Msg_CreateRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_CreateRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_CreateRoomAck* internal_default_instance() {
    return reinterpret_cast<const Msg_CreateRoomAck*>(
               &_Msg_CreateRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Msg_CreateRoomAck& a, Msg_CreateRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_CreateRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_CreateRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_CreateRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_CreateRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_CreateRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_CreateRoomAck& from) {
    Msg_CreateRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_CreateRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_CreateRoomAck";
  }
  protected:
  explicit Msg_CreateRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_CreateRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roomid_;
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_JoinRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_JoinRoomReq) */ {
 public:
  inline Msg_JoinRoomReq() : Msg_JoinRoomReq(nullptr) {}
  ~Msg_JoinRoomReq() override;
  explicit PROTOBUF_CONSTEXPR Msg_JoinRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_JoinRoomReq(const Msg_JoinRoomReq& from);
  Msg_JoinRoomReq(Msg_JoinRoomReq&& from) noexcept
    : Msg_JoinRoomReq() {
    *this = ::std::move(from);
  }

  inline Msg_JoinRoomReq& operator=(const Msg_JoinRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_JoinRoomReq& operator=(Msg_JoinRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_JoinRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_JoinRoomReq* internal_default_instance() {
    return reinterpret_cast<const Msg_JoinRoomReq*>(
               &_Msg_JoinRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Msg_JoinRoomReq& a, Msg_JoinRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_JoinRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_JoinRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_JoinRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_JoinRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_JoinRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_JoinRoomReq& from) {
    Msg_JoinRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_JoinRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_JoinRoomReq";
  }
  protected:
  explicit Msg_JoinRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kRoomIDFieldNumber = 2,
  };
  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_JoinRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roleid_;
    uint64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_JoinRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_JoinRoomAck) */ {
 public:
  inline Msg_JoinRoomAck() : Msg_JoinRoomAck(nullptr) {}
  ~Msg_JoinRoomAck() override;
  explicit PROTOBUF_CONSTEXPR Msg_JoinRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_JoinRoomAck(const Msg_JoinRoomAck& from);
  Msg_JoinRoomAck(Msg_JoinRoomAck&& from) noexcept
    : Msg_JoinRoomAck() {
    *this = ::std::move(from);
  }

  inline Msg_JoinRoomAck& operator=(const Msg_JoinRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_JoinRoomAck& operator=(Msg_JoinRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_JoinRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_JoinRoomAck* internal_default_instance() {
    return reinterpret_cast<const Msg_JoinRoomAck*>(
               &_Msg_JoinRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Msg_JoinRoomAck& a, Msg_JoinRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_JoinRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_JoinRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_JoinRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_JoinRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_JoinRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_JoinRoomAck& from) {
    Msg_JoinRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_JoinRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_JoinRoomAck";
  }
  protected:
  explicit Msg_JoinRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIDFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_JoinRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roomid_;
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_KickRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_KickRoomReq) */ {
 public:
  inline Msg_KickRoomReq() : Msg_KickRoomReq(nullptr) {}
  ~Msg_KickRoomReq() override;
  explicit PROTOBUF_CONSTEXPR Msg_KickRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_KickRoomReq(const Msg_KickRoomReq& from);
  Msg_KickRoomReq(Msg_KickRoomReq&& from) noexcept
    : Msg_KickRoomReq() {
    *this = ::std::move(from);
  }

  inline Msg_KickRoomReq& operator=(const Msg_KickRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_KickRoomReq& operator=(Msg_KickRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_KickRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_KickRoomReq* internal_default_instance() {
    return reinterpret_cast<const Msg_KickRoomReq*>(
               &_Msg_KickRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Msg_KickRoomReq& a, Msg_KickRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_KickRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_KickRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_KickRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_KickRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_KickRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_KickRoomReq& from) {
    Msg_KickRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_KickRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_KickRoomReq";
  }
  protected:
  explicit Msg_KickRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kRoomIDFieldNumber = 2,
  };
  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_KickRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roleid_;
    uint64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_KickRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_KickRoomAck) */ {
 public:
  inline Msg_KickRoomAck() : Msg_KickRoomAck(nullptr) {}
  ~Msg_KickRoomAck() override;
  explicit PROTOBUF_CONSTEXPR Msg_KickRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_KickRoomAck(const Msg_KickRoomAck& from);
  Msg_KickRoomAck(Msg_KickRoomAck&& from) noexcept
    : Msg_KickRoomAck() {
    *this = ::std::move(from);
  }

  inline Msg_KickRoomAck& operator=(const Msg_KickRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_KickRoomAck& operator=(Msg_KickRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_KickRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_KickRoomAck* internal_default_instance() {
    return reinterpret_cast<const Msg_KickRoomAck*>(
               &_Msg_KickRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Msg_KickRoomAck& a, Msg_KickRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_KickRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_KickRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_KickRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_KickRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_KickRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_KickRoomAck& from) {
    Msg_KickRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_KickRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_KickRoomAck";
  }
  protected:
  explicit Msg_KickRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
  };
  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_KickRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_LeaveRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_LeaveRoomReq) */ {
 public:
  inline Msg_LeaveRoomReq() : Msg_LeaveRoomReq(nullptr) {}
  ~Msg_LeaveRoomReq() override;
  explicit PROTOBUF_CONSTEXPR Msg_LeaveRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LeaveRoomReq(const Msg_LeaveRoomReq& from);
  Msg_LeaveRoomReq(Msg_LeaveRoomReq&& from) noexcept
    : Msg_LeaveRoomReq() {
    *this = ::std::move(from);
  }

  inline Msg_LeaveRoomReq& operator=(const Msg_LeaveRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LeaveRoomReq& operator=(Msg_LeaveRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LeaveRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LeaveRoomReq* internal_default_instance() {
    return reinterpret_cast<const Msg_LeaveRoomReq*>(
               &_Msg_LeaveRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Msg_LeaveRoomReq& a, Msg_LeaveRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LeaveRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LeaveRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LeaveRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LeaveRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LeaveRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_LeaveRoomReq& from) {
    Msg_LeaveRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LeaveRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_LeaveRoomReq";
  }
  protected:
  explicit Msg_LeaveRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kRoomIDFieldNumber = 2,
  };
  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_LeaveRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roleid_;
    uint64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_LeaveRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_LeaveRoomAck) */ {
 public:
  inline Msg_LeaveRoomAck() : Msg_LeaveRoomAck(nullptr) {}
  ~Msg_LeaveRoomAck() override;
  explicit PROTOBUF_CONSTEXPR Msg_LeaveRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_LeaveRoomAck(const Msg_LeaveRoomAck& from);
  Msg_LeaveRoomAck(Msg_LeaveRoomAck&& from) noexcept
    : Msg_LeaveRoomAck() {
    *this = ::std::move(from);
  }

  inline Msg_LeaveRoomAck& operator=(const Msg_LeaveRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_LeaveRoomAck& operator=(Msg_LeaveRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_LeaveRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_LeaveRoomAck* internal_default_instance() {
    return reinterpret_cast<const Msg_LeaveRoomAck*>(
               &_Msg_LeaveRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Msg_LeaveRoomAck& a, Msg_LeaveRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_LeaveRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_LeaveRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_LeaveRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_LeaveRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_LeaveRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_LeaveRoomAck& from) {
    Msg_LeaveRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_LeaveRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_LeaveRoomAck";
  }
  protected:
  explicit Msg_LeaveRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
  };
  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_LeaveRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_StartRoomReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_StartRoomReq) */ {
 public:
  inline Msg_StartRoomReq() : Msg_StartRoomReq(nullptr) {}
  ~Msg_StartRoomReq() override;
  explicit PROTOBUF_CONSTEXPR Msg_StartRoomReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_StartRoomReq(const Msg_StartRoomReq& from);
  Msg_StartRoomReq(Msg_StartRoomReq&& from) noexcept
    : Msg_StartRoomReq() {
    *this = ::std::move(from);
  }

  inline Msg_StartRoomReq& operator=(const Msg_StartRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_StartRoomReq& operator=(Msg_StartRoomReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_StartRoomReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_StartRoomReq* internal_default_instance() {
    return reinterpret_cast<const Msg_StartRoomReq*>(
               &_Msg_StartRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Msg_StartRoomReq& a, Msg_StartRoomReq& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_StartRoomReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_StartRoomReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_StartRoomReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_StartRoomReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_StartRoomReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_StartRoomReq& from) {
    Msg_StartRoomReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_StartRoomReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_StartRoomReq";
  }
  protected:
  explicit Msg_StartRoomReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIDFieldNumber = 1,
    kRoomIDFieldNumber = 2,
  };
  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // uint64 RoomID = 2;
  void clear_roomid();
  uint64_t roomid() const;
  void set_roomid(uint64_t value);
  private:
  uint64_t _internal_roomid() const;
  void _internal_set_roomid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_StartRoomReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t roleid_;
    uint64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_StartRoomAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_StartRoomAck) */ {
 public:
  inline Msg_StartRoomAck() : Msg_StartRoomAck(nullptr) {}
  ~Msg_StartRoomAck() override;
  explicit PROTOBUF_CONSTEXPR Msg_StartRoomAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_StartRoomAck(const Msg_StartRoomAck& from);
  Msg_StartRoomAck(Msg_StartRoomAck&& from) noexcept
    : Msg_StartRoomAck() {
    *this = ::std::move(from);
  }

  inline Msg_StartRoomAck& operator=(const Msg_StartRoomAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_StartRoomAck& operator=(Msg_StartRoomAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_StartRoomAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_StartRoomAck* internal_default_instance() {
    return reinterpret_cast<const Msg_StartRoomAck*>(
               &_Msg_StartRoomAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Msg_StartRoomAck& a, Msg_StartRoomAck& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_StartRoomAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_StartRoomAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_StartRoomAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_StartRoomAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_StartRoomAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_StartRoomAck& from) {
    Msg_StartRoomAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_StartRoomAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_StartRoomAck";
  }
  protected:
  explicit Msg_StartRoomAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetCodeFieldNumber = 1,
  };
  // uint32 RetCode = 1;
  void clear_retcode();
  uint32_t retcode() const;
  void set_retcode(uint32_t value);
  private:
  uint32_t _internal_retcode() const;
  void _internal_set_retcode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_StartRoomAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t retcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_RoomPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_RoomPlayerInfo) */ {
 public:
  inline Msg_RoomPlayerInfo() : Msg_RoomPlayerInfo(nullptr) {}
  ~Msg_RoomPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR Msg_RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_RoomPlayerInfo(const Msg_RoomPlayerInfo& from);
  Msg_RoomPlayerInfo(Msg_RoomPlayerInfo&& from) noexcept
    : Msg_RoomPlayerInfo() {
    *this = ::std::move(from);
  }

  inline Msg_RoomPlayerInfo& operator=(const Msg_RoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_RoomPlayerInfo& operator=(Msg_RoomPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_RoomPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_RoomPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const Msg_RoomPlayerInfo*>(
               &_Msg_RoomPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Msg_RoomPlayerInfo& a, Msg_RoomPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_RoomPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_RoomPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_RoomPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_RoomPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_RoomPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_RoomPlayerInfo& from) {
    Msg_RoomPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_RoomPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_RoomPlayerInfo";
  }
  protected:
  explicit Msg_RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipsFieldNumber = 6,
    kNameFieldNumber = 3,
    kRoleIDFieldNumber = 1,
    kLevelFieldNumber = 2,
    kActorIDFieldNumber = 4,
    kMountIDFieldNumber = 5,
  };
  // repeated int32 Equips = 6;
  int equips_size() const;
  private:
  int _internal_equips_size() const;
  public:
  void clear_equips();
  private:
  int32_t _internal_equips(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_equips() const;
  void _internal_add_equips(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_equips();
  public:
  int32_t equips(int index) const;
  void set_equips(int index, int32_t value);
  void add_equips(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      equips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_equips();

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 RoleID = 1;
  void clear_roleid();
  uint64_t roleid() const;
  void set_roleid(uint64_t value);
  private:
  uint64_t _internal_roleid() const;
  void _internal_set_roleid(uint64_t value);
  public:

  // int32 Level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 ActorID = 4;
  void clear_actorid();
  int32_t actorid() const;
  void set_actorid(int32_t value);
  private:
  int32_t _internal_actorid() const;
  void _internal_set_actorid(int32_t value);
  public:

  // int32 MountID = 5;
  void clear_mountid();
  int32_t mountid() const;
  void set_mountid(int32_t value);
  private:
  int32_t _internal_mountid() const;
  void _internal_set_mountid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_RoomPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > equips_;
    mutable std::atomic<int> _equips_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t roleid_;
    int32_t level_;
    int32_t actorid_;
    int32_t mountid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// -------------------------------------------------------------------

class Msg_BroadRoomNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:symphony.proto.Msg_BroadRoomNotify) */ {
 public:
  inline Msg_BroadRoomNotify() : Msg_BroadRoomNotify(nullptr) {}
  ~Msg_BroadRoomNotify() override;
  explicit PROTOBUF_CONSTEXPR Msg_BroadRoomNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Msg_BroadRoomNotify(const Msg_BroadRoomNotify& from);
  Msg_BroadRoomNotify(Msg_BroadRoomNotify&& from) noexcept
    : Msg_BroadRoomNotify() {
    *this = ::std::move(from);
  }

  inline Msg_BroadRoomNotify& operator=(const Msg_BroadRoomNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_BroadRoomNotify& operator=(Msg_BroadRoomNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Msg_BroadRoomNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Msg_BroadRoomNotify* internal_default_instance() {
    return reinterpret_cast<const Msg_BroadRoomNotify*>(
               &_Msg_BroadRoomNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Msg_BroadRoomNotify& a, Msg_BroadRoomNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_BroadRoomNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_BroadRoomNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Msg_BroadRoomNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Msg_BroadRoomNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Msg_BroadRoomNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Msg_BroadRoomNotify& from) {
    Msg_BroadRoomNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_BroadRoomNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "symphony.proto.Msg_BroadRoomNotify";
  }
  protected:
  explicit Msg_BroadRoomNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerListFieldNumber = 1,
  };
  // repeated .symphony.proto.Msg_RoomPlayerInfo PlayerList = 1;
  int playerlist_size() const;
  private:
  int _internal_playerlist_size() const;
  public:
  void clear_playerlist();
  ::symphony::proto::Msg_RoomPlayerInfo* mutable_playerlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::Msg_RoomPlayerInfo >*
      mutable_playerlist();
  private:
  const ::symphony::proto::Msg_RoomPlayerInfo& _internal_playerlist(int index) const;
  ::symphony::proto::Msg_RoomPlayerInfo* _internal_add_playerlist();
  public:
  const ::symphony::proto::Msg_RoomPlayerInfo& playerlist(int index) const;
  ::symphony::proto::Msg_RoomPlayerInfo* add_playerlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::Msg_RoomPlayerInfo >&
      playerlist() const;

  // @@protoc_insertion_point(class_scope:symphony.proto.Msg_BroadRoomNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::Msg_RoomPlayerInfo > playerlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_symphony_2fproto_2fmsg_5fcopy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResultObject

// uint64 ObjectID = 1;
inline void ResultObject::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t ResultObject::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t ResultObject::objectid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.ObjectID)
  return _internal_objectid();
}
inline void ResultObject::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void ResultObject::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.ObjectID)
}

// int32 ActorID = 2;
inline void ResultObject::clear_actorid() {
  _impl_.actorid_ = 0;
}
inline int32_t ResultObject::_internal_actorid() const {
  return _impl_.actorid_;
}
inline int32_t ResultObject::actorid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.ActorID)
  return _internal_actorid();
}
inline void ResultObject::_internal_set_actorid(int32_t value) {
  
  _impl_.actorid_ = value;
}
inline void ResultObject::set_actorid(int32_t value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.ActorID)
}

// int32 ObjectType = 3;
inline void ResultObject::clear_objecttype() {
  _impl_.objecttype_ = 0;
}
inline int32_t ResultObject::_internal_objecttype() const {
  return _impl_.objecttype_;
}
inline int32_t ResultObject::objecttype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.ObjectType)
  return _internal_objecttype();
}
inline void ResultObject::_internal_set_objecttype(int32_t value) {
  
  _impl_.objecttype_ = value;
}
inline void ResultObject::set_objecttype(int32_t value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.ObjectType)
}

// int32 Result = 4;
inline void ResultObject::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t ResultObject::_internal_result() const {
  return _impl_.result_;
}
inline int32_t ResultObject::result() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.Result)
  return _internal_result();
}
inline void ResultObject::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void ResultObject::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.Result)
}

// int32 Kill = 5;
inline void ResultObject::clear_kill() {
  _impl_.kill_ = 0;
}
inline int32_t ResultObject::_internal_kill() const {
  return _impl_.kill_;
}
inline int32_t ResultObject::kill() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.Kill)
  return _internal_kill();
}
inline void ResultObject::_internal_set_kill(int32_t value) {
  
  _impl_.kill_ = value;
}
inline void ResultObject::set_kill(int32_t value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.Kill)
}

// int32 Death = 6;
inline void ResultObject::clear_death() {
  _impl_.death_ = 0;
}
inline int32_t ResultObject::_internal_death() const {
  return _impl_.death_;
}
inline int32_t ResultObject::death() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.Death)
  return _internal_death();
}
inline void ResultObject::_internal_set_death(int32_t value) {
  
  _impl_.death_ = value;
}
inline void ResultObject::set_death(int32_t value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.Death)
}

// int32 Heal = 7;
inline void ResultObject::clear_heal() {
  _impl_.heal_ = 0;
}
inline int32_t ResultObject::_internal_heal() const {
  return _impl_.heal_;
}
inline int32_t ResultObject::heal() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.Heal)
  return _internal_heal();
}
inline void ResultObject::_internal_set_heal(int32_t value) {
  
  _impl_.heal_ = value;
}
inline void ResultObject::set_heal(int32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.Heal)
}

// int32 Damage = 8;
inline void ResultObject::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t ResultObject::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t ResultObject::damage() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultObject.Damage)
  return _internal_damage();
}
inline void ResultObject::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void ResultObject::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultObject.Damage)
}

// -------------------------------------------------------------------

// ResultPlayer

// uint64 ObjectID = 1;
inline void ResultPlayer::clear_objectid() {
  _impl_.objectid_ = uint64_t{0u};
}
inline uint64_t ResultPlayer::_internal_objectid() const {
  return _impl_.objectid_;
}
inline uint64_t ResultPlayer::objectid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.ObjectID)
  return _internal_objectid();
}
inline void ResultPlayer::_internal_set_objectid(uint64_t value) {
  
  _impl_.objectid_ = value;
}
inline void ResultPlayer::set_objectid(uint64_t value) {
  _internal_set_objectid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.ObjectID)
}

// int32 ActorID = 2;
inline void ResultPlayer::clear_actorid() {
  _impl_.actorid_ = 0;
}
inline int32_t ResultPlayer::_internal_actorid() const {
  return _impl_.actorid_;
}
inline int32_t ResultPlayer::actorid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.ActorID)
  return _internal_actorid();
}
inline void ResultPlayer::_internal_set_actorid(int32_t value) {
  
  _impl_.actorid_ = value;
}
inline void ResultPlayer::set_actorid(int32_t value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.ActorID)
}

// int32 ObjectType = 3;
inline void ResultPlayer::clear_objecttype() {
  _impl_.objecttype_ = 0;
}
inline int32_t ResultPlayer::_internal_objecttype() const {
  return _impl_.objecttype_;
}
inline int32_t ResultPlayer::objecttype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.ObjectType)
  return _internal_objecttype();
}
inline void ResultPlayer::_internal_set_objecttype(int32_t value) {
  
  _impl_.objecttype_ = value;
}
inline void ResultPlayer::set_objecttype(int32_t value) {
  _internal_set_objecttype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.ObjectType)
}

// int32 Result = 4;
inline void ResultPlayer::clear_result() {
  _impl_.result_ = 0;
}
inline int32_t ResultPlayer::_internal_result() const {
  return _impl_.result_;
}
inline int32_t ResultPlayer::result() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.Result)
  return _internal_result();
}
inline void ResultPlayer::_internal_set_result(int32_t value) {
  
  _impl_.result_ = value;
}
inline void ResultPlayer::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.Result)
}

// int32 Kill = 5;
inline void ResultPlayer::clear_kill() {
  _impl_.kill_ = 0;
}
inline int32_t ResultPlayer::_internal_kill() const {
  return _impl_.kill_;
}
inline int32_t ResultPlayer::kill() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.Kill)
  return _internal_kill();
}
inline void ResultPlayer::_internal_set_kill(int32_t value) {
  
  _impl_.kill_ = value;
}
inline void ResultPlayer::set_kill(int32_t value) {
  _internal_set_kill(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.Kill)
}

// int32 Death = 6;
inline void ResultPlayer::clear_death() {
  _impl_.death_ = 0;
}
inline int32_t ResultPlayer::_internal_death() const {
  return _impl_.death_;
}
inline int32_t ResultPlayer::death() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.Death)
  return _internal_death();
}
inline void ResultPlayer::_internal_set_death(int32_t value) {
  
  _impl_.death_ = value;
}
inline void ResultPlayer::set_death(int32_t value) {
  _internal_set_death(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.Death)
}

// int32 Heal = 7;
inline void ResultPlayer::clear_heal() {
  _impl_.heal_ = 0;
}
inline int32_t ResultPlayer::_internal_heal() const {
  return _impl_.heal_;
}
inline int32_t ResultPlayer::heal() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.Heal)
  return _internal_heal();
}
inline void ResultPlayer::_internal_set_heal(int32_t value) {
  
  _impl_.heal_ = value;
}
inline void ResultPlayer::set_heal(int32_t value) {
  _internal_set_heal(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.Heal)
}

// int32 Damage = 8;
inline void ResultPlayer::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t ResultPlayer::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t ResultPlayer::damage() const {
  // @@protoc_insertion_point(field_get:symphony.proto.ResultPlayer.Damage)
  return _internal_damage();
}
inline void ResultPlayer::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void ResultPlayer::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:symphony.proto.ResultPlayer.Damage)
}

// -------------------------------------------------------------------

// BattleResultNty

// int32 ServerID = 1;
inline void BattleResultNty::clear_serverid() {
  _impl_.serverid_ = 0;
}
inline int32_t BattleResultNty::_internal_serverid() const {
  return _impl_.serverid_;
}
inline int32_t BattleResultNty::serverid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.ServerID)
  return _internal_serverid();
}
inline void BattleResultNty::_internal_set_serverid(int32_t value) {
  
  _impl_.serverid_ = value;
}
inline void BattleResultNty::set_serverid(int32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.BattleResultNty.ServerID)
}

// uint32 CopyGuid = 2;
inline void BattleResultNty::clear_copyguid() {
  _impl_.copyguid_ = 0u;
}
inline uint32_t BattleResultNty::_internal_copyguid() const {
  return _impl_.copyguid_;
}
inline uint32_t BattleResultNty::copyguid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.CopyGuid)
  return _internal_copyguid();
}
inline void BattleResultNty::_internal_set_copyguid(uint32_t value) {
  
  _impl_.copyguid_ = value;
}
inline void BattleResultNty::set_copyguid(uint32_t value) {
  _internal_set_copyguid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.BattleResultNty.CopyGuid)
}

// int32 CopyID = 3;
inline void BattleResultNty::clear_copyid() {
  _impl_.copyid_ = 0;
}
inline int32_t BattleResultNty::_internal_copyid() const {
  return _impl_.copyid_;
}
inline int32_t BattleResultNty::copyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.CopyID)
  return _internal_copyid();
}
inline void BattleResultNty::_internal_set_copyid(int32_t value) {
  
  _impl_.copyid_ = value;
}
inline void BattleResultNty::set_copyid(int32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.BattleResultNty.CopyID)
}

// int32 CopyType = 4;
inline void BattleResultNty::clear_copytype() {
  _impl_.copytype_ = 0;
}
inline int32_t BattleResultNty::_internal_copytype() const {
  return _impl_.copytype_;
}
inline int32_t BattleResultNty::copytype() const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.CopyType)
  return _internal_copytype();
}
inline void BattleResultNty::_internal_set_copytype(int32_t value) {
  
  _impl_.copytype_ = value;
}
inline void BattleResultNty::set_copytype(int32_t value) {
  _internal_set_copytype(value);
  // @@protoc_insertion_point(field_set:symphony.proto.BattleResultNty.CopyType)
}

// uint64 LastTime = 5;
inline void BattleResultNty::clear_lasttime() {
  _impl_.lasttime_ = uint64_t{0u};
}
inline uint64_t BattleResultNty::_internal_lasttime() const {
  return _impl_.lasttime_;
}
inline uint64_t BattleResultNty::lasttime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.LastTime)
  return _internal_lasttime();
}
inline void BattleResultNty::_internal_set_lasttime(uint64_t value) {
  
  _impl_.lasttime_ = value;
}
inline void BattleResultNty::set_lasttime(uint64_t value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.BattleResultNty.LastTime)
}

// repeated .symphony.proto.ResultPlayer PlayerList = 6;
inline int BattleResultNty::_internal_playerlist_size() const {
  return _impl_.playerlist_.size();
}
inline int BattleResultNty::playerlist_size() const {
  return _internal_playerlist_size();
}
inline void BattleResultNty::clear_playerlist() {
  _impl_.playerlist_.Clear();
}
inline ::symphony::proto::ResultPlayer* BattleResultNty::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.BattleResultNty.PlayerList)
  return _impl_.playerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultPlayer >*
BattleResultNty::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.BattleResultNty.PlayerList)
  return &_impl_.playerlist_;
}
inline const ::symphony::proto::ResultPlayer& BattleResultNty::_internal_playerlist(int index) const {
  return _impl_.playerlist_.Get(index);
}
inline const ::symphony::proto::ResultPlayer& BattleResultNty::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.PlayerList)
  return _internal_playerlist(index);
}
inline ::symphony::proto::ResultPlayer* BattleResultNty::_internal_add_playerlist() {
  return _impl_.playerlist_.Add();
}
inline ::symphony::proto::ResultPlayer* BattleResultNty::add_playerlist() {
  ::symphony::proto::ResultPlayer* _add = _internal_add_playerlist();
  // @@protoc_insertion_point(field_add:symphony.proto.BattleResultNty.PlayerList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultPlayer >&
BattleResultNty::playerlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.BattleResultNty.PlayerList)
  return _impl_.playerlist_;
}

// repeated .symphony.proto.ResultObject ObjectList = 7;
inline int BattleResultNty::_internal_objectlist_size() const {
  return _impl_.objectlist_.size();
}
inline int BattleResultNty::objectlist_size() const {
  return _internal_objectlist_size();
}
inline void BattleResultNty::clear_objectlist() {
  _impl_.objectlist_.Clear();
}
inline ::symphony::proto::ResultObject* BattleResultNty::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.BattleResultNty.ObjectList)
  return _impl_.objectlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultObject >*
BattleResultNty::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.BattleResultNty.ObjectList)
  return &_impl_.objectlist_;
}
inline const ::symphony::proto::ResultObject& BattleResultNty::_internal_objectlist(int index) const {
  return _impl_.objectlist_.Get(index);
}
inline const ::symphony::proto::ResultObject& BattleResultNty::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.BattleResultNty.ObjectList)
  return _internal_objectlist(index);
}
inline ::symphony::proto::ResultObject* BattleResultNty::_internal_add_objectlist() {
  return _impl_.objectlist_.Add();
}
inline ::symphony::proto::ResultObject* BattleResultNty::add_objectlist() {
  ::symphony::proto::ResultObject* _add = _internal_add_objectlist();
  // @@protoc_insertion_point(field_add:symphony.proto.BattleResultNty.ObjectList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ResultObject >&
BattleResultNty::objectlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.BattleResultNty.ObjectList)
  return _impl_.objectlist_;
}

// -------------------------------------------------------------------

// MainCopyReq

// int32 CopyID = 1;
inline void MainCopyReq::clear_copyid() {
  _impl_.copyid_ = 0;
}
inline int32_t MainCopyReq::_internal_copyid() const {
  return _impl_.copyid_;
}
inline int32_t MainCopyReq::copyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyReq.CopyID)
  return _internal_copyid();
}
inline void MainCopyReq::_internal_set_copyid(int32_t value) {
  
  _impl_.copyid_ = value;
}
inline void MainCopyReq::set_copyid(int32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyReq.CopyID)
}

// -------------------------------------------------------------------

// MainCopyAck

// uint32 RetCode = 1;
inline void MainCopyAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t MainCopyAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t MainCopyAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyAck.RetCode)
  return _internal_retcode();
}
inline void MainCopyAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void MainCopyAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyAck.RetCode)
}

// -------------------------------------------------------------------

// MainCopyResultNty

// uint64 RoleID = 1;
inline void MainCopyResultNty::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t MainCopyResultNty::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t MainCopyResultNty::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.RoleID)
  return _internal_roleid();
}
inline void MainCopyResultNty::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void MainCopyResultNty::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyResultNty.RoleID)
}

// int32 CopyID = 2;
inline void MainCopyResultNty::clear_copyid() {
  _impl_.copyid_ = 0;
}
inline int32_t MainCopyResultNty::_internal_copyid() const {
  return _impl_.copyid_;
}
inline int32_t MainCopyResultNty::copyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.CopyID)
  return _internal_copyid();
}
inline void MainCopyResultNty::_internal_set_copyid(int32_t value) {
  
  _impl_.copyid_ = value;
}
inline void MainCopyResultNty::set_copyid(int32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyResultNty.CopyID)
}

// int32 CopyResult = 3;
inline void MainCopyResultNty::clear_copyresult() {
  _impl_.copyresult_ = 0;
}
inline int32_t MainCopyResultNty::_internal_copyresult() const {
  return _impl_.copyresult_;
}
inline int32_t MainCopyResultNty::copyresult() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.CopyResult)
  return _internal_copyresult();
}
inline void MainCopyResultNty::_internal_set_copyresult(int32_t value) {
  
  _impl_.copyresult_ = value;
}
inline void MainCopyResultNty::set_copyresult(int32_t value) {
  _internal_set_copyresult(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyResultNty.CopyResult)
}

// int32 StarNum = 4;
inline void MainCopyResultNty::clear_starnum() {
  _impl_.starnum_ = 0;
}
inline int32_t MainCopyResultNty::_internal_starnum() const {
  return _impl_.starnum_;
}
inline int32_t MainCopyResultNty::starnum() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.StarNum)
  return _internal_starnum();
}
inline void MainCopyResultNty::_internal_set_starnum(int32_t value) {
  
  _impl_.starnum_ = value;
}
inline void MainCopyResultNty::set_starnum(int32_t value) {
  _internal_set_starnum(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyResultNty.StarNum)
}

// uint64 LastTime = 5;
inline void MainCopyResultNty::clear_lasttime() {
  _impl_.lasttime_ = uint64_t{0u};
}
inline uint64_t MainCopyResultNty::_internal_lasttime() const {
  return _impl_.lasttime_;
}
inline uint64_t MainCopyResultNty::lasttime() const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.LastTime)
  return _internal_lasttime();
}
inline void MainCopyResultNty::_internal_set_lasttime(uint64_t value) {
  
  _impl_.lasttime_ = value;
}
inline void MainCopyResultNty::set_lasttime(uint64_t value) {
  _internal_set_lasttime(value);
  // @@protoc_insertion_point(field_set:symphony.proto.MainCopyResultNty.LastTime)
}

// repeated .symphony.proto.ItemData ItemList = 6;
inline int MainCopyResultNty::_internal_itemlist_size() const {
  return _impl_.itemlist_.size();
}
inline int MainCopyResultNty::itemlist_size() const {
  return _internal_itemlist_size();
}
inline ::symphony::proto::ItemData* MainCopyResultNty::mutable_itemlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.MainCopyResultNty.ItemList)
  return _impl_.itemlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ItemData >*
MainCopyResultNty::mutable_itemlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.MainCopyResultNty.ItemList)
  return &_impl_.itemlist_;
}
inline const ::symphony::proto::ItemData& MainCopyResultNty::_internal_itemlist(int index) const {
  return _impl_.itemlist_.Get(index);
}
inline const ::symphony::proto::ItemData& MainCopyResultNty::itemlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.MainCopyResultNty.ItemList)
  return _internal_itemlist(index);
}
inline ::symphony::proto::ItemData* MainCopyResultNty::_internal_add_itemlist() {
  return _impl_.itemlist_.Add();
}
inline ::symphony::proto::ItemData* MainCopyResultNty::add_itemlist() {
  ::symphony::proto::ItemData* _add = _internal_add_itemlist();
  // @@protoc_insertion_point(field_add:symphony.proto.MainCopyResultNty.ItemList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::ItemData >&
MainCopyResultNty::itemlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.MainCopyResultNty.ItemList)
  return _impl_.itemlist_;
}

// -------------------------------------------------------------------

// Msg_CreateRoomReq

// uint64 RoleID = 1;
inline void Msg_CreateRoomReq::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_CreateRoomReq::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_CreateRoomReq::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_CreateRoomReq.RoleID)
  return _internal_roleid();
}
inline void Msg_CreateRoomReq::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_CreateRoomReq::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_CreateRoomReq.RoleID)
}

// uint32 CopyID = 2;
inline void Msg_CreateRoomReq::clear_copyid() {
  _impl_.copyid_ = 0u;
}
inline uint32_t Msg_CreateRoomReq::_internal_copyid() const {
  return _impl_.copyid_;
}
inline uint32_t Msg_CreateRoomReq::copyid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_CreateRoomReq.CopyID)
  return _internal_copyid();
}
inline void Msg_CreateRoomReq::_internal_set_copyid(uint32_t value) {
  
  _impl_.copyid_ = value;
}
inline void Msg_CreateRoomReq::set_copyid(uint32_t value) {
  _internal_set_copyid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_CreateRoomReq.CopyID)
}

// -------------------------------------------------------------------

// Msg_CreateRoomAck

// uint32 RetCode = 1;
inline void Msg_CreateRoomAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t Msg_CreateRoomAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t Msg_CreateRoomAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_CreateRoomAck.RetCode)
  return _internal_retcode();
}
inline void Msg_CreateRoomAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void Msg_CreateRoomAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_CreateRoomAck.RetCode)
}

// uint64 RoomID = 2;
inline void Msg_CreateRoomAck::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_CreateRoomAck::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_CreateRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_CreateRoomAck.RoomID)
  return _internal_roomid();
}
inline void Msg_CreateRoomAck::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_CreateRoomAck::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_CreateRoomAck.RoomID)
}

// -------------------------------------------------------------------

// Msg_JoinRoomReq

// uint64 RoleID = 1;
inline void Msg_JoinRoomReq::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_JoinRoomReq::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_JoinRoomReq::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_JoinRoomReq.RoleID)
  return _internal_roleid();
}
inline void Msg_JoinRoomReq::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_JoinRoomReq::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_JoinRoomReq.RoleID)
}

// uint64 RoomID = 2;
inline void Msg_JoinRoomReq::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_JoinRoomReq::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_JoinRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_JoinRoomReq.RoomID)
  return _internal_roomid();
}
inline void Msg_JoinRoomReq::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_JoinRoomReq::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_JoinRoomReq.RoomID)
}

// -------------------------------------------------------------------

// Msg_JoinRoomAck

// uint32 RetCode = 1;
inline void Msg_JoinRoomAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t Msg_JoinRoomAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t Msg_JoinRoomAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_JoinRoomAck.RetCode)
  return _internal_retcode();
}
inline void Msg_JoinRoomAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void Msg_JoinRoomAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_JoinRoomAck.RetCode)
}

// uint64 RoomID = 2;
inline void Msg_JoinRoomAck::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_JoinRoomAck::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_JoinRoomAck::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_JoinRoomAck.RoomID)
  return _internal_roomid();
}
inline void Msg_JoinRoomAck::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_JoinRoomAck::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_JoinRoomAck.RoomID)
}

// -------------------------------------------------------------------

// Msg_KickRoomReq

// uint64 RoleID = 1;
inline void Msg_KickRoomReq::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_KickRoomReq::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_KickRoomReq::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_KickRoomReq.RoleID)
  return _internal_roleid();
}
inline void Msg_KickRoomReq::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_KickRoomReq::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_KickRoomReq.RoleID)
}

// uint64 RoomID = 2;
inline void Msg_KickRoomReq::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_KickRoomReq::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_KickRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_KickRoomReq.RoomID)
  return _internal_roomid();
}
inline void Msg_KickRoomReq::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_KickRoomReq::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_KickRoomReq.RoomID)
}

// -------------------------------------------------------------------

// Msg_KickRoomAck

// uint32 RetCode = 1;
inline void Msg_KickRoomAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t Msg_KickRoomAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t Msg_KickRoomAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_KickRoomAck.RetCode)
  return _internal_retcode();
}
inline void Msg_KickRoomAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void Msg_KickRoomAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_KickRoomAck.RetCode)
}

// -------------------------------------------------------------------

// Msg_LeaveRoomReq

// uint64 RoleID = 1;
inline void Msg_LeaveRoomReq::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_LeaveRoomReq::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_LeaveRoomReq::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_LeaveRoomReq.RoleID)
  return _internal_roleid();
}
inline void Msg_LeaveRoomReq::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_LeaveRoomReq::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_LeaveRoomReq.RoleID)
}

// uint64 RoomID = 2;
inline void Msg_LeaveRoomReq::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_LeaveRoomReq::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_LeaveRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_LeaveRoomReq.RoomID)
  return _internal_roomid();
}
inline void Msg_LeaveRoomReq::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_LeaveRoomReq::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_LeaveRoomReq.RoomID)
}

// -------------------------------------------------------------------

// Msg_LeaveRoomAck

// uint32 RetCode = 1;
inline void Msg_LeaveRoomAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t Msg_LeaveRoomAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t Msg_LeaveRoomAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_LeaveRoomAck.RetCode)
  return _internal_retcode();
}
inline void Msg_LeaveRoomAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void Msg_LeaveRoomAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_LeaveRoomAck.RetCode)
}

// -------------------------------------------------------------------

// Msg_StartRoomReq

// uint64 RoleID = 1;
inline void Msg_StartRoomReq::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_StartRoomReq::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_StartRoomReq::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_StartRoomReq.RoleID)
  return _internal_roleid();
}
inline void Msg_StartRoomReq::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_StartRoomReq::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_StartRoomReq.RoleID)
}

// uint64 RoomID = 2;
inline void Msg_StartRoomReq::clear_roomid() {
  _impl_.roomid_ = uint64_t{0u};
}
inline uint64_t Msg_StartRoomReq::_internal_roomid() const {
  return _impl_.roomid_;
}
inline uint64_t Msg_StartRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_StartRoomReq.RoomID)
  return _internal_roomid();
}
inline void Msg_StartRoomReq::_internal_set_roomid(uint64_t value) {
  
  _impl_.roomid_ = value;
}
inline void Msg_StartRoomReq::set_roomid(uint64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_StartRoomReq.RoomID)
}

// -------------------------------------------------------------------

// Msg_StartRoomAck

// uint32 RetCode = 1;
inline void Msg_StartRoomAck::clear_retcode() {
  _impl_.retcode_ = 0u;
}
inline uint32_t Msg_StartRoomAck::_internal_retcode() const {
  return _impl_.retcode_;
}
inline uint32_t Msg_StartRoomAck::retcode() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_StartRoomAck.RetCode)
  return _internal_retcode();
}
inline void Msg_StartRoomAck::_internal_set_retcode(uint32_t value) {
  
  _impl_.retcode_ = value;
}
inline void Msg_StartRoomAck::set_retcode(uint32_t value) {
  _internal_set_retcode(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_StartRoomAck.RetCode)
}

// -------------------------------------------------------------------

// Msg_RoomPlayerInfo

// uint64 RoleID = 1;
inline void Msg_RoomPlayerInfo::clear_roleid() {
  _impl_.roleid_ = uint64_t{0u};
}
inline uint64_t Msg_RoomPlayerInfo::_internal_roleid() const {
  return _impl_.roleid_;
}
inline uint64_t Msg_RoomPlayerInfo::roleid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.RoleID)
  return _internal_roleid();
}
inline void Msg_RoomPlayerInfo::_internal_set_roleid(uint64_t value) {
  
  _impl_.roleid_ = value;
}
inline void Msg_RoomPlayerInfo::set_roleid(uint64_t value) {
  _internal_set_roleid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.RoleID)
}

// int32 Level = 2;
inline void Msg_RoomPlayerInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t Msg_RoomPlayerInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t Msg_RoomPlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.Level)
  return _internal_level();
}
inline void Msg_RoomPlayerInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void Msg_RoomPlayerInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.Level)
}

// string Name = 3;
inline void Msg_RoomPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Msg_RoomPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Msg_RoomPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.Name)
}
inline std::string* Msg_RoomPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:symphony.proto.Msg_RoomPlayerInfo.Name)
  return _s;
}
inline const std::string& Msg_RoomPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Msg_RoomPlayerInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Msg_RoomPlayerInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Msg_RoomPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:symphony.proto.Msg_RoomPlayerInfo.Name)
  return _impl_.name_.Release();
}
inline void Msg_RoomPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:symphony.proto.Msg_RoomPlayerInfo.Name)
}

// int32 ActorID = 4;
inline void Msg_RoomPlayerInfo::clear_actorid() {
  _impl_.actorid_ = 0;
}
inline int32_t Msg_RoomPlayerInfo::_internal_actorid() const {
  return _impl_.actorid_;
}
inline int32_t Msg_RoomPlayerInfo::actorid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.ActorID)
  return _internal_actorid();
}
inline void Msg_RoomPlayerInfo::_internal_set_actorid(int32_t value) {
  
  _impl_.actorid_ = value;
}
inline void Msg_RoomPlayerInfo::set_actorid(int32_t value) {
  _internal_set_actorid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.ActorID)
}

// int32 MountID = 5;
inline void Msg_RoomPlayerInfo::clear_mountid() {
  _impl_.mountid_ = 0;
}
inline int32_t Msg_RoomPlayerInfo::_internal_mountid() const {
  return _impl_.mountid_;
}
inline int32_t Msg_RoomPlayerInfo::mountid() const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.MountID)
  return _internal_mountid();
}
inline void Msg_RoomPlayerInfo::_internal_set_mountid(int32_t value) {
  
  _impl_.mountid_ = value;
}
inline void Msg_RoomPlayerInfo::set_mountid(int32_t value) {
  _internal_set_mountid(value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.MountID)
}

// repeated int32 Equips = 6;
inline int Msg_RoomPlayerInfo::_internal_equips_size() const {
  return _impl_.equips_.size();
}
inline int Msg_RoomPlayerInfo::equips_size() const {
  return _internal_equips_size();
}
inline void Msg_RoomPlayerInfo::clear_equips() {
  _impl_.equips_.Clear();
}
inline int32_t Msg_RoomPlayerInfo::_internal_equips(int index) const {
  return _impl_.equips_.Get(index);
}
inline int32_t Msg_RoomPlayerInfo::equips(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_RoomPlayerInfo.Equips)
  return _internal_equips(index);
}
inline void Msg_RoomPlayerInfo::set_equips(int index, int32_t value) {
  _impl_.equips_.Set(index, value);
  // @@protoc_insertion_point(field_set:symphony.proto.Msg_RoomPlayerInfo.Equips)
}
inline void Msg_RoomPlayerInfo::_internal_add_equips(int32_t value) {
  _impl_.equips_.Add(value);
}
inline void Msg_RoomPlayerInfo::add_equips(int32_t value) {
  _internal_add_equips(value);
  // @@protoc_insertion_point(field_add:symphony.proto.Msg_RoomPlayerInfo.Equips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Msg_RoomPlayerInfo::_internal_equips() const {
  return _impl_.equips_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Msg_RoomPlayerInfo::equips() const {
  // @@protoc_insertion_point(field_list:symphony.proto.Msg_RoomPlayerInfo.Equips)
  return _internal_equips();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Msg_RoomPlayerInfo::_internal_mutable_equips() {
  return &_impl_.equips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Msg_RoomPlayerInfo::mutable_equips() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.Msg_RoomPlayerInfo.Equips)
  return _internal_mutable_equips();
}

// -------------------------------------------------------------------

// Msg_BroadRoomNotify

// repeated .symphony.proto.Msg_RoomPlayerInfo PlayerList = 1;
inline int Msg_BroadRoomNotify::_internal_playerlist_size() const {
  return _impl_.playerlist_.size();
}
inline int Msg_BroadRoomNotify::playerlist_size() const {
  return _internal_playerlist_size();
}
inline void Msg_BroadRoomNotify::clear_playerlist() {
  _impl_.playerlist_.Clear();
}
inline ::symphony::proto::Msg_RoomPlayerInfo* Msg_BroadRoomNotify::mutable_playerlist(int index) {
  // @@protoc_insertion_point(field_mutable:symphony.proto.Msg_BroadRoomNotify.PlayerList)
  return _impl_.playerlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::Msg_RoomPlayerInfo >*
Msg_BroadRoomNotify::mutable_playerlist() {
  // @@protoc_insertion_point(field_mutable_list:symphony.proto.Msg_BroadRoomNotify.PlayerList)
  return &_impl_.playerlist_;
}
inline const ::symphony::proto::Msg_RoomPlayerInfo& Msg_BroadRoomNotify::_internal_playerlist(int index) const {
  return _impl_.playerlist_.Get(index);
}
inline const ::symphony::proto::Msg_RoomPlayerInfo& Msg_BroadRoomNotify::playerlist(int index) const {
  // @@protoc_insertion_point(field_get:symphony.proto.Msg_BroadRoomNotify.PlayerList)
  return _internal_playerlist(index);
}
inline ::symphony::proto::Msg_RoomPlayerInfo* Msg_BroadRoomNotify::_internal_add_playerlist() {
  return _impl_.playerlist_.Add();
}
inline ::symphony::proto::Msg_RoomPlayerInfo* Msg_BroadRoomNotify::add_playerlist() {
  ::symphony::proto::Msg_RoomPlayerInfo* _add = _internal_add_playerlist();
  // @@protoc_insertion_point(field_add:symphony.proto.Msg_BroadRoomNotify.PlayerList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::symphony::proto::Msg_RoomPlayerInfo >&
Msg_BroadRoomNotify::playerlist() const {
  // @@protoc_insertion_point(field_list:symphony.proto.Msg_BroadRoomNotify.PlayerList)
  return _impl_.playerlist_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace symphony

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_symphony_2fproto_2fmsg_5fcopy_2eproto
