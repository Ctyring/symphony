// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/msg_game.proto

#include "symphony/proto/msg_game.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR GmStopServerReq::GmStopServerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GmStopServerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GmStopServerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GmStopServerReqDefaultTypeInternal() {}
  union {
    GmStopServerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GmStopServerReqDefaultTypeInternal _GmStopServerReq_default_instance_;
PROTOBUF_CONSTEXPR GmStopServerAck::GmStopServerAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GmStopServerAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GmStopServerAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GmStopServerAckDefaultTypeInternal() {}
  union {
    GmStopServerAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GmStopServerAckDefaultTypeInternal _GmStopServerAck_default_instance_;
PROTOBUF_CONSTEXPR SvrRegToSvrReq::SvrRegToSvrReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.serverport_)*/0
  , /*decltype(_impl_.httpport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SvrRegToSvrReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SvrRegToSvrReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SvrRegToSvrReqDefaultTypeInternal() {}
  union {
    SvrRegToSvrReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SvrRegToSvrReqDefaultTypeInternal _SvrRegToSvrReq_default_instance_;
PROTOBUF_CONSTEXPR SvrRegToSvrAck::SvrRegToSvrAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newsvrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SvrRegToSvrAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SvrRegToSvrAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SvrRegToSvrAckDefaultTypeInternal() {}
  union {
    SvrRegToSvrAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SvrRegToSvrAckDefaultTypeInternal _SvrRegToSvrAck_default_instance_;
PROTOBUF_CONSTEXPR RoleDisconnectReq::RoleDisconnectReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDisconnectReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDisconnectReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDisconnectReqDefaultTypeInternal() {}
  union {
    RoleDisconnectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDisconnectReqDefaultTypeInternal _RoleDisconnectReq_default_instance_;
PROTOBUF_CONSTEXPR RoleDisconnectAck::RoleDisconnectAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleDisconnectAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleDisconnectAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleDisconnectAckDefaultTypeInternal() {}
  union {
    RoleDisconnectAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleDisconnectAckDefaultTypeInternal _RoleDisconnectAck_default_instance_;
PROTOBUF_CONSTEXPR RoleReconnectReq::RoleReconnectReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.logincode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleReconnectReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleReconnectReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleReconnectReqDefaultTypeInternal() {}
  union {
    RoleReconnectReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleReconnectReqDefaultTypeInternal _RoleReconnectReq_default_instance_;
PROTOBUF_CONSTEXPR RoleReconnectAck::RoleReconnectAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoleReconnectAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleReconnectAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleReconnectAckDefaultTypeInternal() {}
  union {
    RoleReconnectAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleReconnectAckDefaultTypeInternal _RoleReconnectAck_default_instance_;
PROTOBUF_CONSTEXPR RemoveConnectNty::RemoveConnectNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveConnectNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveConnectNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveConnectNtyDefaultTypeInternal() {}
  union {
    RemoveConnectNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveConnectNtyDefaultTypeInternal _RemoveConnectNty_default_instance_;
PROTOBUF_CONSTEXPR CreateNewSceneReq::CreateNewSceneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.copytype_)*/0
  , /*decltype(_impl_.createparam_)*/uint64_t{0u}
  , /*decltype(_impl_.playernum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateNewSceneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNewSceneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNewSceneReqDefaultTypeInternal() {}
  union {
    CreateNewSceneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNewSceneReqDefaultTypeInternal _CreateNewSceneReq_default_instance_;
PROTOBUF_CONSTEXPR CreateNewSceneAck::CreateNewSceneAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.createparam_)*/uint64_t{0u}
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.copytype_)*/0
  , /*decltype(_impl_.playernum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateNewSceneAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateNewSceneAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateNewSceneAckDefaultTypeInternal() {}
  union {
    CreateNewSceneAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateNewSceneAckDefaultTypeInternal _CreateNewSceneAck_default_instance_;
PROTOBUF_CONSTEXPR EnterSceneReq::EnterSceneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterSceneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterSceneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterSceneReqDefaultTypeInternal() {}
  union {
    EnterSceneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterSceneReqDefaultTypeInternal _EnterSceneReq_default_instance_;
PROTOBUF_CONSTEXPR EnterSceneAck::EnterSceneAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.carrer_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.ft_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.mp_)*/0
  , /*decltype(_impl_.hpmax_)*/0
  , /*decltype(_impl_.mpmax_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.mountid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnterSceneAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnterSceneAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnterSceneAckDefaultTypeInternal() {}
  union {
    EnterSceneAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnterSceneAckDefaultTypeInternal _EnterSceneAck_default_instance_;
PROTOBUF_CONSTEXPR BackToCityReq::BackToCityReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BackToCityReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackToCityReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackToCityReqDefaultTypeInternal() {}
  union {
    BackToCityReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackToCityReqDefaultTypeInternal _BackToCityReq_default_instance_;
PROTOBUF_CONSTEXPR BackToCityAck::BackToCityAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BackToCityAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackToCityAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackToCityAckDefaultTypeInternal() {}
  union {
    BackToCityAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackToCityAckDefaultTypeInternal _BackToCityAck_default_instance_;
PROTOBUF_CONSTEXPR LeaveSceneReq::LeaveSceneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveSceneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveSceneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveSceneReqDefaultTypeInternal() {}
  union {
    LeaveSceneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveSceneReqDefaultTypeInternal _LeaveSceneReq_default_instance_;
PROTOBUF_CONSTEXPR LeaveSceneAck::LeaveSceneAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveSceneAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveSceneAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveSceneAckDefaultTypeInternal() {}
  union {
    LeaveSceneAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveSceneAckDefaultTypeInternal _LeaveSceneAck_default_instance_;
PROTOBUF_CONSTEXPR AbortSceneReq::AbortSceneReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.reason_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbortSceneReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbortSceneReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbortSceneReqDefaultTypeInternal() {}
  union {
    AbortSceneReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbortSceneReqDefaultTypeInternal _AbortSceneReq_default_instance_;
PROTOBUF_CONSTEXPR AbortSceneAck::AbortSceneAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbortSceneAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbortSceneAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbortSceneAckDefaultTypeInternal() {}
  union {
    AbortSceneAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbortSceneAckDefaultTypeInternal _AbortSceneAck_default_instance_;
PROTOBUF_CONSTEXPR AbortSceneNty::AbortSceneNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.copytype_)*/0
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.param_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AbortSceneNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AbortSceneNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AbortSceneNtyDefaultTypeInternal() {}
  union {
    AbortSceneNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AbortSceneNtyDefaultTypeInternal _AbortSceneNty_default_instance_;
PROTOBUF_CONSTEXPR TransRoleData::TransRoleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equips_)*/{}
  , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
  , /*decltype(_impl_.propertys_)*/{}
  , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.carrerid_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.mountid_)*/0
  , /*decltype(_impl_.robot_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransRoleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransRoleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransRoleDataDefaultTypeInternal() {}
  union {
    TransRoleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransRoleDataDefaultTypeInternal _TransRoleData_default_instance_;
PROTOBUF_CONSTEXPR TransPetData::TransPetData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.propertys_)*/{}
  , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.petguid_)*/uint64_t{0u}
  , /*decltype(_impl_.petid_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransPetDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransPetDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransPetDataDefaultTypeInternal() {}
  union {
    TransPetData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransPetDataDefaultTypeInternal _TransPetData_default_instance_;
PROTOBUF_CONSTEXPR TransPartnerData::TransPartnerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.propertys_)*/{}
  , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
  , /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partnerguid_)*/uint64_t{0u}
  , /*decltype(_impl_.partnerid_)*/0
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransPartnerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransPartnerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransPartnerDataDefaultTypeInternal() {}
  union {
    TransPartnerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransPartnerDataDefaultTypeInternal _TransPartnerData_default_instance_;
PROTOBUF_CONSTEXPR TransferDataItem::TransferDataItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roledata_)*/nullptr
  , /*decltype(_impl_.petdata_)*/nullptr
  , /*decltype(_impl_.partnerdata_)*/nullptr
  , /*decltype(_impl_.camp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferDataItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferDataItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferDataItemDefaultTypeInternal() {}
  union {
    TransferDataItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferDataItemDefaultTypeInternal _TransferDataItem_default_instance_;
PROTOBUF_CONSTEXPR TransferDataReq::TransferDataReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.transdatas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferDataReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferDataReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferDataReqDefaultTypeInternal() {}
  union {
    TransferDataReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferDataReqDefaultTypeInternal _TransferDataReq_default_instance_;
PROTOBUF_CONSTEXPR TransferDataAck::TransferDataAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferDataAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferDataAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferDataAckDefaultTypeInternal() {}
  union {
    TransferDataAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferDataAckDefaultTypeInternal _TransferDataAck_default_instance_;
PROTOBUF_CONSTEXPR NotifyIntoScene::NotifyIntoScene(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.copyguid_)*/0
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NotifyIntoSceneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotifyIntoSceneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotifyIntoSceneDefaultTypeInternal() {}
  union {
    NotifyIntoScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotifyIntoSceneDefaultTypeInternal _NotifyIntoScene_default_instance_;
PROTOBUF_CONSTEXPR NearByRoleItem::NearByRoleItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.actorid_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NearByRoleItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NearByRoleItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NearByRoleItemDefaultTypeInternal() {}
  union {
    NearByRoleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NearByRoleItemDefaultTypeInternal _NearByRoleItem_default_instance_;
PROTOBUF_CONSTEXPR CopyInsItem::CopyInsItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.copyguid_)*/0u
  , /*decltype(_impl_.copyid_)*/0
  , /*decltype(_impl_.copytype_)*/0
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CopyInsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyInsItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyInsItemDefaultTypeInternal() {}
  union {
    CopyInsItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyInsItemDefaultTypeInternal _CopyInsItem_default_instance_;
PROTOBUF_CONSTEXPR CopyReportReq::CopyReportReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.copylist_)*/{}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CopyReportReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CopyReportReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CopyReportReqDefaultTypeInternal() {}
  union {
    CopyReportReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CopyReportReqDefaultTypeInternal _CopyReportReq_default_instance_;
PROTOBUF_CONSTEXPR UseHpBottleReq::UseHpBottleReq(
    ::_pbi::ConstantInitialized) {}
struct UseHpBottleReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseHpBottleReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseHpBottleReqDefaultTypeInternal() {}
  union {
    UseHpBottleReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseHpBottleReqDefaultTypeInternal _UseHpBottleReq_default_instance_;
PROTOBUF_CONSTEXPR UseHpBottleAck::UseHpBottleAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UseHpBottleAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseHpBottleAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseHpBottleAckDefaultTypeInternal() {}
  union {
    UseHpBottleAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseHpBottleAckDefaultTypeInternal _UseHpBottleAck_default_instance_;
PROTOBUF_CONSTEXPR UseMpBottleReq::UseMpBottleReq(
    ::_pbi::ConstantInitialized) {}
struct UseMpBottleReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseMpBottleReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseMpBottleReqDefaultTypeInternal() {}
  union {
    UseMpBottleReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseMpBottleReqDefaultTypeInternal _UseMpBottleReq_default_instance_;
PROTOBUF_CONSTEXPR UseMpBottleAck::UseMpBottleAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UseMpBottleAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseMpBottleAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseMpBottleAckDefaultTypeInternal() {}
  union {
    UseMpBottleAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseMpBottleAckDefaultTypeInternal _UseMpBottleAck_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageReq::ChatMessageReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetid_)*/uint64_t{0u}
  , /*decltype(_impl_.guildid_)*/uint64_t{0u}
  , /*decltype(_impl_.chatchl_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageReqDefaultTypeInternal() {}
  union {
    ChatMessageReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageReqDefaultTypeInternal _ChatMessageReq_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageAck::ChatMessageAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageAckDefaultTypeInternal() {}
  union {
    ChatMessageAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageAckDefaultTypeInternal _ChatMessageAck_default_instance_;
PROTOBUF_CONSTEXPR ChatMessageNty::ChatMessageNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.srcname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.srcid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetid_)*/uint64_t{0u}
  , /*decltype(_impl_.srclevel_)*/0
  , /*decltype(_impl_.chatchl_)*/0
  , /*decltype(_impl_.guildid_)*/uint64_t{0u}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChatMessageNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageNtyDefaultTypeInternal() {}
  union {
    ChatMessageNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageNtyDefaultTypeInternal _ChatMessageNty_default_instance_;
PROTOBUF_CONSTEXPR CommonReq::CommonReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.param1_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonReqDefaultTypeInternal() {}
  union {
    CommonReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonReqDefaultTypeInternal _CommonReq_default_instance_;
PROTOBUF_CONSTEXPR CommonAck::CommonAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommonAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonAckDefaultTypeInternal() {}
  union {
    CommonAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonAckDefaultTypeInternal _CommonAck_default_instance_;
PROTOBUF_CONSTEXPR BroadMessageNotify::BroadMessageNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connid_)*/{}
  , /*decltype(_impl_._connid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.msgdata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msgid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BroadMessageNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BroadMessageNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BroadMessageNotifyDefaultTypeInternal() {}
  union {
    BroadMessageNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BroadMessageNotifyDefaultTypeInternal _BroadMessageNotify_default_instance_;
PROTOBUF_CONSTEXPR LogicRegToLoginReq::LogicRegToLoginReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.svrinnerip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.serverport_)*/0
  , /*decltype(_impl_.httpport_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicRegToLoginReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicRegToLoginReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicRegToLoginReqDefaultTypeInternal() {}
  union {
    LogicRegToLoginReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicRegToLoginReqDefaultTypeInternal _LogicRegToLoginReq_default_instance_;
PROTOBUF_CONSTEXPR LogicRegToLoginAck::LogicRegToLoginAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.newsvrname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.svropentime_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicRegToLoginAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicRegToLoginAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicRegToLoginAckDefaultTypeInternal() {}
  union {
    LogicRegToLoginAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicRegToLoginAckDefaultTypeInternal _LogicRegToLoginAck_default_instance_;
PROTOBUF_CONSTEXPR LogicRegToDbSvrReq::LogicRegToDbSvrReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.processid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicRegToDbSvrReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicRegToDbSvrReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicRegToDbSvrReqDefaultTypeInternal() {}
  union {
    LogicRegToDbSvrReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicRegToDbSvrReqDefaultTypeInternal _LogicRegToDbSvrReq_default_instance_;
PROTOBUF_CONSTEXPR LogicRegToDbSvrAck::LogicRegToDbSvrAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicRegToDbSvrAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicRegToDbSvrAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicRegToDbSvrAckDefaultTypeInternal() {}
  union {
    LogicRegToDbSvrAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicRegToDbSvrAckDefaultTypeInternal _LogicRegToDbSvrAck_default_instance_;
PROTOBUF_CONSTEXPR LogicUpdateInfoReq::LogicUpdateInfoReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0
  , /*decltype(_impl_.maxonline_)*/0
  , /*decltype(_impl_.curonline_)*/0
  , /*decltype(_impl_.totalnum_)*/0
  , /*decltype(_impl_.cachenum_)*/0
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.dberrcnt_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicUpdateInfoReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicUpdateInfoReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicUpdateInfoReqDefaultTypeInternal() {}
  union {
    LogicUpdateInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicUpdateInfoReqDefaultTypeInternal _LogicUpdateInfoReq_default_instance_;
PROTOBUF_CONSTEXPR LogicUpdateInfoAck::LogicUpdateInfoAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.svropentime_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogicUpdateInfoAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogicUpdateInfoAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogicUpdateInfoAckDefaultTypeInternal() {}
  union {
    LogicUpdateInfoAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogicUpdateInfoAckDefaultTypeInternal _LogicUpdateInfoAck_default_instance_;
PROTOBUF_CONSTEXPR SetupEquipReq::SetupEquipReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipguid_)*/uint64_t{0u}
  , /*decltype(_impl_.bagguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupEquipReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupEquipReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupEquipReqDefaultTypeInternal() {}
  union {
    SetupEquipReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupEquipReqDefaultTypeInternal _SetupEquipReq_default_instance_;
PROTOBUF_CONSTEXPR SetupEquipAck::SetupEquipAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupEquipAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupEquipAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupEquipAckDefaultTypeInternal() {}
  union {
    SetupEquipAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupEquipAckDefaultTypeInternal _SetupEquipAck_default_instance_;
PROTOBUF_CONSTEXPR Msg_GiftCodeReq::Msg_GiftCodeReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.giftcode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.accountid_)*/uint64_t{0u}
  , /*decltype(_impl_.channel_)*/0u
  , /*decltype(_impl_.areaid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_GiftCodeReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_GiftCodeReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_GiftCodeReqDefaultTypeInternal() {}
  union {
    Msg_GiftCodeReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_GiftCodeReqDefaultTypeInternal _Msg_GiftCodeReq_default_instance_;
PROTOBUF_CONSTEXPR Msg_GiftCodeAck::Msg_GiftCodeAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.roleid_)*/uint64_t{0u}
  , /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_GiftCodeAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_GiftCodeAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_GiftCodeAckDefaultTypeInternal() {}
  union {
    Msg_GiftCodeAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_GiftCodeAckDefaultTypeInternal _Msg_GiftCodeAck_default_instance_;
PROTOBUF_CONSTEXPR UnsetEquipReq::UnsetEquipReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.equipguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetEquipReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetEquipReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetEquipReqDefaultTypeInternal() {}
  union {
    UnsetEquipReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetEquipReqDefaultTypeInternal _UnsetEquipReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetEquipAck::UnsetEquipAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetEquipAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetEquipAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetEquipAckDefaultTypeInternal() {}
  union {
    UnsetEquipAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetEquipAckDefaultTypeInternal _UnsetEquipAck_default_instance_;
PROTOBUF_CONSTEXPR SetupGemReq::SetupGemReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gemguid_)*/uint64_t{0u}
  , /*decltype(_impl_.bagguid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupGemReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupGemReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupGemReqDefaultTypeInternal() {}
  union {
    SetupGemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupGemReqDefaultTypeInternal _SetupGemReq_default_instance_;
PROTOBUF_CONSTEXPR SetupGemAck::SetupGemAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupGemAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupGemAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupGemAckDefaultTypeInternal() {}
  union {
    SetupGemAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupGemAckDefaultTypeInternal _SetupGemAck_default_instance_;
PROTOBUF_CONSTEXPR UnsetGemReq::UnsetGemReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gemguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetGemReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetGemReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetGemReqDefaultTypeInternal() {}
  union {
    UnsetGemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetGemReqDefaultTypeInternal _UnsetGemReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetGemAck::UnsetGemAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetGemAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetGemAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetGemAckDefaultTypeInternal() {}
  union {
    UnsetGemAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetGemAckDefaultTypeInternal _UnsetGemAck_default_instance_;
PROTOBUF_CONSTEXPR SetupPartnerReq::SetupPartnerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partnerguid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupPartnerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupPartnerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupPartnerReqDefaultTypeInternal() {}
  union {
    SetupPartnerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupPartnerReqDefaultTypeInternal _SetupPartnerReq_default_instance_;
PROTOBUF_CONSTEXPR SetupPartnerAck::SetupPartnerAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupPartnerAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupPartnerAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupPartnerAckDefaultTypeInternal() {}
  union {
    SetupPartnerAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupPartnerAckDefaultTypeInternal _SetupPartnerAck_default_instance_;
PROTOBUF_CONSTEXPR UnsetPartnerReq::UnsetPartnerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetPartnerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetPartnerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetPartnerReqDefaultTypeInternal() {}
  union {
    UnsetPartnerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetPartnerReqDefaultTypeInternal _UnsetPartnerReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetPartnerAck::UnsetPartnerAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetPartnerAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetPartnerAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetPartnerAckDefaultTypeInternal() {}
  union {
    UnsetPartnerAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetPartnerAckDefaultTypeInternal _UnsetPartnerAck_default_instance_;
PROTOBUF_CONSTEXPR SetupMountReq::SetupMountReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mountguid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetpos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupMountReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMountReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMountReqDefaultTypeInternal() {}
  union {
    SetupMountReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMountReqDefaultTypeInternal _SetupMountReq_default_instance_;
PROTOBUF_CONSTEXPR SetupMountAck::SetupMountAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupMountAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupMountAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupMountAckDefaultTypeInternal() {}
  union {
    SetupMountAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupMountAckDefaultTypeInternal _SetupMountAck_default_instance_;
PROTOBUF_CONSTEXPR UnsetMountReq::UnsetMountReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mountguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetMountReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetMountReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetMountReqDefaultTypeInternal() {}
  union {
    UnsetMountReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetMountReqDefaultTypeInternal _UnsetMountReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetMountAck::UnsetMountAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetMountAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetMountAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetMountAckDefaultTypeInternal() {}
  union {
    UnsetMountAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetMountAckDefaultTypeInternal _UnsetMountAck_default_instance_;
PROTOBUF_CONSTEXPR SetupPetReq::SetupPetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.petguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupPetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupPetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupPetReqDefaultTypeInternal() {}
  union {
    SetupPetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupPetReqDefaultTypeInternal _SetupPetReq_default_instance_;
PROTOBUF_CONSTEXPR SetupPetAck::SetupPetAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetupPetAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetupPetAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetupPetAckDefaultTypeInternal() {}
  union {
    SetupPetAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetupPetAckDefaultTypeInternal _SetupPetAck_default_instance_;
PROTOBUF_CONSTEXPR UnsetPetReq::UnsetPetReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.petguid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetPetReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetPetReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetPetReqDefaultTypeInternal() {}
  union {
    UnsetPetReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetPetReqDefaultTypeInternal _UnsetPetReq_default_instance_;
PROTOBUF_CONSTEXPR UnsetPetAck::UnsetPetAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UnsetPetAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnsetPetAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnsetPetAckDefaultTypeInternal() {}
  union {
    UnsetPetAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnsetPetAckDefaultTypeInternal _UnsetPetAck_default_instance_;
PROTOBUF_CONSTEXPR StoreBuyReq::StoreBuyReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.storetype_)*/0
  , /*decltype(_impl_.storeid_)*/0
  , /*decltype(_impl_.buynum_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreBuyReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreBuyReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreBuyReqDefaultTypeInternal() {}
  union {
    StoreBuyReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreBuyReqDefaultTypeInternal _StoreBuyReq_default_instance_;
PROTOBUF_CONSTEXPR StoreBuyAck::StoreBuyAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.retcode_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StoreBuyAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreBuyAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreBuyAckDefaultTypeInternal() {}
  union {
    StoreBuyAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreBuyAckDefaultTypeInternal _StoreBuyAck_default_instance_;
PROTOBUF_CONSTEXPR ObjectChangeNotify::ObjectChangeNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strvalue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/int64_t{0}
  , /*decltype(_impl_.intvalue1_)*/int64_t{0}
  , /*decltype(_impl_.intvalue2_)*/int64_t{0}
  , /*decltype(_impl_.changetype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ObjectChangeNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObjectChangeNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObjectChangeNotifyDefaultTypeInternal() {}
  union {
    ObjectChangeNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObjectChangeNotifyDefaultTypeInternal _ObjectChangeNotify_default_instance_;
PROTOBUF_CONSTEXPR HitEffectItem::HitEffectItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.castguid_)*/uint64_t{0u}
  , /*decltype(_impl_.targetguid_)*/uint64_t{0u}
  , /*decltype(_impl_.hurtvalue_)*/0
  , /*decltype(_impl_.crit_)*/false
  , /*decltype(_impl_.hitactionid_)*/0u
  , /*decltype(_impl_.hiteffectid_)*/0u
  , /*decltype(_impl_.hitdistance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitEffectItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitEffectItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitEffectItemDefaultTypeInternal() {}
  union {
    HitEffectItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitEffectItemDefaultTypeInternal _HitEffectItem_default_instance_;
PROTOBUF_CONSTEXPR HitEffectNtf::HitEffectNtf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.itemlist_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitEffectNtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitEffectNtfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitEffectNtfDefaultTypeInternal() {}
  union {
    HitEffectNtf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitEffectNtfDefaultTypeInternal _HitEffectNtf_default_instance_;
PROTOBUF_CONSTEXPR UseItemReq::UseItemReq(
    ::_pbi::ConstantInitialized) {}
struct UseItemReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseItemReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseItemReqDefaultTypeInternal() {}
  union {
    UseItemReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseItemReqDefaultTypeInternal _UseItemReq_default_instance_;
PROTOBUF_CONSTEXPR UseItemAck::UseItemAck(
    ::_pbi::ConstantInitialized) {}
struct UseItemAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UseItemAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UseItemAckDefaultTypeInternal() {}
  union {
    UseItemAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UseItemAckDefaultTypeInternal _UseItemAck_default_instance_;
PROTOBUF_CONSTEXPR MsgGetRandomNameReq::MsgGetRandomNameReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgGetRandomNameReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgGetRandomNameReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgGetRandomNameReqDefaultTypeInternal() {}
  union {
    MsgGetRandomNameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgGetRandomNameReqDefaultTypeInternal _MsgGetRandomNameReq_default_instance_;
PROTOBUF_CONSTEXPR MsgGetRandomNameAck::MsgGetRandomNameAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgGetRandomNameAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgGetRandomNameAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgGetRandomNameAckDefaultTypeInternal() {}
  union {
    MsgGetRandomNameAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgGetRandomNameAckDefaultTypeInternal _MsgGetRandomNameAck_default_instance_;
PROTOBUF_CONSTEXPR Msg_DbErrorCountNty::Msg_DbErrorCountNty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errorcount_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_DbErrorCountNtyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_DbErrorCountNtyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_DbErrorCountNtyDefaultTypeInternal() {}
  union {
    Msg_DbErrorCountNty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_DbErrorCountNtyDefaultTypeInternal _Msg_DbErrorCountNty_default_instance_;
PROTOBUF_CONSTEXPR Msg_GameParamReq::Msg_GameParamReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientver_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_GameParamReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_GameParamReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_GameParamReqDefaultTypeInternal() {}
  union {
    Msg_GameParamReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_GameParamReqDefaultTypeInternal _Msg_GameParamReq_default_instance_;
PROTOBUF_CONSTEXPR Msg_GameParamAck::Msg_GameParamAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paramkey_)*/{}
  , /*decltype(_impl_.paramvalue_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Msg_GameParamAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Msg_GameParamAckDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Msg_GameParamAckDefaultTypeInternal() {}
  union {
    Msg_GameParamAck _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Msg_GameParamAckDefaultTypeInternal _Msg_GameParamAck_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[80];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2fmsg_5fgame_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2fmsg_5fgame_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2fmsg_5fgame_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::GmStopServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::GmStopServerReq, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::GmStopServerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::GmStopServerAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _impl_.servername_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _impl_.serverip_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _impl_.serverport_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrReq, _impl_.httpport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SvrRegToSvrAck, _impl_.newsvrname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDisconnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDisconnectReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDisconnectReq, _impl_.roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDisconnectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleDisconnectAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectReq, _impl_.logincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleReconnectAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RemoveConnectNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RemoveConnectNty, _impl_.roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneReq, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneReq, _impl_.copytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneReq, _impl_.playernum_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneReq, _impl_.createparam_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.createparam_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.copytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CreateNewSceneAck, _impl_.playernum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneReq, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneReq, _impl_.copyid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.carrer_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.rolename_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.ft_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.mp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.hpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.mpmax_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.mountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::EnterSceneAck, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BackToCityReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BackToCityReq, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BackToCityAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BackToCityAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LeaveSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LeaveSceneReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LeaveSceneReq, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LeaveSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LeaveSceneAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneReq, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.copytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AbortSceneNty, _impl_.param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.carrerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.mountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.robot_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.equips_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.propertys_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransRoleData, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.petguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.petid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.propertys_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPetData, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.partnerguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.partnerid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.propertys_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransPartnerData, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataItem, _impl_.camp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataItem, _impl_.roledata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataItem, _impl_.petdata_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataItem, _impl_.partnerdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataReq, _impl_.transdatas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::TransferDataAck, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NotifyIntoScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NotifyIntoScene, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NotifyIntoScene, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NotifyIntoScene, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NotifyIntoScene, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NearByRoleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NearByRoleItem, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NearByRoleItem, _impl_.actorid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NearByRoleItem, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::NearByRoleItem, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyInsItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyInsItem, _impl_.copyguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyInsItem, _impl_.copyid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyInsItem, _impl_.copytype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyInsItem, _impl_.serverid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyReportReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyReportReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CopyReportReq, _impl_.copylist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseHpBottleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseHpBottleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseHpBottleAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseHpBottleAck, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseMpBottleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseMpBottleAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseMpBottleAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseMpBottleAck, _impl_.count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.srcname_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.chatchl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.guildid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageReq, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.srcname_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.srcid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.srclevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.chatchl_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.guildid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ChatMessageNty, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CommonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CommonReq, _impl_.param1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CommonAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::CommonAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BroadMessageNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BroadMessageNotify, _impl_.msgid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BroadMessageNotify, _impl_.connid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::BroadMessageNotify, _impl_.msgdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _impl_.servername_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _impl_.svrinnerip_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _impl_.serverport_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginReq, _impl_.httpport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginAck, _impl_.newsvrname_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToLoginAck, _impl_.svropentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrReq, _impl_.servername_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrReq, _impl_.processid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicRegToDbSvrAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.servername_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.maxonline_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.curonline_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.totalnum_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.cachenum_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoReq, _impl_.dberrcnt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::LogicUpdateInfoAck, _impl_.svropentime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupEquipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupEquipReq, _impl_.equipguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupEquipReq, _impl_.bagguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupEquipAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupEquipAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _impl_.giftcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeReq, _impl_.areaid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeAck, _impl_.retcode_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeAck, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GiftCodeAck, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetEquipReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetEquipReq, _impl_.equipguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetEquipAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetEquipAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemReq, _impl_.gemguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemReq, _impl_.bagguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemReq, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupGemAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetGemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetGemReq, _impl_.gemguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetGemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetGemAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPartnerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPartnerReq, _impl_.partnerguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPartnerReq, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPartnerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPartnerAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPartnerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPartnerReq, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPartnerAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPartnerAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupMountReq, _impl_.mountguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupMountReq, _impl_.targetpos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupMountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupMountAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetMountReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetMountReq, _impl_.mountguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetMountAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetMountAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPetReq, _impl_.petguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::SetupPetAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPetReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPetReq, _impl_.petguid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPetAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UnsetPetAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyReq, _impl_.storetype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyReq, _impl_.storeid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyReq, _impl_.buynum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::StoreBuyAck, _impl_.retcode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _impl_.changetype_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _impl_.intvalue1_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _impl_.intvalue2_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::ObjectChangeNotify, _impl_.strvalue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.castguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.targetguid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.hurtvalue_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.crit_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.hitactionid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.hiteffectid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectItem, _impl_.hitdistance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectNtf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::HitEffectNtf, _impl_.itemlist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseItemReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::UseItemAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::MsgGetRandomNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::MsgGetRandomNameReq, _impl_.sex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::MsgGetRandomNameAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::MsgGetRandomNameAck, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_DbErrorCountNty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_DbErrorCountNty, _impl_.errorcount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamReq, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamReq, _impl_.clientver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamAck, _impl_.paramkey_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::Msg_GameParamAck, _impl_.paramvalue_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::symphony::proto::GmStopServerReq)},
  { 7, -1, -1, sizeof(::symphony::proto::GmStopServerAck)},
  { 14, -1, -1, sizeof(::symphony::proto::SvrRegToSvrReq)},
  { 25, -1, -1, sizeof(::symphony::proto::SvrRegToSvrAck)},
  { 33, -1, -1, sizeof(::symphony::proto::RoleDisconnectReq)},
  { 41, -1, -1, sizeof(::symphony::proto::RoleDisconnectAck)},
  { 48, -1, -1, sizeof(::symphony::proto::RoleReconnectReq)},
  { 57, -1, -1, sizeof(::symphony::proto::RoleReconnectAck)},
  { 64, -1, -1, sizeof(::symphony::proto::RemoveConnectNty)},
  { 71, -1, -1, sizeof(::symphony::proto::CreateNewSceneReq)},
  { 81, -1, -1, sizeof(::symphony::proto::CreateNewSceneAck)},
  { 94, -1, -1, sizeof(::symphony::proto::EnterSceneReq)},
  { 104, -1, -1, sizeof(::symphony::proto::EnterSceneAck)},
  { 130, -1, -1, sizeof(::symphony::proto::BackToCityReq)},
  { 137, -1, -1, sizeof(::symphony::proto::BackToCityAck)},
  { 144, -1, -1, sizeof(::symphony::proto::LeaveSceneReq)},
  { 152, -1, -1, sizeof(::symphony::proto::LeaveSceneAck)},
  { 159, -1, -1, sizeof(::symphony::proto::AbortSceneReq)},
  { 167, -1, -1, sizeof(::symphony::proto::AbortSceneAck)},
  { 174, -1, -1, sizeof(::symphony::proto::AbortSceneNty)},
  { 186, -1, -1, sizeof(::symphony::proto::TransRoleData)},
  { 202, -1, -1, sizeof(::symphony::proto::TransPetData)},
  { 215, -1, -1, sizeof(::symphony::proto::TransPartnerData)},
  { 228, -1, -1, sizeof(::symphony::proto::TransferDataItem)},
  { 238, -1, -1, sizeof(::symphony::proto::TransferDataReq)},
  { 245, -1, -1, sizeof(::symphony::proto::TransferDataAck)},
  { 256, -1, -1, sizeof(::symphony::proto::NotifyIntoScene)},
  { 266, -1, -1, sizeof(::symphony::proto::NearByRoleItem)},
  { 276, -1, -1, sizeof(::symphony::proto::CopyInsItem)},
  { 286, -1, -1, sizeof(::symphony::proto::CopyReportReq)},
  { 294, -1, -1, sizeof(::symphony::proto::UseHpBottleReq)},
  { 300, -1, -1, sizeof(::symphony::proto::UseHpBottleAck)},
  { 308, -1, -1, sizeof(::symphony::proto::UseMpBottleReq)},
  { 314, -1, -1, sizeof(::symphony::proto::UseMpBottleAck)},
  { 322, -1, -1, sizeof(::symphony::proto::ChatMessageReq)},
  { 334, -1, -1, sizeof(::symphony::proto::ChatMessageAck)},
  { 341, -1, -1, sizeof(::symphony::proto::ChatMessageNty)},
  { 355, -1, -1, sizeof(::symphony::proto::CommonReq)},
  { 362, -1, -1, sizeof(::symphony::proto::CommonAck)},
  { 369, -1, -1, sizeof(::symphony::proto::BroadMessageNotify)},
  { 378, -1, -1, sizeof(::symphony::proto::LogicRegToLoginReq)},
  { 389, -1, -1, sizeof(::symphony::proto::LogicRegToLoginAck)},
  { 398, -1, -1, sizeof(::symphony::proto::LogicRegToDbSvrReq)},
  { 407, -1, -1, sizeof(::symphony::proto::LogicRegToDbSvrAck)},
  { 414, -1, -1, sizeof(::symphony::proto::LogicUpdateInfoReq)},
  { 428, -1, -1, sizeof(::symphony::proto::LogicUpdateInfoAck)},
  { 436, -1, -1, sizeof(::symphony::proto::SetupEquipReq)},
  { 444, -1, -1, sizeof(::symphony::proto::SetupEquipAck)},
  { 451, -1, -1, sizeof(::symphony::proto::Msg_GiftCodeReq)},
  { 462, -1, -1, sizeof(::symphony::proto::Msg_GiftCodeAck)},
  { 471, -1, -1, sizeof(::symphony::proto::UnsetEquipReq)},
  { 478, -1, -1, sizeof(::symphony::proto::UnsetEquipAck)},
  { 485, -1, -1, sizeof(::symphony::proto::SetupGemReq)},
  { 494, -1, -1, sizeof(::symphony::proto::SetupGemAck)},
  { 501, -1, -1, sizeof(::symphony::proto::UnsetGemReq)},
  { 508, -1, -1, sizeof(::symphony::proto::UnsetGemAck)},
  { 515, -1, -1, sizeof(::symphony::proto::SetupPartnerReq)},
  { 523, -1, -1, sizeof(::symphony::proto::SetupPartnerAck)},
  { 530, -1, -1, sizeof(::symphony::proto::UnsetPartnerReq)},
  { 537, -1, -1, sizeof(::symphony::proto::UnsetPartnerAck)},
  { 544, -1, -1, sizeof(::symphony::proto::SetupMountReq)},
  { 552, -1, -1, sizeof(::symphony::proto::SetupMountAck)},
  { 559, -1, -1, sizeof(::symphony::proto::UnsetMountReq)},
  { 566, -1, -1, sizeof(::symphony::proto::UnsetMountAck)},
  { 573, -1, -1, sizeof(::symphony::proto::SetupPetReq)},
  { 580, -1, -1, sizeof(::symphony::proto::SetupPetAck)},
  { 587, -1, -1, sizeof(::symphony::proto::UnsetPetReq)},
  { 594, -1, -1, sizeof(::symphony::proto::UnsetPetAck)},
  { 601, -1, -1, sizeof(::symphony::proto::StoreBuyReq)},
  { 610, -1, -1, sizeof(::symphony::proto::StoreBuyAck)},
  { 617, -1, -1, sizeof(::symphony::proto::ObjectChangeNotify)},
  { 628, -1, -1, sizeof(::symphony::proto::HitEffectItem)},
  { 641, -1, -1, sizeof(::symphony::proto::HitEffectNtf)},
  { 648, -1, -1, sizeof(::symphony::proto::UseItemReq)},
  { 654, -1, -1, sizeof(::symphony::proto::UseItemAck)},
  { 660, -1, -1, sizeof(::symphony::proto::MsgGetRandomNameReq)},
  { 667, -1, -1, sizeof(::symphony::proto::MsgGetRandomNameAck)},
  { 674, -1, -1, sizeof(::symphony::proto::Msg_DbErrorCountNty)},
  { 681, -1, -1, sizeof(::symphony::proto::Msg_GameParamReq)},
  { 689, -1, -1, sizeof(::symphony::proto::Msg_GameParamAck)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_GmStopServerReq_default_instance_._instance,
  &::symphony::proto::_GmStopServerAck_default_instance_._instance,
  &::symphony::proto::_SvrRegToSvrReq_default_instance_._instance,
  &::symphony::proto::_SvrRegToSvrAck_default_instance_._instance,
  &::symphony::proto::_RoleDisconnectReq_default_instance_._instance,
  &::symphony::proto::_RoleDisconnectAck_default_instance_._instance,
  &::symphony::proto::_RoleReconnectReq_default_instance_._instance,
  &::symphony::proto::_RoleReconnectAck_default_instance_._instance,
  &::symphony::proto::_RemoveConnectNty_default_instance_._instance,
  &::symphony::proto::_CreateNewSceneReq_default_instance_._instance,
  &::symphony::proto::_CreateNewSceneAck_default_instance_._instance,
  &::symphony::proto::_EnterSceneReq_default_instance_._instance,
  &::symphony::proto::_EnterSceneAck_default_instance_._instance,
  &::symphony::proto::_BackToCityReq_default_instance_._instance,
  &::symphony::proto::_BackToCityAck_default_instance_._instance,
  &::symphony::proto::_LeaveSceneReq_default_instance_._instance,
  &::symphony::proto::_LeaveSceneAck_default_instance_._instance,
  &::symphony::proto::_AbortSceneReq_default_instance_._instance,
  &::symphony::proto::_AbortSceneAck_default_instance_._instance,
  &::symphony::proto::_AbortSceneNty_default_instance_._instance,
  &::symphony::proto::_TransRoleData_default_instance_._instance,
  &::symphony::proto::_TransPetData_default_instance_._instance,
  &::symphony::proto::_TransPartnerData_default_instance_._instance,
  &::symphony::proto::_TransferDataItem_default_instance_._instance,
  &::symphony::proto::_TransferDataReq_default_instance_._instance,
  &::symphony::proto::_TransferDataAck_default_instance_._instance,
  &::symphony::proto::_NotifyIntoScene_default_instance_._instance,
  &::symphony::proto::_NearByRoleItem_default_instance_._instance,
  &::symphony::proto::_CopyInsItem_default_instance_._instance,
  &::symphony::proto::_CopyReportReq_default_instance_._instance,
  &::symphony::proto::_UseHpBottleReq_default_instance_._instance,
  &::symphony::proto::_UseHpBottleAck_default_instance_._instance,
  &::symphony::proto::_UseMpBottleReq_default_instance_._instance,
  &::symphony::proto::_UseMpBottleAck_default_instance_._instance,
  &::symphony::proto::_ChatMessageReq_default_instance_._instance,
  &::symphony::proto::_ChatMessageAck_default_instance_._instance,
  &::symphony::proto::_ChatMessageNty_default_instance_._instance,
  &::symphony::proto::_CommonReq_default_instance_._instance,
  &::symphony::proto::_CommonAck_default_instance_._instance,
  &::symphony::proto::_BroadMessageNotify_default_instance_._instance,
  &::symphony::proto::_LogicRegToLoginReq_default_instance_._instance,
  &::symphony::proto::_LogicRegToLoginAck_default_instance_._instance,
  &::symphony::proto::_LogicRegToDbSvrReq_default_instance_._instance,
  &::symphony::proto::_LogicRegToDbSvrAck_default_instance_._instance,
  &::symphony::proto::_LogicUpdateInfoReq_default_instance_._instance,
  &::symphony::proto::_LogicUpdateInfoAck_default_instance_._instance,
  &::symphony::proto::_SetupEquipReq_default_instance_._instance,
  &::symphony::proto::_SetupEquipAck_default_instance_._instance,
  &::symphony::proto::_Msg_GiftCodeReq_default_instance_._instance,
  &::symphony::proto::_Msg_GiftCodeAck_default_instance_._instance,
  &::symphony::proto::_UnsetEquipReq_default_instance_._instance,
  &::symphony::proto::_UnsetEquipAck_default_instance_._instance,
  &::symphony::proto::_SetupGemReq_default_instance_._instance,
  &::symphony::proto::_SetupGemAck_default_instance_._instance,
  &::symphony::proto::_UnsetGemReq_default_instance_._instance,
  &::symphony::proto::_UnsetGemAck_default_instance_._instance,
  &::symphony::proto::_SetupPartnerReq_default_instance_._instance,
  &::symphony::proto::_SetupPartnerAck_default_instance_._instance,
  &::symphony::proto::_UnsetPartnerReq_default_instance_._instance,
  &::symphony::proto::_UnsetPartnerAck_default_instance_._instance,
  &::symphony::proto::_SetupMountReq_default_instance_._instance,
  &::symphony::proto::_SetupMountAck_default_instance_._instance,
  &::symphony::proto::_UnsetMountReq_default_instance_._instance,
  &::symphony::proto::_UnsetMountAck_default_instance_._instance,
  &::symphony::proto::_SetupPetReq_default_instance_._instance,
  &::symphony::proto::_SetupPetAck_default_instance_._instance,
  &::symphony::proto::_UnsetPetReq_default_instance_._instance,
  &::symphony::proto::_UnsetPetAck_default_instance_._instance,
  &::symphony::proto::_StoreBuyReq_default_instance_._instance,
  &::symphony::proto::_StoreBuyAck_default_instance_._instance,
  &::symphony::proto::_ObjectChangeNotify_default_instance_._instance,
  &::symphony::proto::_HitEffectItem_default_instance_._instance,
  &::symphony::proto::_HitEffectNtf_default_instance_._instance,
  &::symphony::proto::_UseItemReq_default_instance_._instance,
  &::symphony::proto::_UseItemAck_default_instance_._instance,
  &::symphony::proto::_MsgGetRandomNameReq_default_instance_._instance,
  &::symphony::proto::_MsgGetRandomNameAck_default_instance_._instance,
  &::symphony::proto::_Msg_DbErrorCountNty_default_instance_._instance,
  &::symphony::proto::_Msg_GameParamReq_default_instance_._instance,
  &::symphony::proto::_Msg_GameParamAck_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2fmsg_5fgame_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035symphony/proto/msg_game.proto\022\016symphon"
  "y.proto\032\035symphony/proto/msg_base.proto\"\037"
  "\n\017GmStopServerReq\022\014\n\004Data\030\001 \001(\r\"\"\n\017GmSto"
  "pServerAck\022\017\n\007RetCode\030\001 \001(\r\"n\n\016SvrRegToS"
  "vrReq\022\020\n\010ServerID\030\001 \001(\005\022\022\n\nServerName\030\002 "
  "\001(\t\022\020\n\010ServerIp\030\003 \001(\t\022\022\n\nServerPort\030\004 \001("
  "\005\022\020\n\010HttpPort\030\005 \001(\005\"5\n\016SvrRegToSvrAck\022\017\n"
  "\007RetCode\030\001 \001(\r\022\022\n\nNewSvrName\030\002 \001(\t\"6\n\021Ro"
  "leDisconnectReq\022\021\n\tAccountID\030\001 \001(\004\022\016\n\006Ro"
  "leID\030\002 \001(\004\"$\n\021RoleDisconnectAck\022\017\n\007RetCo"
  "de\030\001 \001(\r\"H\n\020RoleReconnectReq\022\016\n\006RoleID\030\001"
  " \001(\004\022\021\n\tAccountID\030\002 \001(\004\022\021\n\tLoginCode\030\003 \001"
  "(\r\"#\n\020RoleReconnectAck\022\017\n\007RetCode\030\001 \001(\r\""
  "\"\n\020RemoveConnectNty\022\016\n\006RoleID\030\001 \001(\004\"]\n\021C"
  "reateNewSceneReq\022\016\n\006CopyID\030\001 \001(\005\022\020\n\010Copy"
  "Type\030\002 \001(\005\022\021\n\tPlayerNum\030\003 \001(\005\022\023\n\013CreateP"
  "aram\030\004 \001(\004\"\222\001\n\021CreateNewSceneAck\022\017\n\007RetC"
  "ode\030\001 \001(\r\022\016\n\006CopyID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 "
  "\001(\005\022\023\n\013CreateParam\030\004 \001(\004\022\020\n\010ServerID\030\005 \001"
  "(\005\022\020\n\010CopyType\030\006 \001(\005\022\021\n\tPlayerNum\030\007 \001(\005\""
  "S\n\rEnterSceneReq\022\016\n\006RoleID\030\001 \001(\004\022\020\n\010Serv"
  "erID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\016\n\006CopyID\030\004"
  " \001(\005\"\321\002\n\rEnterSceneAck\022\017\n\007RetCode\030\001 \001(\r\022"
  "\016\n\006CopyID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\016\n\006Rol"
  "eID\030\004 \001(\004\022\016\n\006Carrer\030\005 \001(\005\022\017\n\007ActorID\030\006 \001"
  "(\005\022\020\n\010RoleName\030\007 \001(\t\022\014\n\004Camp\030\010 \001(\005\022\t\n\001X\030"
  "\t \001(\002\022\t\n\001Y\030\n \001(\002\022\t\n\001Z\030\013 \001(\002\022\n\n\002Ft\030\014 \001(\002\022"
  "\n\n\002Hp\030\r \001(\005\022\n\n\002Mp\030\016 \001(\005\022\r\n\005HpMax\030\017 \001(\005\022\r"
  "\n\005MpMax\030\020 \001(\005\022\r\n\005Speed\030\021 \001(\005\022\017\n\007MountID\030"
  "\022 \001(\005\022\016\n\006Equips\030\023 \003(\005\022)\n\006Skills\030\024 \003(\0132\031."
  "symphony.proto.SkillItem\"\036\n\rBackToCityRe"
  "q\022\r\n\005Param\030\001 \001(\r\" \n\rBackToCityAck\022\017\n\007Ret"
  "Code\030\001 \001(\r\"/\n\rLeaveSceneReq\022\016\n\006RoleID\030\001 "
  "\001(\004\022\016\n\006Reason\030\002 \001(\005\" \n\rLeaveSceneAck\022\017\n\007"
  "RetCode\030\001 \001(\r\"/\n\rAbortSceneReq\022\016\n\006RoleID"
  "\030\001 \001(\004\022\016\n\006Reason\030\002 \001(\005\" \n\rAbortSceneAck\022"
  "\017\n\007RetCode\030\001 \001(\r\"t\n\rAbortSceneNty\022\016\n\006Rol"
  "eID\030\001 \001(\004\022\016\n\006CopyID\030\002 \001(\005\022\020\n\010CopyGuid\030\003 "
  "\001(\005\022\020\n\010CopyType\030\004 \001(\005\022\020\n\010ServerID\030\005 \001(\005\022"
  "\r\n\005Param\030\006 \001(\005\"\315\001\n\rTransRoleData\022\016\n\006Role"
  "ID\030\001 \001(\004\022\014\n\004Name\030\002 \001(\t\022\020\n\010CarrerID\030\003 \001(\005"
  "\022\017\n\007ActorID\030\004 \001(\005\022\r\n\005Level\030\005 \001(\005\022\017\n\007Moun"
  "tID\030\006 \001(\005\022\r\n\005Robot\030\007 \001(\005\022\016\n\006Equips\030\010 \003(\005"
  "\022\021\n\tPropertys\030\t \003(\005\022)\n\006Skills\030\n \003(\0132\031.sy"
  "mphony.proto.SkillItem\"\232\001\n\014TransPetData\022"
  "\017\n\007PetGuid\030\001 \001(\004\022\r\n\005PetID\030\002 \001(\005\022\017\n\007Actor"
  "ID\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\022\r\n\005Level\030\005 \001(\005\022\021\n"
  "\tPropertys\030\006 \003(\005\022)\n\006Skills\030\007 \003(\0132\031.symph"
  "ony.proto.SkillItem\"\246\001\n\020TransPartnerData"
  "\022\023\n\013PartnerGuid\030\001 \001(\004\022\021\n\tPartnerID\030\002 \001(\005"
  "\022\017\n\007ActorID\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\022\r\n\005Level"
  "\030\005 \001(\005\022\021\n\tPropertys\030\006 \003(\005\022)\n\006Skills\030\007 \003("
  "\0132\031.symphony.proto.SkillItem\"\267\001\n\020Transfe"
  "rDataItem\022\014\n\004Camp\030\001 \001(\005\022/\n\010RoleData\030\002 \001("
  "\0132\035.symphony.proto.TransRoleData\022-\n\007PetD"
  "ata\030\003 \001(\0132\034.symphony.proto.TransPetData\022"
  "5\n\013PartnerData\030\004 \001(\0132 .symphony.proto.Tr"
  "ansPartnerData\"G\n\017TransferDataReq\0224\n\nTra"
  "nsDatas\030\001 \003(\0132 .symphony.proto.TransferD"
  "ataItem\"f\n\017TransferDataAck\022\017\n\007RetCode\030\001 "
  "\001(\r\022\016\n\006RoleID\030\002 \001(\004\022\016\n\006CopyID\030\003 \001(\005\022\020\n\010C"
  "opyGuid\030\004 \001(\005\022\020\n\010ServerID\030\005 \001(\005\"U\n\017Notif"
  "yIntoScene\022\016\n\006RoleID\030\001 \001(\004\022\016\n\006CopyID\030\002 \001"
  "(\005\022\020\n\010CopyGuid\030\003 \001(\005\022\020\n\010ServerID\030\004 \001(\005\"N"
  "\n\016NearByRoleItem\022\016\n\006RoleID\030\001 \001(\004\022\017\n\007Acto"
  "rID\030\002 \001(\005\022\r\n\005Level\030\003 \001(\005\022\014\n\004Name\030\004 \001(\t\"S"
  "\n\013CopyInsItem\022\020\n\010CopyGuid\030\001 \001(\r\022\016\n\006CopyI"
  "D\030\002 \001(\005\022\020\n\010CopyType\030\003 \001(\005\022\020\n\010ServerID\030\004 "
  "\001(\005\"P\n\rCopyReportReq\022\020\n\010ServerID\030\001 \001(\005\022-"
  "\n\010CopyList\030\002 \003(\0132\033.symphony.proto.CopyIn"
  "sItem\"\020\n\016UseHpBottleReq\"0\n\016UseHpBottleAc"
  "k\022\017\n\007RetCode\030\001 \001(\r\022\r\n\005Count\030\002 \001(\005\"\020\n\016Use"
  "MpBottleReq\"0\n\016UseMpBottleAck\022\017\n\007RetCode"
  "\030\001 \001(\r\022\r\n\005Count\030\002 \001(\005\"u\n\016ChatMessageReq\022"
  "\017\n\007SrcName\030\001 \001(\t\022\r\n\005SrcID\030\002 \001(\004\022\020\n\010Targe"
  "tID\030\003 \001(\004\022\017\n\007ChatChl\030\004 \001(\005\022\017\n\007GuildID\030\005 "
  "\001(\004\022\017\n\007Content\030\006 \001(\t\"!\n\016ChatMessageAck\022\017"
  "\n\007RetCode\030\001 \001(\r\"\232\001\n\016ChatMessageNty\022\017\n\007Sr"
  "cName\030\001 \001(\t\022\r\n\005SrcID\030\002 \001(\004\022\020\n\010SrcLevel\030\003"
  " \001(\005\022\020\n\010TargetID\030\004 \001(\004\022\017\n\007ChatChl\030\005 \001(\005\022"
  "\017\n\007GuildID\030\006 \001(\004\022\021\n\tTimeStamp\030\007 \001(\004\022\017\n\007C"
  "ontent\030\010 \001(\t\"\033\n\tCommonReq\022\016\n\006Param1\030\001 \001("
  "\r\"\034\n\tCommonAck\022\017\n\007RetCode\030\001 \001(\r\"D\n\022Broad"
  "MessageNotify\022\r\n\005MsgID\030\001 \001(\r\022\016\n\006ConnID\030\002"
  " \003(\r\022\017\n\007MsgData\030\003 \001(\014\"t\n\022LogicRegToLogin"
  "Req\022\020\n\010ServerID\030\001 \001(\005\022\022\n\nServerName\030\002 \001("
  "\t\022\022\n\nSvrInnerIp\030\003 \001(\t\022\022\n\nServerPort\030\004 \001("
  "\005\022\020\n\010HttpPort\030\005 \001(\005\"N\n\022LogicRegToLoginAc"
  "k\022\017\n\007RetCode\030\001 \001(\r\022\022\n\nNewSvrName\030\002 \001(\t\022\023"
  "\n\013SvrOpenTime\030\003 \001(\004\"M\n\022LogicRegToDbSvrRe"
  "q\022\020\n\010ServerID\030\001 \001(\005\022\022\n\nServerName\030\002 \001(\t\022"
  "\021\n\tProcessID\030\003 \001(\r\"%\n\022LogicRegToDbSvrAck"
  "\022\017\n\007RetCode\030\001 \001(\r\"\246\001\n\022LogicUpdateInfoReq"
  "\022\020\n\010ServerID\030\001 \001(\005\022\022\n\nServerName\030\002 \001(\t\022\021"
  "\n\tMaxOnline\030\003 \001(\005\022\021\n\tCurOnline\030\004 \001(\005\022\020\n\010"
  "TotalNum\030\005 \001(\005\022\020\n\010CacheNum\030\006 \001(\005\022\016\n\006Stat"
  "us\030\007 \001(\005\022\020\n\010DbErrCnt\030\010 \001(\005\":\n\022LogicUpdat"
  "eInfoAck\022\017\n\007RetCode\030\001 \001(\r\022\023\n\013SvrOpenTime"
  "\030\002 \001(\004\"3\n\rSetupEquipReq\022\021\n\tEquipGuid\030\001 \001"
  "(\004\022\017\n\007BagGuid\030\002 \001(\004\" \n\rSetupEquipAck\022\017\n\007"
  "RetCode\030\001 \001(\r\"g\n\017Msg_GiftCodeReq\022\016\n\006Role"
  "ID\030\001 \001(\004\022\020\n\010GiftCode\030\002 \001(\t\022\017\n\007Channel\030\003 "
  "\001(\r\022\021\n\tAccountID\030\004 \001(\004\022\016\n\006AreaID\030\005 \001(\005\"["
  "\n\017Msg_GiftCodeAck\022\017\n\007RetCode\030\001 \001(\r\022\016\n\006Ro"
  "leID\030\002 \001(\004\022\'\n\005items\030\003 \003(\0132\030.symphony.pro"
  "to.ItemData\"\"\n\rUnsetEquipReq\022\021\n\tEquipGui"
  "d\030\001 \001(\004\" \n\rUnsetEquipAck\022\017\n\007RetCode\030\001 \001("
  "\r\"B\n\013SetupGemReq\022\017\n\007GemGuid\030\001 \001(\004\022\017\n\007Bag"
  "Guid\030\002 \001(\004\022\021\n\tTargetPos\030\003 \001(\005\"\036\n\013SetupGe"
  "mAck\022\017\n\007RetCode\030\001 \001(\r\"\036\n\013UnsetGemReq\022\017\n\007"
  "GemGuid\030\001 \001(\004\"\036\n\013UnsetGemAck\022\017\n\007RetCode\030"
  "\001 \001(\r\"9\n\017SetupPartnerReq\022\023\n\013PartnerGuid\030"
  "\001 \001(\004\022\021\n\tTargetPos\030\002 \001(\005\"\"\n\017SetupPartner"
  "Ack\022\017\n\007RetCode\030\001 \001(\r\"$\n\017UnsetPartnerReq\022"
  "\021\n\tTargetPos\030\001 \001(\005\"\"\n\017UnsetPartnerAck\022\017\n"
  "\007RetCode\030\001 \001(\r\"5\n\rSetupMountReq\022\021\n\tMount"
  "Guid\030\001 \001(\004\022\021\n\tTargetPos\030\002 \001(\005\" \n\rSetupMo"
  "untAck\022\017\n\007RetCode\030\001 \001(\r\"\"\n\rUnsetMountReq"
  "\022\021\n\tMountGuid\030\001 \001(\004\" \n\rUnsetMountAck\022\017\n\007"
  "RetCode\030\001 \001(\r\"\036\n\013SetupPetReq\022\017\n\007PetGuid\030"
  "\001 \001(\004\"\036\n\013SetupPetAck\022\017\n\007RetCode\030\001 \001(\r\"\036\n"
  "\013UnsetPetReq\022\017\n\007PetGuid\030\001 \001(\004\"\036\n\013UnsetPe"
  "tAck\022\017\n\007RetCode\030\001 \001(\r\"A\n\013StoreBuyReq\022\021\n\t"
  "StoreType\030\001 \001(\005\022\017\n\007StoreID\030\002 \001(\005\022\016\n\006BuyN"
  "um\030\003 \001(\005\"\036\n\013StoreBuyAck\022\017\n\007RetCode\030\001 \001(\r"
  "\"p\n\022ObjectChangeNotify\022\016\n\006RoleID\030\001 \001(\003\022\022"
  "\n\nChangeType\030\002 \001(\005\022\021\n\tIntValue1\030\003 \001(\003\022\021\n"
  "\tIntValue2\030\004 \001(\003\022\020\n\010StrValue\030\005 \001(\t\"\225\001\n\rH"
  "itEffectItem\022\020\n\010CastGuid\030\001 \001(\004\022\022\n\nTarget"
  "Guid\030\002 \001(\004\022\021\n\tHurtValue\030\003 \001(\005\022\014\n\004Crit\030\004 "
  "\001(\010\022\023\n\013HitActionID\030\005 \001(\r\022\023\n\013HitEffectID\030"
  "\006 \001(\r\022\023\n\013HitDistance\030\007 \001(\002\"\?\n\014HitEffectN"
  "tf\022/\n\010ItemList\030\001 \003(\0132\035.symphony.proto.Hi"
  "tEffectItem\"\014\n\nUseItemReq\"\014\n\nUseItemAck\""
  "\"\n\023MsgGetRandomNameReq\022\013\n\003Sex\030\001 \001(\005\"#\n\023M"
  "sgGetRandomNameAck\022\014\n\004Name\030\001 \001(\t\")\n\023Msg_"
  "DbErrorCountNty\022\022\n\nErrorCount\030\001 \001(\r\"6\n\020M"
  "sg_GameParamReq\022\017\n\007Channel\030\001 \001(\005\022\021\n\tClie"
  "ntVer\030\002 \001(\t\"8\n\020Msg_GameParamAck\022\020\n\010Param"
  "Key\030\001 \003(\t\022\022\n\nParamValue\030\002 \003(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_deps[1] = {
  &::descriptor_table_symphony_2fproto_2fmsg_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto = {
    false, false, 5597, descriptor_table_protodef_symphony_2fproto_2fmsg_5fgame_2eproto,
    "symphony/proto/msg_game.proto",
    &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once, descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_deps, 1, 80,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2fmsg_5fgame_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto, file_level_enum_descriptors_symphony_2fproto_2fmsg_5fgame_2eproto,
    file_level_service_descriptors_symphony_2fproto_2fmsg_5fgame_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2fmsg_5fgame_2eproto(&descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class GmStopServerReq::_Internal {
 public:
};

GmStopServerReq::GmStopServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.GmStopServerReq)
}
GmStopServerReq::GmStopServerReq(const GmStopServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GmStopServerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_ = from._impl_.data_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.GmStopServerReq)
}

inline void GmStopServerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GmStopServerReq::~GmStopServerReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.GmStopServerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GmStopServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GmStopServerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GmStopServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.GmStopServerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmStopServerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GmStopServerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.GmStopServerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Data = 1;
  if (this->_internal_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.GmStopServerReq)
  return target;
}

size_t GmStopServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.GmStopServerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Data = 1;
  if (this->_internal_data() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GmStopServerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GmStopServerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GmStopServerReq::GetClassData() const { return &_class_data_; }


void GmStopServerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GmStopServerReq*>(&to_msg);
  auto& from = static_cast<const GmStopServerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.GmStopServerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_data() != 0) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GmStopServerReq::CopyFrom(const GmStopServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.GmStopServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmStopServerReq::IsInitialized() const {
  return true;
}

void GmStopServerReq::InternalSwap(GmStopServerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GmStopServerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[0]);
}

// ===================================================================

class GmStopServerAck::_Internal {
 public:
};

GmStopServerAck::GmStopServerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.GmStopServerAck)
}
GmStopServerAck::GmStopServerAck(const GmStopServerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GmStopServerAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.GmStopServerAck)
}

inline void GmStopServerAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GmStopServerAck::~GmStopServerAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.GmStopServerAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GmStopServerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GmStopServerAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GmStopServerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.GmStopServerAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GmStopServerAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GmStopServerAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.GmStopServerAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.GmStopServerAck)
  return target;
}

size_t GmStopServerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.GmStopServerAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GmStopServerAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GmStopServerAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GmStopServerAck::GetClassData() const { return &_class_data_; }


void GmStopServerAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GmStopServerAck*>(&to_msg);
  auto& from = static_cast<const GmStopServerAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.GmStopServerAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GmStopServerAck::CopyFrom(const GmStopServerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.GmStopServerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GmStopServerAck::IsInitialized() const {
  return true;
}

void GmStopServerAck::InternalSwap(GmStopServerAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GmStopServerAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[1]);
}

// ===================================================================

class SvrRegToSvrReq::_Internal {
 public:
};

SvrRegToSvrReq::SvrRegToSvrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SvrRegToSvrReq)
}
SvrRegToSvrReq::SvrRegToSvrReq(const SvrRegToSvrReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SvrRegToSvrReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverip_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.serverport_){}
    , decltype(_impl_.httpport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverip().empty()) {
    _this->_impl_.serverip_.Set(from._internal_serverip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.httpport_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.httpport_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SvrRegToSvrReq)
}

inline void SvrRegToSvrReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverip_){}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.serverport_){0}
    , decltype(_impl_.httpport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SvrRegToSvrReq::~SvrRegToSvrReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SvrRegToSvrReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SvrRegToSvrReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
  _impl_.serverip_.Destroy();
}

void SvrRegToSvrReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SvrRegToSvrReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SvrRegToSvrReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  _impl_.serverip_.ClearToEmpty();
  ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.httpport_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.httpport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrRegToSvrReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.SvrRegToSvrReq.ServerName"));
        } else
          goto handle_unusual;
        continue;
      // string ServerIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serverip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.SvrRegToSvrReq.ServerIp"));
        } else
          goto handle_unusual;
        continue;
      // int32 ServerPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HttpPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.httpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SvrRegToSvrReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SvrRegToSvrReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.SvrRegToSvrReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // string ServerIp = 3;
  if (!this->_internal_serverip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverip().data(), static_cast<int>(this->_internal_serverip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.SvrRegToSvrReq.ServerIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serverip(), target);
  }

  // int32 ServerPort = 4;
  if (this->_internal_serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverport(), target);
  }

  // int32 HttpPort = 5;
  if (this->_internal_httpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_httpport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SvrRegToSvrReq)
  return target;
}

size_t SvrRegToSvrReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SvrRegToSvrReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // string ServerIp = 3;
  if (!this->_internal_serverip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverip());
  }

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 ServerPort = 4;
  if (this->_internal_serverport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverport());
  }

  // int32 HttpPort = 5;
  if (this->_internal_httpport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_httpport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SvrRegToSvrReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SvrRegToSvrReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SvrRegToSvrReq::GetClassData() const { return &_class_data_; }


void SvrRegToSvrReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SvrRegToSvrReq*>(&to_msg);
  auto& from = static_cast<const SvrRegToSvrReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SvrRegToSvrReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (!from._internal_serverip().empty()) {
    _this->_internal_set_serverip(from._internal_serverip());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_serverport() != 0) {
    _this->_internal_set_serverport(from._internal_serverport());
  }
  if (from._internal_httpport() != 0) {
    _this->_internal_set_httpport(from._internal_httpport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SvrRegToSvrReq::CopyFrom(const SvrRegToSvrReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SvrRegToSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegToSvrReq::IsInitialized() const {
  return true;
}

void SvrRegToSvrReq::InternalSwap(SvrRegToSvrReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverip_, lhs_arena,
      &other->_impl_.serverip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SvrRegToSvrReq, _impl_.httpport_)
      + sizeof(SvrRegToSvrReq::_impl_.httpport_)
      - PROTOBUF_FIELD_OFFSET(SvrRegToSvrReq, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrRegToSvrReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[2]);
}

// ===================================================================

class SvrRegToSvrAck::_Internal {
 public:
};

SvrRegToSvrAck::SvrRegToSvrAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SvrRegToSvrAck)
}
SvrRegToSvrAck::SvrRegToSvrAck(const SvrRegToSvrAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SvrRegToSvrAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newsvrname_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newsvrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newsvrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newsvrname().empty()) {
    _this->_impl_.newsvrname_.Set(from._internal_newsvrname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SvrRegToSvrAck)
}

inline void SvrRegToSvrAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newsvrname_){}
    , decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newsvrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newsvrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SvrRegToSvrAck::~SvrRegToSvrAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SvrRegToSvrAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SvrRegToSvrAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newsvrname_.Destroy();
}

void SvrRegToSvrAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SvrRegToSvrAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SvrRegToSvrAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newsvrname_.ClearToEmpty();
  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrRegToSvrAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string NewSvrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newsvrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.SvrRegToSvrAck.NewSvrName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SvrRegToSvrAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SvrRegToSvrAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string NewSvrName = 2;
  if (!this->_internal_newsvrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newsvrname().data(), static_cast<int>(this->_internal_newsvrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.SvrRegToSvrAck.NewSvrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newsvrname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SvrRegToSvrAck)
  return target;
}

size_t SvrRegToSvrAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SvrRegToSvrAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NewSvrName = 2;
  if (!this->_internal_newsvrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newsvrname());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SvrRegToSvrAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SvrRegToSvrAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SvrRegToSvrAck::GetClassData() const { return &_class_data_; }


void SvrRegToSvrAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SvrRegToSvrAck*>(&to_msg);
  auto& from = static_cast<const SvrRegToSvrAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SvrRegToSvrAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newsvrname().empty()) {
    _this->_internal_set_newsvrname(from._internal_newsvrname());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SvrRegToSvrAck::CopyFrom(const SvrRegToSvrAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SvrRegToSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrRegToSvrAck::IsInitialized() const {
  return true;
}

void SvrRegToSvrAck::InternalSwap(SvrRegToSvrAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newsvrname_, lhs_arena,
      &other->_impl_.newsvrname_, rhs_arena
  );
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrRegToSvrAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[3]);
}

// ===================================================================

class RoleDisconnectReq::_Internal {
 public:
};

RoleDisconnectReq::RoleDisconnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleDisconnectReq)
}
RoleDisconnectReq::RoleDisconnectReq(const RoleDisconnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDisconnectReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){}
    , decltype(_impl_.roleid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roleid_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.roleid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleDisconnectReq)
}

inline void RoleDisconnectReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDisconnectReq::~RoleDisconnectReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleDisconnectReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDisconnectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDisconnectReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDisconnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleDisconnectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roleid_) -
      reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.roleid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDisconnectReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 AccountID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDisconnectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleDisconnectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_accountid(), target);
  }

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleDisconnectReq)
  return target;
}

size_t RoleDisconnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleDisconnectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 AccountID = 1;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDisconnectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDisconnectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDisconnectReq::GetClassData() const { return &_class_data_; }


void RoleDisconnectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDisconnectReq*>(&to_msg);
  auto& from = static_cast<const RoleDisconnectReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleDisconnectReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDisconnectReq::CopyFrom(const RoleDisconnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleDisconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDisconnectReq::IsInitialized() const {
  return true;
}

void RoleDisconnectReq::InternalSwap(RoleDisconnectReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleDisconnectReq, _impl_.roleid_)
      + sizeof(RoleDisconnectReq::_impl_.roleid_)
      - PROTOBUF_FIELD_OFFSET(RoleDisconnectReq, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDisconnectReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[4]);
}

// ===================================================================

class RoleDisconnectAck::_Internal {
 public:
};

RoleDisconnectAck::RoleDisconnectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleDisconnectAck)
}
RoleDisconnectAck::RoleDisconnectAck(const RoleDisconnectAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleDisconnectAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleDisconnectAck)
}

inline void RoleDisconnectAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleDisconnectAck::~RoleDisconnectAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleDisconnectAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleDisconnectAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleDisconnectAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleDisconnectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleDisconnectAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleDisconnectAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleDisconnectAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleDisconnectAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleDisconnectAck)
  return target;
}

size_t RoleDisconnectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleDisconnectAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleDisconnectAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleDisconnectAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleDisconnectAck::GetClassData() const { return &_class_data_; }


void RoleDisconnectAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleDisconnectAck*>(&to_msg);
  auto& from = static_cast<const RoleDisconnectAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleDisconnectAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleDisconnectAck::CopyFrom(const RoleDisconnectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleDisconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDisconnectAck::IsInitialized() const {
  return true;
}

void RoleDisconnectAck::InternalSwap(RoleDisconnectAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleDisconnectAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[5]);
}

// ===================================================================

class RoleReconnectReq::_Internal {
 public:
};

RoleReconnectReq::RoleReconnectReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleReconnectReq)
}
RoleReconnectReq::RoleReconnectReq(const RoleReconnectReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleReconnectReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.logincode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.logincode_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.logincode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleReconnectReq)
}

inline void RoleReconnectReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.logincode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleReconnectReq::~RoleReconnectReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleReconnectReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleReconnectReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleReconnectReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleReconnectReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleReconnectReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.logincode_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.logincode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleReconnectReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 AccountID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 LoginCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.logincode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleReconnectReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleReconnectReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // uint64 AccountID = 2;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_accountid(), target);
  }

  // uint32 LoginCode = 3;
  if (this->_internal_logincode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_logincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleReconnectReq)
  return target;
}

size_t RoleReconnectReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleReconnectReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint64 AccountID = 2;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  // uint32 LoginCode = 3;
  if (this->_internal_logincode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_logincode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleReconnectReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleReconnectReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleReconnectReq::GetClassData() const { return &_class_data_; }


void RoleReconnectReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleReconnectReq*>(&to_msg);
  auto& from = static_cast<const RoleReconnectReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleReconnectReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  if (from._internal_logincode() != 0) {
    _this->_internal_set_logincode(from._internal_logincode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleReconnectReq::CopyFrom(const RoleReconnectReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleReconnectReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReconnectReq::IsInitialized() const {
  return true;
}

void RoleReconnectReq::InternalSwap(RoleReconnectReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleReconnectReq, _impl_.logincode_)
      + sizeof(RoleReconnectReq::_impl_.logincode_)
      - PROTOBUF_FIELD_OFFSET(RoleReconnectReq, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleReconnectReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[6]);
}

// ===================================================================

class RoleReconnectAck::_Internal {
 public:
};

RoleReconnectAck::RoleReconnectAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleReconnectAck)
}
RoleReconnectAck::RoleReconnectAck(const RoleReconnectAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleReconnectAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleReconnectAck)
}

inline void RoleReconnectAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoleReconnectAck::~RoleReconnectAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleReconnectAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleReconnectAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoleReconnectAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleReconnectAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleReconnectAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleReconnectAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleReconnectAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleReconnectAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleReconnectAck)
  return target;
}

size_t RoleReconnectAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleReconnectAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleReconnectAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleReconnectAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleReconnectAck::GetClassData() const { return &_class_data_; }


void RoleReconnectAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleReconnectAck*>(&to_msg);
  auto& from = static_cast<const RoleReconnectAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleReconnectAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleReconnectAck::CopyFrom(const RoleReconnectAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleReconnectAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReconnectAck::IsInitialized() const {
  return true;
}

void RoleReconnectAck::InternalSwap(RoleReconnectAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleReconnectAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[7]);
}

// ===================================================================

class RemoveConnectNty::_Internal {
 public:
};

RemoveConnectNty::RemoveConnectNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RemoveConnectNty)
}
RemoveConnectNty::RemoveConnectNty(const RemoveConnectNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveConnectNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roleid_ = from._impl_.roleid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RemoveConnectNty)
}

inline void RemoveConnectNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoveConnectNty::~RemoveConnectNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.RemoveConnectNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveConnectNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveConnectNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveConnectNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RemoveConnectNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roleid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveConnectNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveConnectNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RemoveConnectNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RemoveConnectNty)
  return target;
}

size_t RemoveConnectNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RemoveConnectNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveConnectNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveConnectNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveConnectNty::GetClassData() const { return &_class_data_; }


void RemoveConnectNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveConnectNty*>(&to_msg);
  auto& from = static_cast<const RemoveConnectNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RemoveConnectNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveConnectNty::CopyFrom(const RemoveConnectNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RemoveConnectNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveConnectNty::IsInitialized() const {
  return true;
}

void RemoveConnectNty::InternalSwap(RemoveConnectNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roleid_, other->_impl_.roleid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveConnectNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[8]);
}

// ===================================================================

class CreateNewSceneReq::_Internal {
 public:
};

CreateNewSceneReq::CreateNewSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CreateNewSceneReq)
}
CreateNewSceneReq::CreateNewSceneReq(const CreateNewSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNewSceneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.copyid_){}
    , decltype(_impl_.copytype_){}
    , decltype(_impl_.createparam_){}
    , decltype(_impl_.playernum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.copyid_, &from._impl_.copyid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playernum_) -
    reinterpret_cast<char*>(&_impl_.copyid_)) + sizeof(_impl_.playernum_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CreateNewSceneReq)
}

inline void CreateNewSceneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.copyid_){0}
    , decltype(_impl_.copytype_){0}
    , decltype(_impl_.createparam_){uint64_t{0u}}
    , decltype(_impl_.playernum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateNewSceneReq::~CreateNewSceneReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.CreateNewSceneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNewSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateNewSceneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNewSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CreateNewSceneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.copyid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playernum_) -
      reinterpret_cast<char*>(&_impl_.copyid_)) + sizeof(_impl_.playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewSceneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 CopyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 CreateParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.createparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNewSceneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CreateNewSceneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 CopyID = 1;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_copyid(), target);
  }

  // int32 CopyType = 2;
  if (this->_internal_copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copytype(), target);
  }

  // int32 PlayerNum = 3;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_playernum(), target);
  }

  // uint64 CreateParam = 4;
  if (this->_internal_createparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_createparam(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CreateNewSceneReq)
  return target;
}

size_t CreateNewSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CreateNewSceneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 CopyID = 1;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // int32 CopyType = 2;
  if (this->_internal_copytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copytype());
  }

  // uint64 CreateParam = 4;
  if (this->_internal_createparam() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_createparam());
  }

  // int32 PlayerNum = 3;
  if (this->_internal_playernum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNewSceneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNewSceneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNewSceneReq::GetClassData() const { return &_class_data_; }


void CreateNewSceneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNewSceneReq*>(&to_msg);
  auto& from = static_cast<const CreateNewSceneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CreateNewSceneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_copytype() != 0) {
    _this->_internal_set_copytype(from._internal_copytype());
  }
  if (from._internal_createparam() != 0) {
    _this->_internal_set_createparam(from._internal_createparam());
  }
  if (from._internal_playernum() != 0) {
    _this->_internal_set_playernum(from._internal_playernum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNewSceneReq::CopyFrom(const CreateNewSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CreateNewSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSceneReq::IsInitialized() const {
  return true;
}

void CreateNewSceneReq::InternalSwap(CreateNewSceneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNewSceneReq, _impl_.playernum_)
      + sizeof(CreateNewSceneReq::_impl_.playernum_)
      - PROTOBUF_FIELD_OFFSET(CreateNewSceneReq, _impl_.copyid_)>(
          reinterpret_cast<char*>(&_impl_.copyid_),
          reinterpret_cast<char*>(&other->_impl_.copyid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewSceneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[9]);
}

// ===================================================================

class CreateNewSceneAck::_Internal {
 public:
};

CreateNewSceneAck::CreateNewSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CreateNewSceneAck)
}
CreateNewSceneAck::CreateNewSceneAck(const CreateNewSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateNewSceneAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.createparam_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.copytype_){}
    , decltype(_impl_.playernum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.retcode_, &from._impl_.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playernum_) -
    reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.playernum_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CreateNewSceneAck)
}

inline void CreateNewSceneAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.createparam_){uint64_t{0u}}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.copytype_){0}
    , decltype(_impl_.playernum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateNewSceneAck::~CreateNewSceneAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.CreateNewSceneAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateNewSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateNewSceneAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateNewSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CreateNewSceneAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playernum_) -
      reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.playernum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateNewSceneAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 CreateParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.createparam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PlayerNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.playernum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateNewSceneAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CreateNewSceneAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // uint64 CreateParam = 4;
  if (this->_internal_createparam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_createparam(), target);
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  // int32 CopyType = 6;
  if (this->_internal_copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_copytype(), target);
  }

  // int32 PlayerNum = 7;
  if (this->_internal_playernum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_playernum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CreateNewSceneAck)
  return target;
}

size_t CreateNewSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CreateNewSceneAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // uint64 CreateParam = 4;
  if (this->_internal_createparam() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_createparam());
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 CopyType = 6;
  if (this->_internal_copytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copytype());
  }

  // int32 PlayerNum = 7;
  if (this->_internal_playernum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playernum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateNewSceneAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateNewSceneAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateNewSceneAck::GetClassData() const { return &_class_data_; }


void CreateNewSceneAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateNewSceneAck*>(&to_msg);
  auto& from = static_cast<const CreateNewSceneAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CreateNewSceneAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_createparam() != 0) {
    _this->_internal_set_createparam(from._internal_createparam());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_copytype() != 0) {
    _this->_internal_set_copytype(from._internal_copytype());
  }
  if (from._internal_playernum() != 0) {
    _this->_internal_set_playernum(from._internal_playernum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateNewSceneAck::CopyFrom(const CreateNewSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CreateNewSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateNewSceneAck::IsInitialized() const {
  return true;
}

void CreateNewSceneAck::InternalSwap(CreateNewSceneAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateNewSceneAck, _impl_.playernum_)
      + sizeof(CreateNewSceneAck::_impl_.playernum_)
      - PROTOBUF_FIELD_OFFSET(CreateNewSceneAck, _impl_.retcode_)>(
          reinterpret_cast<char*>(&_impl_.retcode_),
          reinterpret_cast<char*>(&other->_impl_.retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateNewSceneAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[10]);
}

// ===================================================================

class EnterSceneReq::_Internal {
 public:
};

EnterSceneReq::EnterSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.EnterSceneReq)
}
EnterSceneReq::EnterSceneReq(const EnterSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterSceneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.copyid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.copyid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.copyid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.EnterSceneReq)
}

inline void EnterSceneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.copyid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnterSceneReq::~EnterSceneReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.EnterSceneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnterSceneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.EnterSceneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.copyid_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.copyid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterSceneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterSceneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.EnterSceneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ServerID = 2;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_serverid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 CopyID = 4;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_copyid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.EnterSceneReq)
  return target;
}

size_t EnterSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.EnterSceneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 ServerID = 2;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 CopyID = 4;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterSceneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterSceneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterSceneReq::GetClassData() const { return &_class_data_; }


void EnterSceneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterSceneReq*>(&to_msg);
  auto& from = static_cast<const EnterSceneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.EnterSceneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterSceneReq::CopyFrom(const EnterSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.EnterSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneReq::IsInitialized() const {
  return true;
}

void EnterSceneReq::InternalSwap(EnterSceneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterSceneReq, _impl_.copyid_)
      + sizeof(EnterSceneReq::_impl_.copyid_)
      - PROTOBUF_FIELD_OFFSET(EnterSceneReq, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterSceneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[11]);
}

// ===================================================================

class EnterSceneAck::_Internal {
 public:
};

void EnterSceneAck::clear_skills() {
  _impl_.skills_.Clear();
}
EnterSceneAck::EnterSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.EnterSceneAck)
}
EnterSceneAck::EnterSceneAck(const EnterSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnterSceneAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.retcode_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.carrer_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.camp_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.ft_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.mp_){}
    , decltype(_impl_.hpmax_){}
    , decltype(_impl_.mpmax_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.mountid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rolename().empty()) {
    _this->_impl_.rolename_.Set(from._internal_rolename(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.retcode_, &from._impl_.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mountid_) -
    reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.mountid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.EnterSceneAck)
}

inline void EnterSceneAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.retcode_){0u}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.carrer_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.camp_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.ft_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.mp_){0}
    , decltype(_impl_.hpmax_){0}
    , decltype(_impl_.mpmax_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.mountid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnterSceneAck::~EnterSceneAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.EnterSceneAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnterSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.rolename_.Destroy();
}

void EnterSceneAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnterSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.EnterSceneAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.skills_.Clear();
  _impl_.rolename_.ClearToEmpty();
  ::memset(&_impl_.retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mountid_) -
      reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.mountid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnterSceneAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoleID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Carrer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.carrer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string RoleName = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.EnterSceneAck.RoleName"));
        } else
          goto handle_unusual;
        continue;
      // int32 Camp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float X = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Ft = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.ft_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Hp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Mp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HpMax = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.hpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MpMax = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.mpmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MountID = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Equips = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 152) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.SkillItem Skills = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnterSceneAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.EnterSceneAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // uint64 RoleID = 4;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_roleid(), target);
  }

  // int32 Carrer = 5;
  if (this->_internal_carrer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_carrer(), target);
  }

  // int32 ActorID = 6;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_actorid(), target);
  }

  // string RoleName = 7;
  if (!this->_internal_rolename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.EnterSceneAck.RoleName");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rolename(), target);
  }

  // int32 Camp = 8;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_camp(), target);
  }

  // float X = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_x(), target);
  }

  // float Y = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_y(), target);
  }

  // float Z = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_z(), target);
  }

  // float Ft = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = this->_internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_ft(), target);
  }

  // int32 Hp = 13;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_hp(), target);
  }

  // int32 Mp = 14;
  if (this->_internal_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_mp(), target);
  }

  // int32 HpMax = 15;
  if (this->_internal_hpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_hpmax(), target);
  }

  // int32 MpMax = 16;
  if (this->_internal_mpmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_mpmax(), target);
  }

  // int32 Speed = 17;
  if (this->_internal_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_speed(), target);
  }

  // int32 MountID = 18;
  if (this->_internal_mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_mountid(), target);
  }

  // repeated int32 Equips = 19;
  {
    int byte_size = _impl_._equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          19, _internal_equips(), byte_size, target);
    }
  }

  // repeated .symphony.proto.SkillItem Skills = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.EnterSceneAck)
  return target;
}

size_t EnterSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.EnterSceneAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 19;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equips_);
    if (data_size > 0) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .symphony.proto.SkillItem Skills = 20;
  total_size += 2UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string RoleName = 7;
  if (!this->_internal_rolename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rolename());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // uint64 RoleID = 4;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 Carrer = 5;
  if (this->_internal_carrer() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrer());
  }

  // int32 ActorID = 6;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 Camp = 8;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp());
  }

  // float X = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float Ft = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = this->_internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    total_size += 1 + 4;
  }

  // int32 Hp = 13;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 Mp = 14;
  if (this->_internal_mp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mp());
  }

  // int32 HpMax = 15;
  if (this->_internal_hpmax() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hpmax());
  }

  // int32 MpMax = 16;
  if (this->_internal_mpmax() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mpmax());
  }

  // int32 Speed = 17;
  if (this->_internal_speed() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_speed());
  }

  // int32 MountID = 18;
  if (this->_internal_mountid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mountid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnterSceneAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnterSceneAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnterSceneAck::GetClassData() const { return &_class_data_; }


void EnterSceneAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnterSceneAck*>(&to_msg);
  auto& from = static_cast<const EnterSceneAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.EnterSceneAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_rolename().empty()) {
    _this->_internal_set_rolename(from._internal_rolename());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_carrer() != 0) {
    _this->_internal_set_carrer(from._internal_carrer());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_ft = from._internal_ft();
  uint32_t raw_ft;
  memcpy(&raw_ft, &tmp_ft, sizeof(tmp_ft));
  if (raw_ft != 0) {
    _this->_internal_set_ft(from._internal_ft());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_mp() != 0) {
    _this->_internal_set_mp(from._internal_mp());
  }
  if (from._internal_hpmax() != 0) {
    _this->_internal_set_hpmax(from._internal_hpmax());
  }
  if (from._internal_mpmax() != 0) {
    _this->_internal_set_mpmax(from._internal_mpmax());
  }
  if (from._internal_speed() != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  if (from._internal_mountid() != 0) {
    _this->_internal_set_mountid(from._internal_mountid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnterSceneAck::CopyFrom(const EnterSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.EnterSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneAck::IsInitialized() const {
  return true;
}

void EnterSceneAck::InternalSwap(EnterSceneAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rolename_, lhs_arena,
      &other->_impl_.rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnterSceneAck, _impl_.mountid_)
      + sizeof(EnterSceneAck::_impl_.mountid_)
      - PROTOBUF_FIELD_OFFSET(EnterSceneAck, _impl_.retcode_)>(
          reinterpret_cast<char*>(&_impl_.retcode_),
          reinterpret_cast<char*>(&other->_impl_.retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnterSceneAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[12]);
}

// ===================================================================

class BackToCityReq::_Internal {
 public:
};

BackToCityReq::BackToCityReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.BackToCityReq)
}
BackToCityReq::BackToCityReq(const BackToCityReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackToCityReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param_ = from._impl_.param_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.BackToCityReq)
}

inline void BackToCityReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BackToCityReq::~BackToCityReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.BackToCityReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackToCityReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackToCityReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackToCityReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.BackToCityReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackToCityReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Param = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackToCityReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.BackToCityReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Param = 1;
  if (this->_internal_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.BackToCityReq)
  return target;
}

size_t BackToCityReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.BackToCityReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Param = 1;
  if (this->_internal_param() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackToCityReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackToCityReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackToCityReq::GetClassData() const { return &_class_data_; }


void BackToCityReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackToCityReq*>(&to_msg);
  auto& from = static_cast<const BackToCityReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.BackToCityReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_param() != 0) {
    _this->_internal_set_param(from._internal_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackToCityReq::CopyFrom(const BackToCityReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.BackToCityReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackToCityReq::IsInitialized() const {
  return true;
}

void BackToCityReq::InternalSwap(BackToCityReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.param_, other->_impl_.param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackToCityReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[13]);
}

// ===================================================================

class BackToCityAck::_Internal {
 public:
};

BackToCityAck::BackToCityAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.BackToCityAck)
}
BackToCityAck::BackToCityAck(const BackToCityAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BackToCityAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.BackToCityAck)
}

inline void BackToCityAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BackToCityAck::~BackToCityAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.BackToCityAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackToCityAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackToCityAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BackToCityAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.BackToCityAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackToCityAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackToCityAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.BackToCityAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.BackToCityAck)
  return target;
}

size_t BackToCityAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.BackToCityAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackToCityAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BackToCityAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackToCityAck::GetClassData() const { return &_class_data_; }


void BackToCityAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BackToCityAck*>(&to_msg);
  auto& from = static_cast<const BackToCityAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.BackToCityAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackToCityAck::CopyFrom(const BackToCityAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.BackToCityAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackToCityAck::IsInitialized() const {
  return true;
}

void BackToCityAck::InternalSwap(BackToCityAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BackToCityAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[14]);
}

// ===================================================================

class LeaveSceneReq::_Internal {
 public:
};

LeaveSceneReq::LeaveSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LeaveSceneReq)
}
LeaveSceneReq::LeaveSceneReq(const LeaveSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveSceneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LeaveSceneReq)
}

inline void LeaveSceneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveSceneReq::~LeaveSceneReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.LeaveSceneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveSceneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LeaveSceneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveSceneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveSceneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LeaveSceneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 Reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LeaveSceneReq)
  return target;
}

size_t LeaveSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LeaveSceneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 Reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveSceneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveSceneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveSceneReq::GetClassData() const { return &_class_data_; }


void LeaveSceneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveSceneReq*>(&to_msg);
  auto& from = static_cast<const LeaveSceneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LeaveSceneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveSceneReq::CopyFrom(const LeaveSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LeaveSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneReq::IsInitialized() const {
  return true;
}

void LeaveSceneReq::InternalSwap(LeaveSceneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveSceneReq, _impl_.reason_)
      + sizeof(LeaveSceneReq::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(LeaveSceneReq, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveSceneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[15]);
}

// ===================================================================

class LeaveSceneAck::_Internal {
 public:
};

LeaveSceneAck::LeaveSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LeaveSceneAck)
}
LeaveSceneAck::LeaveSceneAck(const LeaveSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveSceneAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LeaveSceneAck)
}

inline void LeaveSceneAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveSceneAck::~LeaveSceneAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.LeaveSceneAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveSceneAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LeaveSceneAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveSceneAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveSceneAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LeaveSceneAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LeaveSceneAck)
  return target;
}

size_t LeaveSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LeaveSceneAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveSceneAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveSceneAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveSceneAck::GetClassData() const { return &_class_data_; }


void LeaveSceneAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveSceneAck*>(&to_msg);
  auto& from = static_cast<const LeaveSceneAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LeaveSceneAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveSceneAck::CopyFrom(const LeaveSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LeaveSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneAck::IsInitialized() const {
  return true;
}

void LeaveSceneAck::InternalSwap(LeaveSceneAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveSceneAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[16]);
}

// ===================================================================

class AbortSceneReq::_Internal {
 public:
};

AbortSceneReq::AbortSceneReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.AbortSceneReq)
}
AbortSceneReq::AbortSceneReq(const AbortSceneReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbortSceneReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.reason_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reason_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.reason_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.AbortSceneReq)
}

inline void AbortSceneReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.reason_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbortSceneReq::~AbortSceneReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.AbortSceneReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbortSceneReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbortSceneReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbortSceneReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.AbortSceneReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reason_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.reason_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbortSceneReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.AbortSceneReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 Reason = 2;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.AbortSceneReq)
  return target;
}

size_t AbortSceneReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.AbortSceneReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 Reason = 2;
  if (this->_internal_reason() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbortSceneReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbortSceneReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbortSceneReq::GetClassData() const { return &_class_data_; }


void AbortSceneReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbortSceneReq*>(&to_msg);
  auto& from = static_cast<const AbortSceneReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.AbortSceneReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbortSceneReq::CopyFrom(const AbortSceneReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.AbortSceneReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneReq::IsInitialized() const {
  return true;
}

void AbortSceneReq::InternalSwap(AbortSceneReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbortSceneReq, _impl_.reason_)
      + sizeof(AbortSceneReq::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(AbortSceneReq, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[17]);
}

// ===================================================================

class AbortSceneAck::_Internal {
 public:
};

AbortSceneAck::AbortSceneAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.AbortSceneAck)
}
AbortSceneAck::AbortSceneAck(const AbortSceneAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbortSceneAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.AbortSceneAck)
}

inline void AbortSceneAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbortSceneAck::~AbortSceneAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.AbortSceneAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbortSceneAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbortSceneAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbortSceneAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.AbortSceneAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbortSceneAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.AbortSceneAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.AbortSceneAck)
  return target;
}

size_t AbortSceneAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.AbortSceneAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbortSceneAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbortSceneAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbortSceneAck::GetClassData() const { return &_class_data_; }


void AbortSceneAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbortSceneAck*>(&to_msg);
  auto& from = static_cast<const AbortSceneAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.AbortSceneAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbortSceneAck::CopyFrom(const AbortSceneAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.AbortSceneAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneAck::IsInitialized() const {
  return true;
}

void AbortSceneAck::InternalSwap(AbortSceneAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[18]);
}

// ===================================================================

class AbortSceneNty::_Internal {
 public:
};

AbortSceneNty::AbortSceneNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.AbortSceneNty)
}
AbortSceneNty::AbortSceneNty(const AbortSceneNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AbortSceneNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.copytype_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.param_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.param_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.param_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.AbortSceneNty)
}

inline void AbortSceneNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.copytype_){0}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.param_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AbortSceneNty::~AbortSceneNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.AbortSceneNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AbortSceneNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AbortSceneNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AbortSceneNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.AbortSceneNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.param_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.param_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AbortSceneNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AbortSceneNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.AbortSceneNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 CopyType = 4;
  if (this->_internal_copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_copytype(), target);
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  // int32 Param = 6;
  if (this->_internal_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.AbortSceneNty)
  return target;
}

size_t AbortSceneNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.AbortSceneNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 CopyType = 4;
  if (this->_internal_copytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copytype());
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 Param = 6;
  if (this->_internal_param() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_param());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AbortSceneNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AbortSceneNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AbortSceneNty::GetClassData() const { return &_class_data_; }


void AbortSceneNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AbortSceneNty*>(&to_msg);
  auto& from = static_cast<const AbortSceneNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.AbortSceneNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_copytype() != 0) {
    _this->_internal_set_copytype(from._internal_copytype());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_param() != 0) {
    _this->_internal_set_param(from._internal_param());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AbortSceneNty::CopyFrom(const AbortSceneNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.AbortSceneNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbortSceneNty::IsInitialized() const {
  return true;
}

void AbortSceneNty::InternalSwap(AbortSceneNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AbortSceneNty, _impl_.param_)
      + sizeof(AbortSceneNty::_impl_.param_)
      - PROTOBUF_FIELD_OFFSET(AbortSceneNty, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AbortSceneNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[19]);
}

// ===================================================================

class TransRoleData::_Internal {
 public:
};

void TransRoleData::clear_skills() {
  _impl_.skills_.Clear();
}
TransRoleData::TransRoleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransRoleData)
}
TransRoleData::TransRoleData(const TransRoleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransRoleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){from._impl_.equips_}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.propertys_){from._impl_.propertys_}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.carrerid_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.mountid_){}
    , decltype(_impl_.robot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.robot_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.robot_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransRoleData)
}

inline void TransRoleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equips_){arena}
    , /*decltype(_impl_._equips_cached_byte_size_)*/{0}
    , decltype(_impl_.propertys_){arena}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.carrerid_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.mountid_){0}
    , decltype(_impl_.robot_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransRoleData::~TransRoleData() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransRoleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransRoleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.equips_.~RepeatedField();
  _impl_.propertys_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TransRoleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransRoleData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransRoleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equips_.Clear();
  _impl_.propertys_.Clear();
  _impl_.skills_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.robot_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.robot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransRoleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.TransRoleData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 CarrerID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.carrerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 MountID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.mountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Robot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.robot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Equips = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_equips(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_equips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Propertys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.SkillItem Skills = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransRoleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransRoleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.TransRoleData.Name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 CarrerID = 3;
  if (this->_internal_carrerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_carrerid(), target);
  }

  // int32 ActorID = 4;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_actorid(), target);
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // int32 MountID = 6;
  if (this->_internal_mountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_mountid(), target);
  }

  // int32 Robot = 7;
  if (this->_internal_robot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_robot(), target);
  }

  // repeated int32 Equips = 8;
  {
    int byte_size = _impl_._equips_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_equips(), byte_size, target);
    }
  }

  // repeated int32 Propertys = 9;
  {
    int byte_size = _impl_._propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .symphony.proto.SkillItem Skills = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransRoleData)
  return target;
}

size_t TransRoleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransRoleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Equips = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.equips_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._equips_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 Propertys = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .symphony.proto.SkillItem Skills = 10;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 CarrerID = 3;
  if (this->_internal_carrerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_carrerid());
  }

  // int32 ActorID = 4;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 MountID = 6;
  if (this->_internal_mountid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mountid());
  }

  // int32 Robot = 7;
  if (this->_internal_robot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_robot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransRoleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransRoleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransRoleData::GetClassData() const { return &_class_data_; }


void TransRoleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransRoleData*>(&to_msg);
  auto& from = static_cast<const TransRoleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransRoleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equips_.MergeFrom(from._impl_.equips_);
  _this->_impl_.propertys_.MergeFrom(from._impl_.propertys_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_carrerid() != 0) {
    _this->_internal_set_carrerid(from._internal_carrerid());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_mountid() != 0) {
    _this->_internal_set_mountid(from._internal_mountid());
  }
  if (from._internal_robot() != 0) {
    _this->_internal_set_robot(from._internal_robot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransRoleData::CopyFrom(const TransRoleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransRoleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransRoleData::IsInitialized() const {
  return true;
}

void TransRoleData::InternalSwap(TransRoleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.equips_.InternalSwap(&other->_impl_.equips_);
  _impl_.propertys_.InternalSwap(&other->_impl_.propertys_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransRoleData, _impl_.robot_)
      + sizeof(TransRoleData::_impl_.robot_)
      - PROTOBUF_FIELD_OFFSET(TransRoleData, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransRoleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[20]);
}

// ===================================================================

class TransPetData::_Internal {
 public:
};

void TransPetData::clear_skills() {
  _impl_.skills_.Clear();
}
TransPetData::TransPetData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransPetData)
}
TransPetData::TransPetData(const TransPetData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransPetData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.propertys_){from._impl_.propertys_}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.petguid_){}
    , decltype(_impl_.petid_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.petguid_, &from._impl_.petguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.petguid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransPetData)
}

inline void TransPetData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.propertys_){arena}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.petguid_){uint64_t{0u}}
    , decltype(_impl_.petid_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransPetData::~TransPetData() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransPetData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransPetData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.propertys_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TransPetData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransPetData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransPetData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.propertys_.Clear();
  _impl_.skills_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.petguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.petguid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransPetData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PetID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.petid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.TransPetData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Propertys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.SkillItem Skills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransPetData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransPetData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  // int32 PetID = 2;
  if (this->_internal_petid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_petid(), target);
  }

  // int32 ActorID = 3;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_actorid(), target);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.TransPetData.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // repeated int32 Propertys = 6;
  {
    int byte_size = _impl_._propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .symphony.proto.SkillItem Skills = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransPetData)
  return target;
}

size_t TransPetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransPetData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Propertys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .symphony.proto.SkillItem Skills = 7;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_petguid());
  }

  // int32 PetID = 2;
  if (this->_internal_petid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_petid());
  }

  // int32 ActorID = 3;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransPetData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransPetData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransPetData::GetClassData() const { return &_class_data_; }


void TransPetData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransPetData*>(&to_msg);
  auto& from = static_cast<const TransPetData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransPetData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.propertys_.MergeFrom(from._impl_.propertys_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_petguid() != 0) {
    _this->_internal_set_petguid(from._internal_petguid());
  }
  if (from._internal_petid() != 0) {
    _this->_internal_set_petid(from._internal_petid());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransPetData::CopyFrom(const TransPetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransPetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransPetData::IsInitialized() const {
  return true;
}

void TransPetData::InternalSwap(TransPetData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.propertys_.InternalSwap(&other->_impl_.propertys_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransPetData, _impl_.level_)
      + sizeof(TransPetData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TransPetData, _impl_.petguid_)>(
          reinterpret_cast<char*>(&_impl_.petguid_),
          reinterpret_cast<char*>(&other->_impl_.petguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransPetData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[21]);
}

// ===================================================================

class TransPartnerData::_Internal {
 public:
};

void TransPartnerData::clear_skills() {
  _impl_.skills_.Clear();
}
TransPartnerData::TransPartnerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransPartnerData)
}
TransPartnerData::TransPartnerData(const TransPartnerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransPartnerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.propertys_){from._impl_.propertys_}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.partnerguid_){}
    , decltype(_impl_.partnerid_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.partnerguid_, &from._impl_.partnerguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.partnerguid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransPartnerData)
}

inline void TransPartnerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.propertys_){arena}
    , /*decltype(_impl_._propertys_cached_byte_size_)*/{0}
    , decltype(_impl_.skills_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.partnerguid_){uint64_t{0u}}
    , decltype(_impl_.partnerid_){0}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TransPartnerData::~TransPartnerData() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransPartnerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransPartnerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.propertys_.~RepeatedField();
  _impl_.skills_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void TransPartnerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransPartnerData::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransPartnerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.propertys_.Clear();
  _impl_.skills_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.partnerguid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransPartnerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PartnerGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.partnerguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 PartnerID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.partnerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.TransPartnerData.Name"));
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Propertys = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_propertys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_propertys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.SkillItem Skills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransPartnerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransPartnerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->_internal_partnerguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_partnerguid(), target);
  }

  // int32 PartnerID = 2;
  if (this->_internal_partnerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_partnerid(), target);
  }

  // int32 ActorID = 3;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_actorid(), target);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.TransPartnerData.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // repeated int32 Propertys = 6;
  {
    int byte_size = _impl_._propertys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_propertys(), byte_size, target);
    }
  }

  // repeated .symphony.proto.SkillItem Skills = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransPartnerData)
  return target;
}

size_t TransPartnerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransPartnerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Propertys = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.propertys_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._propertys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .symphony.proto.SkillItem Skills = 7;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 PartnerGuid = 1;
  if (this->_internal_partnerguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_partnerguid());
  }

  // int32 PartnerID = 2;
  if (this->_internal_partnerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partnerid());
  }

  // int32 ActorID = 3;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 Level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransPartnerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransPartnerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransPartnerData::GetClassData() const { return &_class_data_; }


void TransPartnerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransPartnerData*>(&to_msg);
  auto& from = static_cast<const TransPartnerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransPartnerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.propertys_.MergeFrom(from._impl_.propertys_);
  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_partnerguid() != 0) {
    _this->_internal_set_partnerguid(from._internal_partnerguid());
  }
  if (from._internal_partnerid() != 0) {
    _this->_internal_set_partnerid(from._internal_partnerid());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransPartnerData::CopyFrom(const TransPartnerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransPartnerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransPartnerData::IsInitialized() const {
  return true;
}

void TransPartnerData::InternalSwap(TransPartnerData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.propertys_.InternalSwap(&other->_impl_.propertys_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransPartnerData, _impl_.level_)
      + sizeof(TransPartnerData::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(TransPartnerData, _impl_.partnerguid_)>(
          reinterpret_cast<char*>(&_impl_.partnerguid_),
          reinterpret_cast<char*>(&other->_impl_.partnerguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransPartnerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[22]);
}

// ===================================================================

class TransferDataItem::_Internal {
 public:
  static const ::symphony::proto::TransRoleData& roledata(const TransferDataItem* msg);
  static const ::symphony::proto::TransPetData& petdata(const TransferDataItem* msg);
  static const ::symphony::proto::TransPartnerData& partnerdata(const TransferDataItem* msg);
};

const ::symphony::proto::TransRoleData&
TransferDataItem::_Internal::roledata(const TransferDataItem* msg) {
  return *msg->_impl_.roledata_;
}
const ::symphony::proto::TransPetData&
TransferDataItem::_Internal::petdata(const TransferDataItem* msg) {
  return *msg->_impl_.petdata_;
}
const ::symphony::proto::TransPartnerData&
TransferDataItem::_Internal::partnerdata(const TransferDataItem* msg) {
  return *msg->_impl_.partnerdata_;
}
TransferDataItem::TransferDataItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransferDataItem)
}
TransferDataItem::TransferDataItem(const TransferDataItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferDataItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roledata_){nullptr}
    , decltype(_impl_.petdata_){nullptr}
    , decltype(_impl_.partnerdata_){nullptr}
    , decltype(_impl_.camp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roledata()) {
    _this->_impl_.roledata_ = new ::symphony::proto::TransRoleData(*from._impl_.roledata_);
  }
  if (from._internal_has_petdata()) {
    _this->_impl_.petdata_ = new ::symphony::proto::TransPetData(*from._impl_.petdata_);
  }
  if (from._internal_has_partnerdata()) {
    _this->_impl_.partnerdata_ = new ::symphony::proto::TransPartnerData(*from._impl_.partnerdata_);
  }
  _this->_impl_.camp_ = from._impl_.camp_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransferDataItem)
}

inline void TransferDataItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roledata_){nullptr}
    , decltype(_impl_.petdata_){nullptr}
    , decltype(_impl_.partnerdata_){nullptr}
    , decltype(_impl_.camp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferDataItem::~TransferDataItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransferDataItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferDataItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.roledata_;
  if (this != internal_default_instance()) delete _impl_.petdata_;
  if (this != internal_default_instance()) delete _impl_.partnerdata_;
}

void TransferDataItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferDataItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransferDataItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.roledata_ != nullptr) {
    delete _impl_.roledata_;
  }
  _impl_.roledata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.petdata_ != nullptr) {
    delete _impl_.petdata_;
  }
  _impl_.petdata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.partnerdata_ != nullptr) {
    delete _impl_.partnerdata_;
  }
  _impl_.partnerdata_ = nullptr;
  _impl_.camp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Camp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.camp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .symphony.proto.TransRoleData RoleData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roledata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .symphony.proto.TransPetData PetData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_petdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .symphony.proto.TransPartnerData PartnerData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_partnerdata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferDataItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransferDataItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Camp = 1;
  if (this->_internal_camp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_camp(), target);
  }

  // .symphony.proto.TransRoleData RoleData = 2;
  if (this->_internal_has_roledata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::roledata(this),
        _Internal::roledata(this).GetCachedSize(), target, stream);
  }

  // .symphony.proto.TransPetData PetData = 3;
  if (this->_internal_has_petdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::petdata(this),
        _Internal::petdata(this).GetCachedSize(), target, stream);
  }

  // .symphony.proto.TransPartnerData PartnerData = 4;
  if (this->_internal_has_partnerdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::partnerdata(this),
        _Internal::partnerdata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransferDataItem)
  return target;
}

size_t TransferDataItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransferDataItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .symphony.proto.TransRoleData RoleData = 2;
  if (this->_internal_has_roledata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.roledata_);
  }

  // .symphony.proto.TransPetData PetData = 3;
  if (this->_internal_has_petdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.petdata_);
  }

  // .symphony.proto.TransPartnerData PartnerData = 4;
  if (this->_internal_has_partnerdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.partnerdata_);
  }

  // int32 Camp = 1;
  if (this->_internal_camp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferDataItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferDataItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferDataItem::GetClassData() const { return &_class_data_; }


void TransferDataItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferDataItem*>(&to_msg);
  auto& from = static_cast<const TransferDataItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransferDataItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_roledata()) {
    _this->_internal_mutable_roledata()->::symphony::proto::TransRoleData::MergeFrom(
        from._internal_roledata());
  }
  if (from._internal_has_petdata()) {
    _this->_internal_mutable_petdata()->::symphony::proto::TransPetData::MergeFrom(
        from._internal_petdata());
  }
  if (from._internal_has_partnerdata()) {
    _this->_internal_mutable_partnerdata()->::symphony::proto::TransPartnerData::MergeFrom(
        from._internal_partnerdata());
  }
  if (from._internal_camp() != 0) {
    _this->_internal_set_camp(from._internal_camp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferDataItem::CopyFrom(const TransferDataItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransferDataItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataItem::IsInitialized() const {
  return true;
}

void TransferDataItem::InternalSwap(TransferDataItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferDataItem, _impl_.camp_)
      + sizeof(TransferDataItem::_impl_.camp_)
      - PROTOBUF_FIELD_OFFSET(TransferDataItem, _impl_.roledata_)>(
          reinterpret_cast<char*>(&_impl_.roledata_),
          reinterpret_cast<char*>(&other->_impl_.roledata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[23]);
}

// ===================================================================

class TransferDataReq::_Internal {
 public:
};

TransferDataReq::TransferDataReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransferDataReq)
}
TransferDataReq::TransferDataReq(const TransferDataReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferDataReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.transdatas_){from._impl_.transdatas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransferDataReq)
}

inline void TransferDataReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.transdatas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferDataReq::~TransferDataReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransferDataReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferDataReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.transdatas_.~RepeatedPtrField();
}

void TransferDataReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferDataReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransferDataReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.transdatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.TransferDataItem TransDatas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transdatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferDataReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransferDataReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.TransferDataItem TransDatas = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transdatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_transdatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransferDataReq)
  return target;
}

size_t TransferDataReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransferDataReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.TransferDataItem TransDatas = 1;
  total_size += 1UL * this->_internal_transdatas_size();
  for (const auto& msg : this->_impl_.transdatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferDataReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferDataReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferDataReq::GetClassData() const { return &_class_data_; }


void TransferDataReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferDataReq*>(&to_msg);
  auto& from = static_cast<const TransferDataReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransferDataReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.transdatas_.MergeFrom(from._impl_.transdatas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferDataReq::CopyFrom(const TransferDataReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransferDataReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataReq::IsInitialized() const {
  return true;
}

void TransferDataReq::InternalSwap(TransferDataReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.transdatas_.InternalSwap(&other->_impl_.transdatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[24]);
}

// ===================================================================

class TransferDataAck::_Internal {
 public:
};

TransferDataAck::TransferDataAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.TransferDataAck)
}
TransferDataAck::TransferDataAck(const TransferDataAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferDataAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.retcode_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.TransferDataAck)
}

inline void TransferDataAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.serverid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferDataAck::~TransferDataAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.TransferDataAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferDataAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransferDataAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferDataAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.TransferDataAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferDataAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransferDataAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.TransferDataAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // int32 CopyID = 3;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 4;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_copyguid(), target);
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.TransferDataAck)
  return target;
}

size_t TransferDataAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.TransferDataAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  // int32 CopyID = 3;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // int32 CopyGuid = 4;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 ServerID = 5;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferDataAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferDataAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferDataAck::GetClassData() const { return &_class_data_; }


void TransferDataAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferDataAck*>(&to_msg);
  auto& from = static_cast<const TransferDataAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.TransferDataAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferDataAck::CopyFrom(const TransferDataAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.TransferDataAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferDataAck::IsInitialized() const {
  return true;
}

void TransferDataAck::InternalSwap(TransferDataAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransferDataAck, _impl_.serverid_)
      + sizeof(TransferDataAck::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(TransferDataAck, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferDataAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[25]);
}

// ===================================================================

class NotifyIntoScene::_Internal {
 public:
};

NotifyIntoScene::NotifyIntoScene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.NotifyIntoScene)
}
NotifyIntoScene::NotifyIntoScene(const NotifyIntoScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NotifyIntoScene* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.copyguid_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.NotifyIntoScene)
}

inline void NotifyIntoScene::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.copyguid_){0}
    , decltype(_impl_.serverid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NotifyIntoScene::~NotifyIntoScene() {
  // @@protoc_insertion_point(destructor:symphony.proto.NotifyIntoScene)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotifyIntoScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NotifyIntoScene::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NotifyIntoScene::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.NotifyIntoScene)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotifyIntoScene::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyGuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotifyIntoScene::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.NotifyIntoScene)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copyguid(), target);
  }

  // int32 ServerID = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.NotifyIntoScene)
  return target;
}

size_t NotifyIntoScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.NotifyIntoScene)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // int32 CopyGuid = 3;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyguid());
  }

  // int32 ServerID = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NotifyIntoScene::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NotifyIntoScene::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NotifyIntoScene::GetClassData() const { return &_class_data_; }


void NotifyIntoScene::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NotifyIntoScene*>(&to_msg);
  auto& from = static_cast<const NotifyIntoScene&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.NotifyIntoScene)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NotifyIntoScene::CopyFrom(const NotifyIntoScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.NotifyIntoScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyIntoScene::IsInitialized() const {
  return true;
}

void NotifyIntoScene::InternalSwap(NotifyIntoScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotifyIntoScene, _impl_.serverid_)
      + sizeof(NotifyIntoScene::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(NotifyIntoScene, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotifyIntoScene::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[26]);
}

// ===================================================================

class NearByRoleItem::_Internal {
 public:
};

NearByRoleItem::NearByRoleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.NearByRoleItem)
}
NearByRoleItem::NearByRoleItem(const NearByRoleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NearByRoleItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.actorid_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.NearByRoleItem)
}

inline void NearByRoleItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.actorid_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NearByRoleItem::~NearByRoleItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.NearByRoleItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NearByRoleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void NearByRoleItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NearByRoleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.NearByRoleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearByRoleItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ActorID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.actorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.NearByRoleItem.Name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NearByRoleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.NearByRoleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ActorID = 2;
  if (this->_internal_actorid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_actorid(), target);
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.NearByRoleItem.Name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.NearByRoleItem)
  return target;
}

size_t NearByRoleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.NearByRoleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 4;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // int32 ActorID = 2;
  if (this->_internal_actorid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_actorid());
  }

  // int32 Level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NearByRoleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NearByRoleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NearByRoleItem::GetClassData() const { return &_class_data_; }


void NearByRoleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NearByRoleItem*>(&to_msg);
  auto& from = static_cast<const NearByRoleItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.NearByRoleItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_actorid() != 0) {
    _this->_internal_set_actorid(from._internal_actorid());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NearByRoleItem::CopyFrom(const NearByRoleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.NearByRoleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearByRoleItem::IsInitialized() const {
  return true;
}

void NearByRoleItem::InternalSwap(NearByRoleItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NearByRoleItem, _impl_.level_)
      + sizeof(NearByRoleItem::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(NearByRoleItem, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NearByRoleItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[27]);
}

// ===================================================================

class CopyInsItem::_Internal {
 public:
};

CopyInsItem::CopyInsItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CopyInsItem)
}
CopyInsItem::CopyInsItem(const CopyInsItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CopyInsItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.copyguid_){}
    , decltype(_impl_.copyid_){}
    , decltype(_impl_.copytype_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.copyguid_, &from._impl_.copyguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serverid_) -
    reinterpret_cast<char*>(&_impl_.copyguid_)) + sizeof(_impl_.serverid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CopyInsItem)
}

inline void CopyInsItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.copyguid_){0u}
    , decltype(_impl_.copyid_){0}
    , decltype(_impl_.copytype_){0}
    , decltype(_impl_.serverid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CopyInsItem::~CopyInsItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.CopyInsItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CopyInsItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CopyInsItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CopyInsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CopyInsItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.copyguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serverid_) -
      reinterpret_cast<char*>(&_impl_.copyguid_)) + sizeof(_impl_.serverid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyInsItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 CopyGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.copyguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.copyid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CopyType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.copytype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ServerID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopyInsItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CopyInsItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 CopyGuid = 1;
  if (this->_internal_copyguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_copyguid(), target);
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_copyid(), target);
  }

  // int32 CopyType = 3;
  if (this->_internal_copytype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_copytype(), target);
  }

  // int32 ServerID = 4;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CopyInsItem)
  return target;
}

size_t CopyInsItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CopyInsItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 CopyGuid = 1;
  if (this->_internal_copyguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_copyguid());
  }

  // int32 CopyID = 2;
  if (this->_internal_copyid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copyid());
  }

  // int32 CopyType = 3;
  if (this->_internal_copytype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_copytype());
  }

  // int32 ServerID = 4;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyInsItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CopyInsItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyInsItem::GetClassData() const { return &_class_data_; }


void CopyInsItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CopyInsItem*>(&to_msg);
  auto& from = static_cast<const CopyInsItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CopyInsItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_copyguid() != 0) {
    _this->_internal_set_copyguid(from._internal_copyguid());
  }
  if (from._internal_copyid() != 0) {
    _this->_internal_set_copyid(from._internal_copyid());
  }
  if (from._internal_copytype() != 0) {
    _this->_internal_set_copytype(from._internal_copytype());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopyInsItem::CopyFrom(const CopyInsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CopyInsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyInsItem::IsInitialized() const {
  return true;
}

void CopyInsItem::InternalSwap(CopyInsItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CopyInsItem, _impl_.serverid_)
      + sizeof(CopyInsItem::_impl_.serverid_)
      - PROTOBUF_FIELD_OFFSET(CopyInsItem, _impl_.copyguid_)>(
          reinterpret_cast<char*>(&_impl_.copyguid_),
          reinterpret_cast<char*>(&other->_impl_.copyguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyInsItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[28]);
}

// ===================================================================

class CopyReportReq::_Internal {
 public:
};

CopyReportReq::CopyReportReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CopyReportReq)
}
CopyReportReq::CopyReportReq(const CopyReportReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CopyReportReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.copylist_){from._impl_.copylist_}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.serverid_ = from._impl_.serverid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CopyReportReq)
}

inline void CopyReportReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.copylist_){arena}
    , decltype(_impl_.serverid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CopyReportReq::~CopyReportReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.CopyReportReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CopyReportReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.copylist_.~RepeatedPtrField();
}

void CopyReportReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CopyReportReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CopyReportReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.copylist_.Clear();
  _impl_.serverid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CopyReportReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.CopyInsItem CopyList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_copylist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CopyReportReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CopyReportReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // repeated .symphony.proto.CopyInsItem CopyList = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_copylist_size()); i < n; i++) {
    const auto& repfield = this->_internal_copylist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CopyReportReq)
  return target;
}

size_t CopyReportReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CopyReportReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.CopyInsItem CopyList = 2;
  total_size += 1UL * this->_internal_copylist_size();
  for (const auto& msg : this->_impl_.copylist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CopyReportReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CopyReportReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CopyReportReq::GetClassData() const { return &_class_data_; }


void CopyReportReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CopyReportReq*>(&to_msg);
  auto& from = static_cast<const CopyReportReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CopyReportReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.copylist_.MergeFrom(from._impl_.copylist_);
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CopyReportReq::CopyFrom(const CopyReportReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CopyReportReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyReportReq::IsInitialized() const {
  return true;
}

void CopyReportReq::InternalSwap(CopyReportReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.copylist_.InternalSwap(&other->_impl_.copylist_);
  swap(_impl_.serverid_, other->_impl_.serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CopyReportReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[29]);
}

// ===================================================================

class UseHpBottleReq::_Internal {
 public:
};

UseHpBottleReq::UseHpBottleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseHpBottleReq)
}
UseHpBottleReq::UseHpBottleReq(const UseHpBottleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UseHpBottleReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseHpBottleReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseHpBottleReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseHpBottleReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UseHpBottleReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[30]);
}

// ===================================================================

class UseHpBottleAck::_Internal {
 public:
};

UseHpBottleAck::UseHpBottleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseHpBottleAck)
}
UseHpBottleAck::UseHpBottleAck(const UseHpBottleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UseHpBottleAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.retcode_, &from._impl_.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseHpBottleAck)
}

inline void UseHpBottleAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UseHpBottleAck::~UseHpBottleAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UseHpBottleAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UseHpBottleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UseHpBottleAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UseHpBottleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UseHpBottleAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseHpBottleAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UseHpBottleAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UseHpBottleAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UseHpBottleAck)
  return target;
}

size_t UseHpBottleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UseHpBottleAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseHpBottleAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UseHpBottleAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseHpBottleAck::GetClassData() const { return &_class_data_; }


void UseHpBottleAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UseHpBottleAck*>(&to_msg);
  auto& from = static_cast<const UseHpBottleAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UseHpBottleAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UseHpBottleAck::CopyFrom(const UseHpBottleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UseHpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseHpBottleAck::IsInitialized() const {
  return true;
}

void UseHpBottleAck::InternalSwap(UseHpBottleAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseHpBottleAck, _impl_.count_)
      + sizeof(UseHpBottleAck::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(UseHpBottleAck, _impl_.retcode_)>(
          reinterpret_cast<char*>(&_impl_.retcode_),
          reinterpret_cast<char*>(&other->_impl_.retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseHpBottleAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[31]);
}

// ===================================================================

class UseMpBottleReq::_Internal {
 public:
};

UseMpBottleReq::UseMpBottleReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseMpBottleReq)
}
UseMpBottleReq::UseMpBottleReq(const UseMpBottleReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UseMpBottleReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseMpBottleReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseMpBottleReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseMpBottleReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UseMpBottleReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[32]);
}

// ===================================================================

class UseMpBottleAck::_Internal {
 public:
};

UseMpBottleAck::UseMpBottleAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseMpBottleAck)
}
UseMpBottleAck::UseMpBottleAck(const UseMpBottleAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UseMpBottleAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , decltype(_impl_.count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.retcode_, &from._impl_.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseMpBottleAck)
}

inline void UseMpBottleAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , decltype(_impl_.count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UseMpBottleAck::~UseMpBottleAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UseMpBottleAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UseMpBottleAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UseMpBottleAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UseMpBottleAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UseMpBottleAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.retcode_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UseMpBottleAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UseMpBottleAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UseMpBottleAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UseMpBottleAck)
  return target;
}

size_t UseMpBottleAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UseMpBottleAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  // int32 Count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseMpBottleAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UseMpBottleAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseMpBottleAck::GetClassData() const { return &_class_data_; }


void UseMpBottleAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UseMpBottleAck*>(&to_msg);
  auto& from = static_cast<const UseMpBottleAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UseMpBottleAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UseMpBottleAck::CopyFrom(const UseMpBottleAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UseMpBottleAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseMpBottleAck::IsInitialized() const {
  return true;
}

void UseMpBottleAck::InternalSwap(UseMpBottleAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UseMpBottleAck, _impl_.count_)
      + sizeof(UseMpBottleAck::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(UseMpBottleAck, _impl_.retcode_)>(
          reinterpret_cast<char*>(&_impl_.retcode_),
          reinterpret_cast<char*>(&other->_impl_.retcode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UseMpBottleAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[33]);
}

// ===================================================================

class ChatMessageReq::_Internal {
 public:
};

ChatMessageReq::ChatMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ChatMessageReq)
}
ChatMessageReq::ChatMessageReq(const ChatMessageReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessageReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.guildid_){}
    , decltype(_impl_.chatchl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcname().empty()) {
    _this->_impl_.srcname_.Set(from._internal_srcname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chatchl_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.chatchl_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ChatMessageReq)
}

inline void ChatMessageReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.srcid_){uint64_t{0u}}
    , decltype(_impl_.targetid_){uint64_t{0u}}
    , decltype(_impl_.guildid_){uint64_t{0u}}
    , decltype(_impl_.chatchl_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.srcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessageReq::~ChatMessageReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.ChatMessageReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcname_.Destroy();
  _impl_.content_.Destroy();
}

void ChatMessageReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ChatMessageReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcname_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.chatchl_) -
      reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.chatchl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SrcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.ChatMessageReq.SrcName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 SrcID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TargetID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChatChl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.chatchl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GuildID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.ChatMessageReq.Content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ChatMessageReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcName = 1;
  if (!this->_internal_srcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcname().data(), static_cast<int>(this->_internal_srcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.ChatMessageReq.SrcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcname(), target);
  }

  // uint64 SrcID = 2;
  if (this->_internal_srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_srcid(), target);
  }

  // uint64 TargetID = 3;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_targetid(), target);
  }

  // int32 ChatChl = 4;
  if (this->_internal_chatchl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_chatchl(), target);
  }

  // uint64 GuildID = 5;
  if (this->_internal_guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_guildid(), target);
  }

  // string Content = 6;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.ChatMessageReq.Content");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ChatMessageReq)
  return target;
}

size_t ChatMessageReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ChatMessageReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcName = 1;
  if (!this->_internal_srcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcname());
  }

  // string Content = 6;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 SrcID = 2;
  if (this->_internal_srcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_srcid());
  }

  // uint64 TargetID = 3;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid());
  }

  // uint64 GuildID = 5;
  if (this->_internal_guildid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guildid());
  }

  // int32 ChatChl = 4;
  if (this->_internal_chatchl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chatchl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessageReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageReq::GetClassData() const { return &_class_data_; }


void ChatMessageReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessageReq*>(&to_msg);
  auto& from = static_cast<const ChatMessageReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ChatMessageReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcname().empty()) {
    _this->_internal_set_srcname(from._internal_srcname());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_srcid() != 0) {
    _this->_internal_set_srcid(from._internal_srcid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_guildid() != 0) {
    _this->_internal_set_guildid(from._internal_guildid());
  }
  if (from._internal_chatchl() != 0) {
    _this->_internal_set_chatchl(from._internal_chatchl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageReq::CopyFrom(const ChatMessageReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ChatMessageReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageReq::IsInitialized() const {
  return true;
}

void ChatMessageReq::InternalSwap(ChatMessageReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcname_, lhs_arena,
      &other->_impl_.srcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessageReq, _impl_.chatchl_)
      + sizeof(ChatMessageReq::_impl_.chatchl_)
      - PROTOBUF_FIELD_OFFSET(ChatMessageReq, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[34]);
}

// ===================================================================

class ChatMessageAck::_Internal {
 public:
};

ChatMessageAck::ChatMessageAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ChatMessageAck)
}
ChatMessageAck::ChatMessageAck(const ChatMessageAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessageAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ChatMessageAck)
}

inline void ChatMessageAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChatMessageAck::~ChatMessageAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.ChatMessageAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChatMessageAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ChatMessageAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ChatMessageAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ChatMessageAck)
  return target;
}

size_t ChatMessageAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ChatMessageAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessageAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageAck::GetClassData() const { return &_class_data_; }


void ChatMessageAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessageAck*>(&to_msg);
  auto& from = static_cast<const ChatMessageAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ChatMessageAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageAck::CopyFrom(const ChatMessageAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ChatMessageAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageAck::IsInitialized() const {
  return true;
}

void ChatMessageAck::InternalSwap(ChatMessageAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[35]);
}

// ===================================================================

class ChatMessageNty::_Internal {
 public:
};

ChatMessageNty::ChatMessageNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ChatMessageNty)
}
ChatMessageNty::ChatMessageNty(const ChatMessageNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChatMessageNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.srcname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.srcid_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.srclevel_){}
    , decltype(_impl_.chatchl_){}
    , decltype(_impl_.guildid_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.srcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_srcname().empty()) {
    _this->_impl_.srcname_.Set(from._internal_srcname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.srcid_, &from._impl_.srcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ChatMessageNty)
}

inline void ChatMessageNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.srcname_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.srcid_){uint64_t{0u}}
    , decltype(_impl_.targetid_){uint64_t{0u}}
    , decltype(_impl_.srclevel_){0}
    , decltype(_impl_.chatchl_){0}
    , decltype(_impl_.guildid_){uint64_t{0u}}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.srcname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.srcname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChatMessageNty::~ChatMessageNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.ChatMessageNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChatMessageNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.srcname_.Destroy();
  _impl_.content_.Destroy();
}

void ChatMessageNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChatMessageNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ChatMessageNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.srcname_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  ::memset(&_impl_.srcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.srcid_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChatMessageNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string SrcName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_srcname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.ChatMessageNty.SrcName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 SrcID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.srcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 SrcLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.srclevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TargetID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChatChl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.chatchl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 GuildID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.guildid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TimeStamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Content = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.ChatMessageNty.Content"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatMessageNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ChatMessageNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string SrcName = 1;
  if (!this->_internal_srcname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_srcname().data(), static_cast<int>(this->_internal_srcname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.ChatMessageNty.SrcName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_srcname(), target);
  }

  // uint64 SrcID = 2;
  if (this->_internal_srcid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_srcid(), target);
  }

  // int32 SrcLevel = 3;
  if (this->_internal_srclevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_srclevel(), target);
  }

  // uint64 TargetID = 4;
  if (this->_internal_targetid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_targetid(), target);
  }

  // int32 ChatChl = 5;
  if (this->_internal_chatchl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_chatchl(), target);
  }

  // uint64 GuildID = 6;
  if (this->_internal_guildid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_guildid(), target);
  }

  // uint64 TimeStamp = 7;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_timestamp(), target);
  }

  // string Content = 8;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.ChatMessageNty.Content");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ChatMessageNty)
  return target;
}

size_t ChatMessageNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ChatMessageNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string SrcName = 1;
  if (!this->_internal_srcname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_srcname());
  }

  // string Content = 8;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 SrcID = 2;
  if (this->_internal_srcid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_srcid());
  }

  // uint64 TargetID = 4;
  if (this->_internal_targetid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetid());
  }

  // int32 SrcLevel = 3;
  if (this->_internal_srclevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_srclevel());
  }

  // int32 ChatChl = 5;
  if (this->_internal_chatchl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chatchl());
  }

  // uint64 GuildID = 6;
  if (this->_internal_guildid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_guildid());
  }

  // uint64 TimeStamp = 7;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChatMessageNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChatMessageNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChatMessageNty::GetClassData() const { return &_class_data_; }


void ChatMessageNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChatMessageNty*>(&to_msg);
  auto& from = static_cast<const ChatMessageNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ChatMessageNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_srcname().empty()) {
    _this->_internal_set_srcname(from._internal_srcname());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_srcid() != 0) {
    _this->_internal_set_srcid(from._internal_srcid());
  }
  if (from._internal_targetid() != 0) {
    _this->_internal_set_targetid(from._internal_targetid());
  }
  if (from._internal_srclevel() != 0) {
    _this->_internal_set_srclevel(from._internal_srclevel());
  }
  if (from._internal_chatchl() != 0) {
    _this->_internal_set_chatchl(from._internal_chatchl());
  }
  if (from._internal_guildid() != 0) {
    _this->_internal_set_guildid(from._internal_guildid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessageNty::CopyFrom(const ChatMessageNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ChatMessageNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessageNty::IsInitialized() const {
  return true;
}

void ChatMessageNty::InternalSwap(ChatMessageNty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.srcname_, lhs_arena,
      &other->_impl_.srcname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessageNty, _impl_.timestamp_)
      + sizeof(ChatMessageNty::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ChatMessageNty, _impl_.srcid_)>(
          reinterpret_cast<char*>(&_impl_.srcid_),
          reinterpret_cast<char*>(&other->_impl_.srcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChatMessageNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[36]);
}

// ===================================================================

class CommonReq::_Internal {
 public:
};

CommonReq::CommonReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CommonReq)
}
CommonReq::CommonReq(const CommonReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.param1_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.param1_ = from._impl_.param1_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CommonReq)
}

inline void CommonReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.param1_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonReq::~CommonReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.CommonReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CommonReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param1_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Param1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.param1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CommonReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Param1 = 1;
  if (this->_internal_param1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_param1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CommonReq)
  return target;
}

size_t CommonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CommonReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Param1 = 1;
  if (this->_internal_param1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_param1());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonReq::GetClassData() const { return &_class_data_; }


void CommonReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonReq*>(&to_msg);
  auto& from = static_cast<const CommonReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CommonReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_param1() != 0) {
    _this->_internal_set_param1(from._internal_param1());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonReq::CopyFrom(const CommonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CommonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReq::IsInitialized() const {
  return true;
}

void CommonReq::InternalSwap(CommonReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.param1_, other->_impl_.param1_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[37]);
}

// ===================================================================

class CommonAck::_Internal {
 public:
};

CommonAck::CommonAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.CommonAck)
}
CommonAck::CommonAck(const CommonAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.CommonAck)
}

inline void CommonAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommonAck::~CommonAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.CommonAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommonAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.CommonAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.CommonAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.CommonAck)
  return target;
}

size_t CommonAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.CommonAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonAck::GetClassData() const { return &_class_data_; }


void CommonAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonAck*>(&to_msg);
  auto& from = static_cast<const CommonAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.CommonAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonAck::CopyFrom(const CommonAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.CommonAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonAck::IsInitialized() const {
  return true;
}

void CommonAck::InternalSwap(CommonAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[38]);
}

// ===================================================================

class BroadMessageNotify::_Internal {
 public:
};

BroadMessageNotify::BroadMessageNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.BroadMessageNotify)
}
BroadMessageNotify::BroadMessageNotify(const BroadMessageNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BroadMessageNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){from._impl_.connid_}
    , /*decltype(_impl_._connid_cached_byte_size_)*/{0}
    , decltype(_impl_.msgdata_){}
    , decltype(_impl_.msgid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msgdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msgdata().empty()) {
    _this->_impl_.msgdata_.Set(from._internal_msgdata(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.msgid_ = from._impl_.msgid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.BroadMessageNotify)
}

inline void BroadMessageNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.connid_){arena}
    , /*decltype(_impl_._connid_cached_byte_size_)*/{0}
    , decltype(_impl_.msgdata_){}
    , decltype(_impl_.msgid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msgdata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msgdata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BroadMessageNotify::~BroadMessageNotify() {
  // @@protoc_insertion_point(destructor:symphony.proto.BroadMessageNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BroadMessageNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connid_.~RepeatedField();
  _impl_.msgdata_.Destroy();
}

void BroadMessageNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BroadMessageNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.BroadMessageNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connid_.Clear();
  _impl_.msgdata_.ClearToEmpty();
  _impl_.msgid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BroadMessageNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 MsgID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ConnID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_connid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_connid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes MsgData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msgdata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BroadMessageNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.BroadMessageNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 MsgID = 1;
  if (this->_internal_msgid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // repeated uint32 ConnID = 2;
  {
    int byte_size = _impl_._connid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_connid(), byte_size, target);
    }
  }

  // bytes MsgData = 3;
  if (!this->_internal_msgdata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_msgdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.BroadMessageNotify)
  return target;
}

size_t BroadMessageNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.BroadMessageNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ConnID = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.connid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._connid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes MsgData = 3;
  if (!this->_internal_msgdata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msgdata());
  }

  // uint32 MsgID = 1;
  if (this->_internal_msgid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BroadMessageNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BroadMessageNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BroadMessageNotify::GetClassData() const { return &_class_data_; }


void BroadMessageNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BroadMessageNotify*>(&to_msg);
  auto& from = static_cast<const BroadMessageNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.BroadMessageNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connid_.MergeFrom(from._impl_.connid_);
  if (!from._internal_msgdata().empty()) {
    _this->_internal_set_msgdata(from._internal_msgdata());
  }
  if (from._internal_msgid() != 0) {
    _this->_internal_set_msgid(from._internal_msgid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BroadMessageNotify::CopyFrom(const BroadMessageNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.BroadMessageNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadMessageNotify::IsInitialized() const {
  return true;
}

void BroadMessageNotify::InternalSwap(BroadMessageNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connid_.InternalSwap(&other->_impl_.connid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msgdata_, lhs_arena,
      &other->_impl_.msgdata_, rhs_arena
  );
  swap(_impl_.msgid_, other->_impl_.msgid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BroadMessageNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[39]);
}

// ===================================================================

class LogicRegToLoginReq::_Internal {
 public:
};

LogicRegToLoginReq::LogicRegToLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicRegToLoginReq)
}
LogicRegToLoginReq::LogicRegToLoginReq(const LogicRegToLoginReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicRegToLoginReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.svrinnerip_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.serverport_){}
    , decltype(_impl_.httpport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  _impl_.svrinnerip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svrinnerip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_svrinnerip().empty()) {
    _this->_impl_.svrinnerip_.Set(from._internal_svrinnerip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.httpport_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.httpport_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicRegToLoginReq)
}

inline void LogicRegToLoginReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.svrinnerip_){}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.serverport_){0}
    , decltype(_impl_.httpport_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.svrinnerip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.svrinnerip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicRegToLoginReq::~LogicRegToLoginReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicRegToLoginReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicRegToLoginReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
  _impl_.svrinnerip_.Destroy();
}

void LogicRegToLoginReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicRegToLoginReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicRegToLoginReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  _impl_.svrinnerip_.ClearToEmpty();
  ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.httpport_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.httpport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToLoginReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.LogicRegToLoginReq.ServerName"));
        } else
          goto handle_unusual;
        continue;
      // string SvrInnerIp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_svrinnerip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.LogicRegToLoginReq.SvrInnerIp"));
        } else
          goto handle_unusual;
        continue;
      // int32 ServerPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HttpPort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.httpport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicRegToLoginReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicRegToLoginReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.LogicRegToLoginReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // string SvrInnerIp = 3;
  if (!this->_internal_svrinnerip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_svrinnerip().data(), static_cast<int>(this->_internal_svrinnerip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.LogicRegToLoginReq.SvrInnerIp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_svrinnerip(), target);
  }

  // int32 ServerPort = 4;
  if (this->_internal_serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_serverport(), target);
  }

  // int32 HttpPort = 5;
  if (this->_internal_httpport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_httpport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicRegToLoginReq)
  return target;
}

size_t LogicRegToLoginReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicRegToLoginReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // string SvrInnerIp = 3;
  if (!this->_internal_svrinnerip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_svrinnerip());
  }

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 ServerPort = 4;
  if (this->_internal_serverport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverport());
  }

  // int32 HttpPort = 5;
  if (this->_internal_httpport() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_httpport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicRegToLoginReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicRegToLoginReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicRegToLoginReq::GetClassData() const { return &_class_data_; }


void LogicRegToLoginReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicRegToLoginReq*>(&to_msg);
  auto& from = static_cast<const LogicRegToLoginReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicRegToLoginReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (!from._internal_svrinnerip().empty()) {
    _this->_internal_set_svrinnerip(from._internal_svrinnerip());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_serverport() != 0) {
    _this->_internal_set_serverport(from._internal_serverport());
  }
  if (from._internal_httpport() != 0) {
    _this->_internal_set_httpport(from._internal_httpport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicRegToLoginReq::CopyFrom(const LogicRegToLoginReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicRegToLoginReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginReq::IsInitialized() const {
  return true;
}

void LogicRegToLoginReq::InternalSwap(LogicRegToLoginReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.svrinnerip_, lhs_arena,
      &other->_impl_.svrinnerip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToLoginReq, _impl_.httpport_)
      + sizeof(LogicRegToLoginReq::_impl_.httpport_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToLoginReq, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToLoginReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[40]);
}

// ===================================================================

class LogicRegToLoginAck::_Internal {
 public:
};

LogicRegToLoginAck::LogicRegToLoginAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicRegToLoginAck)
}
LogicRegToLoginAck::LogicRegToLoginAck(const LogicRegToLoginAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicRegToLoginAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.newsvrname_){}
    , decltype(_impl_.svropentime_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newsvrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newsvrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newsvrname().empty()) {
    _this->_impl_.newsvrname_.Set(from._internal_newsvrname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.svropentime_, &from._impl_.svropentime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.svropentime_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicRegToLoginAck)
}

inline void LogicRegToLoginAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.newsvrname_){}
    , decltype(_impl_.svropentime_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.newsvrname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newsvrname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicRegToLoginAck::~LogicRegToLoginAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicRegToLoginAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicRegToLoginAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newsvrname_.Destroy();
}

void LogicRegToLoginAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicRegToLoginAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicRegToLoginAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.newsvrname_.ClearToEmpty();
  ::memset(&_impl_.svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retcode_) -
      reinterpret_cast<char*>(&_impl_.svropentime_)) + sizeof(_impl_.retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToLoginAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string NewSvrName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_newsvrname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.LogicRegToLoginAck.NewSvrName"));
        } else
          goto handle_unusual;
        continue;
      // uint64 SvrOpenTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.svropentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicRegToLoginAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicRegToLoginAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // string NewSvrName = 2;
  if (!this->_internal_newsvrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newsvrname().data(), static_cast<int>(this->_internal_newsvrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.LogicRegToLoginAck.NewSvrName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_newsvrname(), target);
  }

  // uint64 SvrOpenTime = 3;
  if (this->_internal_svropentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_svropentime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicRegToLoginAck)
  return target;
}

size_t LogicRegToLoginAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicRegToLoginAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NewSvrName = 2;
  if (!this->_internal_newsvrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newsvrname());
  }

  // uint64 SvrOpenTime = 3;
  if (this->_internal_svropentime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_svropentime());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicRegToLoginAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicRegToLoginAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicRegToLoginAck::GetClassData() const { return &_class_data_; }


void LogicRegToLoginAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicRegToLoginAck*>(&to_msg);
  auto& from = static_cast<const LogicRegToLoginAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicRegToLoginAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_newsvrname().empty()) {
    _this->_internal_set_newsvrname(from._internal_newsvrname());
  }
  if (from._internal_svropentime() != 0) {
    _this->_internal_set_svropentime(from._internal_svropentime());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicRegToLoginAck::CopyFrom(const LogicRegToLoginAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicRegToLoginAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToLoginAck::IsInitialized() const {
  return true;
}

void LogicRegToLoginAck::InternalSwap(LogicRegToLoginAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newsvrname_, lhs_arena,
      &other->_impl_.newsvrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToLoginAck, _impl_.retcode_)
      + sizeof(LogicRegToLoginAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToLoginAck, _impl_.svropentime_)>(
          reinterpret_cast<char*>(&_impl_.svropentime_),
          reinterpret_cast<char*>(&other->_impl_.svropentime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToLoginAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[41]);
}

// ===================================================================

class LogicRegToDbSvrReq::_Internal {
 public:
};

LogicRegToDbSvrReq::LogicRegToDbSvrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicRegToDbSvrReq)
}
LogicRegToDbSvrReq::LogicRegToDbSvrReq(const LogicRegToDbSvrReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicRegToDbSvrReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.processid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.processid_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.processid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicRegToDbSvrReq)
}

inline void LogicRegToDbSvrReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.processid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicRegToDbSvrReq::~LogicRegToDbSvrReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicRegToDbSvrReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicRegToDbSvrReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
}

void LogicRegToDbSvrReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicRegToDbSvrReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicRegToDbSvrReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.processid_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.processid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToDbSvrReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.LogicRegToDbSvrReq.ServerName"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ProcessID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.processid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicRegToDbSvrReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicRegToDbSvrReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.LogicRegToDbSvrReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // uint32 ProcessID = 3;
  if (this->_internal_processid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_processid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicRegToDbSvrReq)
  return target;
}

size_t LogicRegToDbSvrReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicRegToDbSvrReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // uint32 ProcessID = 3;
  if (this->_internal_processid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_processid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicRegToDbSvrReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicRegToDbSvrReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicRegToDbSvrReq::GetClassData() const { return &_class_data_; }


void LogicRegToDbSvrReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicRegToDbSvrReq*>(&to_msg);
  auto& from = static_cast<const LogicRegToDbSvrReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicRegToDbSvrReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_processid() != 0) {
    _this->_internal_set_processid(from._internal_processid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicRegToDbSvrReq::CopyFrom(const LogicRegToDbSvrReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicRegToDbSvrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToDbSvrReq::IsInitialized() const {
  return true;
}

void LogicRegToDbSvrReq::InternalSwap(LogicRegToDbSvrReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicRegToDbSvrReq, _impl_.processid_)
      + sizeof(LogicRegToDbSvrReq::_impl_.processid_)
      - PROTOBUF_FIELD_OFFSET(LogicRegToDbSvrReq, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToDbSvrReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[42]);
}

// ===================================================================

class LogicRegToDbSvrAck::_Internal {
 public:
};

LogicRegToDbSvrAck::LogicRegToDbSvrAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicRegToDbSvrAck)
}
LogicRegToDbSvrAck::LogicRegToDbSvrAck(const LogicRegToDbSvrAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicRegToDbSvrAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicRegToDbSvrAck)
}

inline void LogicRegToDbSvrAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicRegToDbSvrAck::~LogicRegToDbSvrAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicRegToDbSvrAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicRegToDbSvrAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogicRegToDbSvrAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicRegToDbSvrAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicRegToDbSvrAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicRegToDbSvrAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicRegToDbSvrAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicRegToDbSvrAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicRegToDbSvrAck)
  return target;
}

size_t LogicRegToDbSvrAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicRegToDbSvrAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicRegToDbSvrAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicRegToDbSvrAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicRegToDbSvrAck::GetClassData() const { return &_class_data_; }


void LogicRegToDbSvrAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicRegToDbSvrAck*>(&to_msg);
  auto& from = static_cast<const LogicRegToDbSvrAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicRegToDbSvrAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicRegToDbSvrAck::CopyFrom(const LogicRegToDbSvrAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicRegToDbSvrAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicRegToDbSvrAck::IsInitialized() const {
  return true;
}

void LogicRegToDbSvrAck::InternalSwap(LogicRegToDbSvrAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicRegToDbSvrAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[43]);
}

// ===================================================================

class LogicUpdateInfoReq::_Internal {
 public:
};

LogicUpdateInfoReq::LogicUpdateInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicUpdateInfoReq)
}
LogicUpdateInfoReq::LogicUpdateInfoReq(const LogicUpdateInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicUpdateInfoReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){}
    , decltype(_impl_.maxonline_){}
    , decltype(_impl_.curonline_){}
    , decltype(_impl_.totalnum_){}
    , decltype(_impl_.cachenum_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.dberrcnt_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.serverid_, &from._impl_.serverid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dberrcnt_) -
    reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.dberrcnt_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicUpdateInfoReq)
}

inline void LogicUpdateInfoReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){0}
    , decltype(_impl_.maxonline_){0}
    , decltype(_impl_.curonline_){0}
    , decltype(_impl_.totalnum_){0}
    , decltype(_impl_.cachenum_){0}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.dberrcnt_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogicUpdateInfoReq::~LogicUpdateInfoReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicUpdateInfoReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicUpdateInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
}

void LogicUpdateInfoReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicUpdateInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicUpdateInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  ::memset(&_impl_.serverid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dberrcnt_) -
      reinterpret_cast<char*>(&_impl_.serverid_)) + sizeof(_impl_.dberrcnt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicUpdateInfoReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ServerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ServerName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.LogicUpdateInfoReq.ServerName"));
        } else
          goto handle_unusual;
        continue;
      // int32 MaxOnline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.maxonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CurOnline = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.curonline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TotalNum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.totalnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 CacheNum = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cachenum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 DbErrCnt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.dberrcnt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicUpdateInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicUpdateInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.LogicUpdateInfoReq.ServerName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  // int32 MaxOnline = 3;
  if (this->_internal_maxonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_maxonline(), target);
  }

  // int32 CurOnline = 4;
  if (this->_internal_curonline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_curonline(), target);
  }

  // int32 TotalNum = 5;
  if (this->_internal_totalnum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_totalnum(), target);
  }

  // int32 CacheNum = 6;
  if (this->_internal_cachenum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_cachenum(), target);
  }

  // int32 Status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_status(), target);
  }

  // int32 DbErrCnt = 8;
  if (this->_internal_dberrcnt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_dberrcnt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicUpdateInfoReq)
  return target;
}

size_t LogicUpdateInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicUpdateInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServerName = 2;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // int32 ServerID = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serverid());
  }

  // int32 MaxOnline = 3;
  if (this->_internal_maxonline() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_maxonline());
  }

  // int32 CurOnline = 4;
  if (this->_internal_curonline() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curonline());
  }

  // int32 TotalNum = 5;
  if (this->_internal_totalnum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_totalnum());
  }

  // int32 CacheNum = 6;
  if (this->_internal_cachenum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cachenum());
  }

  // int32 Status = 7;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 DbErrCnt = 8;
  if (this->_internal_dberrcnt() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dberrcnt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicUpdateInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicUpdateInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicUpdateInfoReq::GetClassData() const { return &_class_data_; }


void LogicUpdateInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicUpdateInfoReq*>(&to_msg);
  auto& from = static_cast<const LogicUpdateInfoReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicUpdateInfoReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  if (from._internal_maxonline() != 0) {
    _this->_internal_set_maxonline(from._internal_maxonline());
  }
  if (from._internal_curonline() != 0) {
    _this->_internal_set_curonline(from._internal_curonline());
  }
  if (from._internal_totalnum() != 0) {
    _this->_internal_set_totalnum(from._internal_totalnum());
  }
  if (from._internal_cachenum() != 0) {
    _this->_internal_set_cachenum(from._internal_cachenum());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_dberrcnt() != 0) {
    _this->_internal_set_dberrcnt(from._internal_dberrcnt());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicUpdateInfoReq::CopyFrom(const LogicUpdateInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicUpdateInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicUpdateInfoReq::IsInitialized() const {
  return true;
}

void LogicUpdateInfoReq::InternalSwap(LogicUpdateInfoReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicUpdateInfoReq, _impl_.dberrcnt_)
      + sizeof(LogicUpdateInfoReq::_impl_.dberrcnt_)
      - PROTOBUF_FIELD_OFFSET(LogicUpdateInfoReq, _impl_.serverid_)>(
          reinterpret_cast<char*>(&_impl_.serverid_),
          reinterpret_cast<char*>(&other->_impl_.serverid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicUpdateInfoReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[44]);
}

// ===================================================================

class LogicUpdateInfoAck::_Internal {
 public:
};

LogicUpdateInfoAck::LogicUpdateInfoAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.LogicUpdateInfoAck)
}
LogicUpdateInfoAck::LogicUpdateInfoAck(const LogicUpdateInfoAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogicUpdateInfoAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.svropentime_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.svropentime_, &from._impl_.svropentime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.svropentime_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.LogicUpdateInfoAck)
}

inline void LogicUpdateInfoAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.svropentime_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LogicUpdateInfoAck::~LogicUpdateInfoAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.LogicUpdateInfoAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogicUpdateInfoAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LogicUpdateInfoAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogicUpdateInfoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.LogicUpdateInfoAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.svropentime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retcode_) -
      reinterpret_cast<char*>(&_impl_.svropentime_)) + sizeof(_impl_.retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogicUpdateInfoAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 SvrOpenTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.svropentime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogicUpdateInfoAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.LogicUpdateInfoAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 SvrOpenTime = 2;
  if (this->_internal_svropentime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_svropentime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.LogicUpdateInfoAck)
  return target;
}

size_t LogicUpdateInfoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.LogicUpdateInfoAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 SvrOpenTime = 2;
  if (this->_internal_svropentime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_svropentime());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogicUpdateInfoAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogicUpdateInfoAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogicUpdateInfoAck::GetClassData() const { return &_class_data_; }


void LogicUpdateInfoAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogicUpdateInfoAck*>(&to_msg);
  auto& from = static_cast<const LogicUpdateInfoAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.LogicUpdateInfoAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_svropentime() != 0) {
    _this->_internal_set_svropentime(from._internal_svropentime());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogicUpdateInfoAck::CopyFrom(const LogicUpdateInfoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.LogicUpdateInfoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicUpdateInfoAck::IsInitialized() const {
  return true;
}

void LogicUpdateInfoAck::InternalSwap(LogicUpdateInfoAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogicUpdateInfoAck, _impl_.retcode_)
      + sizeof(LogicUpdateInfoAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(LogicUpdateInfoAck, _impl_.svropentime_)>(
          reinterpret_cast<char*>(&_impl_.svropentime_),
          reinterpret_cast<char*>(&other->_impl_.svropentime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicUpdateInfoAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[45]);
}

// ===================================================================

class SetupEquipReq::_Internal {
 public:
};

SetupEquipReq::SetupEquipReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupEquipReq)
}
SetupEquipReq::SetupEquipReq(const SetupEquipReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupEquipReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipguid_){}
    , decltype(_impl_.bagguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.equipguid_, &from._impl_.equipguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bagguid_) -
    reinterpret_cast<char*>(&_impl_.equipguid_)) + sizeof(_impl_.bagguid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupEquipReq)
}

inline void SetupEquipReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipguid_){uint64_t{0u}}
    , decltype(_impl_.bagguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupEquipReq::~SetupEquipReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupEquipReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupEquipReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupEquipReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupEquipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupEquipReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.equipguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bagguid_) -
      reinterpret_cast<char*>(&_impl_.equipguid_)) + sizeof(_impl_.bagguid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupEquipReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 EquipGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.equipguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 BagGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupEquipReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupEquipReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->_internal_equipguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_equipguid(), target);
  }

  // uint64 BagGuid = 2;
  if (this->_internal_bagguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bagguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupEquipReq)
  return target;
}

size_t SetupEquipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupEquipReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->_internal_equipguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_equipguid());
  }

  // uint64 BagGuid = 2;
  if (this->_internal_bagguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bagguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupEquipReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupEquipReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupEquipReq::GetClassData() const { return &_class_data_; }


void SetupEquipReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupEquipReq*>(&to_msg);
  auto& from = static_cast<const SetupEquipReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupEquipReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_equipguid() != 0) {
    _this->_internal_set_equipguid(from._internal_equipguid());
  }
  if (from._internal_bagguid() != 0) {
    _this->_internal_set_bagguid(from._internal_bagguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupEquipReq::CopyFrom(const SetupEquipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupEquipReq::IsInitialized() const {
  return true;
}

void SetupEquipReq::InternalSwap(SetupEquipReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupEquipReq, _impl_.bagguid_)
      + sizeof(SetupEquipReq::_impl_.bagguid_)
      - PROTOBUF_FIELD_OFFSET(SetupEquipReq, _impl_.equipguid_)>(
          reinterpret_cast<char*>(&_impl_.equipguid_),
          reinterpret_cast<char*>(&other->_impl_.equipguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupEquipReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[46]);
}

// ===================================================================

class SetupEquipAck::_Internal {
 public:
};

SetupEquipAck::SetupEquipAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupEquipAck)
}
SetupEquipAck::SetupEquipAck(const SetupEquipAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupEquipAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupEquipAck)
}

inline void SetupEquipAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupEquipAck::~SetupEquipAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupEquipAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupEquipAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupEquipAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupEquipAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupEquipAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupEquipAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupEquipAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupEquipAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupEquipAck)
  return target;
}

size_t SetupEquipAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupEquipAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupEquipAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupEquipAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupEquipAck::GetClassData() const { return &_class_data_; }


void SetupEquipAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupEquipAck*>(&to_msg);
  auto& from = static_cast<const SetupEquipAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupEquipAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupEquipAck::CopyFrom(const SetupEquipAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupEquipAck::IsInitialized() const {
  return true;
}

void SetupEquipAck::InternalSwap(SetupEquipAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupEquipAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[47]);
}

// ===================================================================

class Msg_GiftCodeReq::_Internal {
 public:
};

Msg_GiftCodeReq::Msg_GiftCodeReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_GiftCodeReq)
}
Msg_GiftCodeReq::Msg_GiftCodeReq(const Msg_GiftCodeReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_GiftCodeReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.giftcode_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.areaid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.giftcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.giftcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_giftcode().empty()) {
    _this->_impl_.giftcode_.Set(from._internal_giftcode(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areaid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.areaid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_GiftCodeReq)
}

inline void Msg_GiftCodeReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.giftcode_){}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.accountid_){uint64_t{0u}}
    , decltype(_impl_.channel_){0u}
    , decltype(_impl_.areaid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.giftcode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.giftcode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_GiftCodeReq::~Msg_GiftCodeReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_GiftCodeReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_GiftCodeReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.giftcode_.Destroy();
}

void Msg_GiftCodeReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_GiftCodeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_GiftCodeReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.giftcode_.ClearToEmpty();
  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.areaid_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.areaid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GiftCodeReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string GiftCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_giftcode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.Msg_GiftCodeReq.GiftCode"));
        } else
          goto handle_unusual;
        continue;
      // uint32 Channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 AccountID = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 AreaID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GiftCodeReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_GiftCodeReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_roleid(), target);
  }

  // string GiftCode = 2;
  if (!this->_internal_giftcode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_giftcode().data(), static_cast<int>(this->_internal_giftcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.Msg_GiftCodeReq.GiftCode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_giftcode(), target);
  }

  // uint32 Channel = 3;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_channel(), target);
  }

  // uint64 AccountID = 4;
  if (this->_internal_accountid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_accountid(), target);
  }

  // int32 AreaID = 5;
  if (this->_internal_areaid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_areaid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_GiftCodeReq)
  return target;
}

size_t Msg_GiftCodeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_GiftCodeReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string GiftCode = 2;
  if (!this->_internal_giftcode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_giftcode());
  }

  // uint64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint64 AccountID = 4;
  if (this->_internal_accountid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_accountid());
  }

  // uint32 Channel = 3;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  // int32 AreaID = 5;
  if (this->_internal_areaid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GiftCodeReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_GiftCodeReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GiftCodeReq::GetClassData() const { return &_class_data_; }


void Msg_GiftCodeReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_GiftCodeReq*>(&to_msg);
  auto& from = static_cast<const Msg_GiftCodeReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_GiftCodeReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_giftcode().empty()) {
    _this->_internal_set_giftcode(from._internal_giftcode());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_accountid() != 0) {
    _this->_internal_set_accountid(from._internal_accountid());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_areaid() != 0) {
    _this->_internal_set_areaid(from._internal_areaid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GiftCodeReq::CopyFrom(const Msg_GiftCodeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_GiftCodeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GiftCodeReq::IsInitialized() const {
  return true;
}

void Msg_GiftCodeReq::InternalSwap(Msg_GiftCodeReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.giftcode_, lhs_arena,
      &other->_impl_.giftcode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GiftCodeReq, _impl_.areaid_)
      + sizeof(Msg_GiftCodeReq::_impl_.areaid_)
      - PROTOBUF_FIELD_OFFSET(Msg_GiftCodeReq, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GiftCodeReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[48]);
}

// ===================================================================

class Msg_GiftCodeAck::_Internal {
 public:
};

void Msg_GiftCodeAck::clear_items() {
  _impl_.items_.Clear();
}
Msg_GiftCodeAck::Msg_GiftCodeAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_GiftCodeAck)
}
Msg_GiftCodeAck::Msg_GiftCodeAck(const Msg_GiftCodeAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_GiftCodeAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retcode_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.retcode_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_GiftCodeAck)
}

inline void Msg_GiftCodeAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.roleid_){uint64_t{0u}}
    , decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_GiftCodeAck::~Msg_GiftCodeAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_GiftCodeAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_GiftCodeAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void Msg_GiftCodeAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_GiftCodeAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_GiftCodeAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.retcode_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.retcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GiftCodeAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 RoleID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .symphony.proto.ItemData items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GiftCodeAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_GiftCodeAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_roleid(), target);
  }

  // repeated .symphony.proto.ItemData items = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_GiftCodeAck)
  return target;
}

size_t Msg_GiftCodeAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_GiftCodeAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.ItemData items = 3;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 RoleID = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_roleid());
  }

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GiftCodeAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_GiftCodeAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GiftCodeAck::GetClassData() const { return &_class_data_; }


void Msg_GiftCodeAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_GiftCodeAck*>(&to_msg);
  auto& from = static_cast<const Msg_GiftCodeAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_GiftCodeAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GiftCodeAck::CopyFrom(const Msg_GiftCodeAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_GiftCodeAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GiftCodeAck::IsInitialized() const {
  return true;
}

void Msg_GiftCodeAck::InternalSwap(Msg_GiftCodeAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_GiftCodeAck, _impl_.retcode_)
      + sizeof(Msg_GiftCodeAck::_impl_.retcode_)
      - PROTOBUF_FIELD_OFFSET(Msg_GiftCodeAck, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GiftCodeAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[49]);
}

// ===================================================================

class UnsetEquipReq::_Internal {
 public:
};

UnsetEquipReq::UnsetEquipReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetEquipReq)
}
UnsetEquipReq::UnsetEquipReq(const UnsetEquipReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetEquipReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.equipguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.equipguid_ = from._impl_.equipguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetEquipReq)
}

inline void UnsetEquipReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.equipguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetEquipReq::~UnsetEquipReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetEquipReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetEquipReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetEquipReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetEquipReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetEquipReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEquipReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 EquipGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.equipguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetEquipReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetEquipReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->_internal_equipguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_equipguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetEquipReq)
  return target;
}

size_t UnsetEquipReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetEquipReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 EquipGuid = 1;
  if (this->_internal_equipguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_equipguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetEquipReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetEquipReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetEquipReq::GetClassData() const { return &_class_data_; }


void UnsetEquipReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetEquipReq*>(&to_msg);
  auto& from = static_cast<const UnsetEquipReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetEquipReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_equipguid() != 0) {
    _this->_internal_set_equipguid(from._internal_equipguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetEquipReq::CopyFrom(const UnsetEquipReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetEquipReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEquipReq::IsInitialized() const {
  return true;
}

void UnsetEquipReq::InternalSwap(UnsetEquipReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.equipguid_, other->_impl_.equipguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEquipReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[50]);
}

// ===================================================================

class UnsetEquipAck::_Internal {
 public:
};

UnsetEquipAck::UnsetEquipAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetEquipAck)
}
UnsetEquipAck::UnsetEquipAck(const UnsetEquipAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetEquipAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetEquipAck)
}

inline void UnsetEquipAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetEquipAck::~UnsetEquipAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetEquipAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetEquipAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetEquipAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetEquipAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetEquipAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetEquipAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetEquipAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetEquipAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetEquipAck)
  return target;
}

size_t UnsetEquipAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetEquipAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetEquipAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetEquipAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetEquipAck::GetClassData() const { return &_class_data_; }


void UnsetEquipAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetEquipAck*>(&to_msg);
  auto& from = static_cast<const UnsetEquipAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetEquipAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetEquipAck::CopyFrom(const UnsetEquipAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetEquipAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetEquipAck::IsInitialized() const {
  return true;
}

void UnsetEquipAck::InternalSwap(UnsetEquipAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetEquipAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[51]);
}

// ===================================================================

class SetupGemReq::_Internal {
 public:
};

SetupGemReq::SetupGemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupGemReq)
}
SetupGemReq::SetupGemReq(const SetupGemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupGemReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gemguid_){}
    , decltype(_impl_.bagguid_){}
    , decltype(_impl_.targetpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gemguid_, &from._impl_.gemguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetpos_) -
    reinterpret_cast<char*>(&_impl_.gemguid_)) + sizeof(_impl_.targetpos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupGemReq)
}

inline void SetupGemReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gemguid_){uint64_t{0u}}
    , decltype(_impl_.bagguid_){uint64_t{0u}}
    , decltype(_impl_.targetpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupGemReq::~SetupGemReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupGemReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupGemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupGemReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupGemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupGemReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.gemguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.targetpos_) -
      reinterpret_cast<char*>(&_impl_.gemguid_)) + sizeof(_impl_.targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupGemReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 GemGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 BagGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bagguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TargetPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupGemReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupGemReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->_internal_gemguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gemguid(), target);
  }

  // uint64 BagGuid = 2;
  if (this->_internal_bagguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bagguid(), target);
  }

  // int32 TargetPos = 3;
  if (this->_internal_targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupGemReq)
  return target;
}

size_t SetupGemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupGemReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->_internal_gemguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gemguid());
  }

  // uint64 BagGuid = 2;
  if (this->_internal_bagguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_bagguid());
  }

  // int32 TargetPos = 3;
  if (this->_internal_targetpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupGemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupGemReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupGemReq::GetClassData() const { return &_class_data_; }


void SetupGemReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupGemReq*>(&to_msg);
  auto& from = static_cast<const SetupGemReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupGemReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gemguid() != 0) {
    _this->_internal_set_gemguid(from._internal_gemguid());
  }
  if (from._internal_bagguid() != 0) {
    _this->_internal_set_bagguid(from._internal_bagguid());
  }
  if (from._internal_targetpos() != 0) {
    _this->_internal_set_targetpos(from._internal_targetpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupGemReq::CopyFrom(const SetupGemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupGemReq::IsInitialized() const {
  return true;
}

void SetupGemReq::InternalSwap(SetupGemReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupGemReq, _impl_.targetpos_)
      + sizeof(SetupGemReq::_impl_.targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupGemReq, _impl_.gemguid_)>(
          reinterpret_cast<char*>(&_impl_.gemguid_),
          reinterpret_cast<char*>(&other->_impl_.gemguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupGemReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[52]);
}

// ===================================================================

class SetupGemAck::_Internal {
 public:
};

SetupGemAck::SetupGemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupGemAck)
}
SetupGemAck::SetupGemAck(const SetupGemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupGemAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupGemAck)
}

inline void SetupGemAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupGemAck::~SetupGemAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupGemAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupGemAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupGemAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupGemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupGemAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupGemAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupGemAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupGemAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupGemAck)
  return target;
}

size_t SetupGemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupGemAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupGemAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupGemAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupGemAck::GetClassData() const { return &_class_data_; }


void SetupGemAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupGemAck*>(&to_msg);
  auto& from = static_cast<const SetupGemAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupGemAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupGemAck::CopyFrom(const SetupGemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupGemAck::IsInitialized() const {
  return true;
}

void SetupGemAck::InternalSwap(SetupGemAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupGemAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[53]);
}

// ===================================================================

class UnsetGemReq::_Internal {
 public:
};

UnsetGemReq::UnsetGemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetGemReq)
}
UnsetGemReq::UnsetGemReq(const UnsetGemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetGemReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gemguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gemguid_ = from._impl_.gemguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetGemReq)
}

inline void UnsetGemReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gemguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetGemReq::~UnsetGemReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetGemReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetGemReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetGemReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetGemReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetGemReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gemguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetGemReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 GemGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gemguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetGemReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetGemReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->_internal_gemguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_gemguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetGemReq)
  return target;
}

size_t UnsetGemReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetGemReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 GemGuid = 1;
  if (this->_internal_gemguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gemguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetGemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetGemReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetGemReq::GetClassData() const { return &_class_data_; }


void UnsetGemReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetGemReq*>(&to_msg);
  auto& from = static_cast<const UnsetGemReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetGemReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gemguid() != 0) {
    _this->_internal_set_gemguid(from._internal_gemguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetGemReq::CopyFrom(const UnsetGemReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetGemReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetGemReq::IsInitialized() const {
  return true;
}

void UnsetGemReq::InternalSwap(UnsetGemReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gemguid_, other->_impl_.gemguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetGemReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[54]);
}

// ===================================================================

class UnsetGemAck::_Internal {
 public:
};

UnsetGemAck::UnsetGemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetGemAck)
}
UnsetGemAck::UnsetGemAck(const UnsetGemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetGemAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetGemAck)
}

inline void UnsetGemAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetGemAck::~UnsetGemAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetGemAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetGemAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetGemAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetGemAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetGemAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetGemAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetGemAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetGemAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetGemAck)
  return target;
}

size_t UnsetGemAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetGemAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetGemAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetGemAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetGemAck::GetClassData() const { return &_class_data_; }


void UnsetGemAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetGemAck*>(&to_msg);
  auto& from = static_cast<const UnsetGemAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetGemAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetGemAck::CopyFrom(const UnsetGemAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetGemAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetGemAck::IsInitialized() const {
  return true;
}

void UnsetGemAck::InternalSwap(UnsetGemAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetGemAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[55]);
}

// ===================================================================

class SetupPartnerReq::_Internal {
 public:
};

SetupPartnerReq::SetupPartnerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupPartnerReq)
}
SetupPartnerReq::SetupPartnerReq(const SetupPartnerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupPartnerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partnerguid_){}
    , decltype(_impl_.targetpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.partnerguid_, &from._impl_.partnerguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetpos_) -
    reinterpret_cast<char*>(&_impl_.partnerguid_)) + sizeof(_impl_.targetpos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupPartnerReq)
}

inline void SetupPartnerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partnerguid_){uint64_t{0u}}
    , decltype(_impl_.targetpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupPartnerReq::~SetupPartnerReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupPartnerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupPartnerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupPartnerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupPartnerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupPartnerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.partnerguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.targetpos_) -
      reinterpret_cast<char*>(&_impl_.partnerguid_)) + sizeof(_impl_.targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPartnerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PartnerGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.partnerguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TargetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupPartnerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupPartnerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->_internal_partnerguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_partnerguid(), target);
  }

  // int32 TargetPos = 2;
  if (this->_internal_targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupPartnerReq)
  return target;
}

size_t SetupPartnerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupPartnerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PartnerGuid = 1;
  if (this->_internal_partnerguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_partnerguid());
  }

  // int32 TargetPos = 2;
  if (this->_internal_targetpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupPartnerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupPartnerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupPartnerReq::GetClassData() const { return &_class_data_; }


void SetupPartnerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupPartnerReq*>(&to_msg);
  auto& from = static_cast<const SetupPartnerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupPartnerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_partnerguid() != 0) {
    _this->_internal_set_partnerguid(from._internal_partnerguid());
  }
  if (from._internal_targetpos() != 0) {
    _this->_internal_set_targetpos(from._internal_targetpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupPartnerReq::CopyFrom(const SetupPartnerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPartnerReq::IsInitialized() const {
  return true;
}

void SetupPartnerReq::InternalSwap(SetupPartnerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupPartnerReq, _impl_.targetpos_)
      + sizeof(SetupPartnerReq::_impl_.targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupPartnerReq, _impl_.partnerguid_)>(
          reinterpret_cast<char*>(&_impl_.partnerguid_),
          reinterpret_cast<char*>(&other->_impl_.partnerguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPartnerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[56]);
}

// ===================================================================

class SetupPartnerAck::_Internal {
 public:
};

SetupPartnerAck::SetupPartnerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupPartnerAck)
}
SetupPartnerAck::SetupPartnerAck(const SetupPartnerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupPartnerAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupPartnerAck)
}

inline void SetupPartnerAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupPartnerAck::~SetupPartnerAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupPartnerAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupPartnerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupPartnerAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupPartnerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupPartnerAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPartnerAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupPartnerAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupPartnerAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupPartnerAck)
  return target;
}

size_t SetupPartnerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupPartnerAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupPartnerAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupPartnerAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupPartnerAck::GetClassData() const { return &_class_data_; }


void SetupPartnerAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupPartnerAck*>(&to_msg);
  auto& from = static_cast<const SetupPartnerAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupPartnerAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupPartnerAck::CopyFrom(const SetupPartnerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPartnerAck::IsInitialized() const {
  return true;
}

void SetupPartnerAck::InternalSwap(SetupPartnerAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPartnerAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[57]);
}

// ===================================================================

class UnsetPartnerReq::_Internal {
 public:
};

UnsetPartnerReq::UnsetPartnerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetPartnerReq)
}
UnsetPartnerReq::UnsetPartnerReq(const UnsetPartnerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetPartnerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.targetpos_ = from._impl_.targetpos_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetPartnerReq)
}

inline void UnsetPartnerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetPartnerReq::~UnsetPartnerReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetPartnerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetPartnerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetPartnerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetPartnerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetPartnerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targetpos_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPartnerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 TargetPos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetPartnerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetPartnerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 TargetPos = 1;
  if (this->_internal_targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetPartnerReq)
  return target;
}

size_t UnsetPartnerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetPartnerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 TargetPos = 1;
  if (this->_internal_targetpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetPartnerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetPartnerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetPartnerReq::GetClassData() const { return &_class_data_; }


void UnsetPartnerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetPartnerReq*>(&to_msg);
  auto& from = static_cast<const UnsetPartnerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetPartnerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_targetpos() != 0) {
    _this->_internal_set_targetpos(from._internal_targetpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetPartnerReq::CopyFrom(const UnsetPartnerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetPartnerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPartnerReq::IsInitialized() const {
  return true;
}

void UnsetPartnerReq::InternalSwap(UnsetPartnerReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.targetpos_, other->_impl_.targetpos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPartnerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[58]);
}

// ===================================================================

class UnsetPartnerAck::_Internal {
 public:
};

UnsetPartnerAck::UnsetPartnerAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetPartnerAck)
}
UnsetPartnerAck::UnsetPartnerAck(const UnsetPartnerAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetPartnerAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetPartnerAck)
}

inline void UnsetPartnerAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetPartnerAck::~UnsetPartnerAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetPartnerAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetPartnerAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetPartnerAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetPartnerAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetPartnerAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPartnerAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetPartnerAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetPartnerAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetPartnerAck)
  return target;
}

size_t UnsetPartnerAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetPartnerAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetPartnerAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetPartnerAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetPartnerAck::GetClassData() const { return &_class_data_; }


void UnsetPartnerAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetPartnerAck*>(&to_msg);
  auto& from = static_cast<const UnsetPartnerAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetPartnerAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetPartnerAck::CopyFrom(const UnsetPartnerAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetPartnerAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPartnerAck::IsInitialized() const {
  return true;
}

void UnsetPartnerAck::InternalSwap(UnsetPartnerAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPartnerAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[59]);
}

// ===================================================================

class SetupMountReq::_Internal {
 public:
};

SetupMountReq::SetupMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupMountReq)
}
SetupMountReq::SetupMountReq(const SetupMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupMountReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mountguid_){}
    , decltype(_impl_.targetpos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mountguid_, &from._impl_.mountguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.targetpos_) -
    reinterpret_cast<char*>(&_impl_.mountguid_)) + sizeof(_impl_.targetpos_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupMountReq)
}

inline void SetupMountReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mountguid_){uint64_t{0u}}
    , decltype(_impl_.targetpos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupMountReq::~SetupMountReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupMountReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupMountReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupMountReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.mountguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.targetpos_) -
      reinterpret_cast<char*>(&_impl_.mountguid_)) + sizeof(_impl_.targetpos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMountReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 MountGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mountguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 TargetPos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetpos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupMountReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupMountReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->_internal_mountguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mountguid(), target);
  }

  // int32 TargetPos = 2;
  if (this->_internal_targetpos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_targetpos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupMountReq)
  return target;
}

size_t SetupMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupMountReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->_internal_mountguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mountguid());
  }

  // int32 TargetPos = 2;
  if (this->_internal_targetpos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetpos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMountReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupMountReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMountReq::GetClassData() const { return &_class_data_; }


void SetupMountReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupMountReq*>(&to_msg);
  auto& from = static_cast<const SetupMountReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupMountReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mountguid() != 0) {
    _this->_internal_set_mountguid(from._internal_mountguid());
  }
  if (from._internal_targetpos() != 0) {
    _this->_internal_set_targetpos(from._internal_targetpos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMountReq::CopyFrom(const SetupMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMountReq::IsInitialized() const {
  return true;
}

void SetupMountReq::InternalSwap(SetupMountReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupMountReq, _impl_.targetpos_)
      + sizeof(SetupMountReq::_impl_.targetpos_)
      - PROTOBUF_FIELD_OFFSET(SetupMountReq, _impl_.mountguid_)>(
          reinterpret_cast<char*>(&_impl_.mountguid_),
          reinterpret_cast<char*>(&other->_impl_.mountguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMountReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[60]);
}

// ===================================================================

class SetupMountAck::_Internal {
 public:
};

SetupMountAck::SetupMountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupMountAck)
}
SetupMountAck::SetupMountAck(const SetupMountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupMountAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupMountAck)
}

inline void SetupMountAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupMountAck::~SetupMountAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupMountAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupMountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupMountAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupMountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupMountAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMountAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupMountAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupMountAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupMountAck)
  return target;
}

size_t SetupMountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupMountAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMountAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupMountAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMountAck::GetClassData() const { return &_class_data_; }


void SetupMountAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupMountAck*>(&to_msg);
  auto& from = static_cast<const SetupMountAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupMountAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMountAck::CopyFrom(const SetupMountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMountAck::IsInitialized() const {
  return true;
}

void SetupMountAck::InternalSwap(SetupMountAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMountAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[61]);
}

// ===================================================================

class UnsetMountReq::_Internal {
 public:
};

UnsetMountReq::UnsetMountReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetMountReq)
}
UnsetMountReq::UnsetMountReq(const UnsetMountReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetMountReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mountguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.mountguid_ = from._impl_.mountguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetMountReq)
}

inline void UnsetMountReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mountguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetMountReq::~UnsetMountReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetMountReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetMountReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetMountReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetMountReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetMountReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mountguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetMountReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 MountGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.mountguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetMountReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetMountReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->_internal_mountguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mountguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetMountReq)
  return target;
}

size_t UnsetMountReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetMountReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 MountGuid = 1;
  if (this->_internal_mountguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_mountguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetMountReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetMountReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetMountReq::GetClassData() const { return &_class_data_; }


void UnsetMountReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetMountReq*>(&to_msg);
  auto& from = static_cast<const UnsetMountReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetMountReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mountguid() != 0) {
    _this->_internal_set_mountguid(from._internal_mountguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetMountReq::CopyFrom(const UnsetMountReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetMountReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetMountReq::IsInitialized() const {
  return true;
}

void UnsetMountReq::InternalSwap(UnsetMountReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.mountguid_, other->_impl_.mountguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetMountReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[62]);
}

// ===================================================================

class UnsetMountAck::_Internal {
 public:
};

UnsetMountAck::UnsetMountAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetMountAck)
}
UnsetMountAck::UnsetMountAck(const UnsetMountAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetMountAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetMountAck)
}

inline void UnsetMountAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetMountAck::~UnsetMountAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetMountAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetMountAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetMountAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetMountAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetMountAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetMountAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetMountAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetMountAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetMountAck)
  return target;
}

size_t UnsetMountAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetMountAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetMountAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetMountAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetMountAck::GetClassData() const { return &_class_data_; }


void UnsetMountAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetMountAck*>(&to_msg);
  auto& from = static_cast<const UnsetMountAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetMountAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetMountAck::CopyFrom(const UnsetMountAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetMountAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetMountAck::IsInitialized() const {
  return true;
}

void UnsetMountAck::InternalSwap(UnsetMountAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetMountAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[63]);
}

// ===================================================================

class SetupPetReq::_Internal {
 public:
};

SetupPetReq::SetupPetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupPetReq)
}
SetupPetReq::SetupPetReq(const SetupPetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupPetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.petguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.petguid_ = from._impl_.petguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupPetReq)
}

inline void SetupPetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.petguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupPetReq::~SetupPetReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupPetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupPetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupPetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupPetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupPetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.petguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupPetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupPetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupPetReq)
  return target;
}

size_t SetupPetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupPetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_petguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupPetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupPetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupPetReq::GetClassData() const { return &_class_data_; }


void SetupPetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupPetReq*>(&to_msg);
  auto& from = static_cast<const SetupPetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupPetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_petguid() != 0) {
    _this->_internal_set_petguid(from._internal_petguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupPetReq::CopyFrom(const SetupPetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPetReq::IsInitialized() const {
  return true;
}

void SetupPetReq::InternalSwap(SetupPetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.petguid_, other->_impl_.petguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[64]);
}

// ===================================================================

class SetupPetAck::_Internal {
 public:
};

SetupPetAck::SetupPetAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.SetupPetAck)
}
SetupPetAck::SetupPetAck(const SetupPetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetupPetAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.SetupPetAck)
}

inline void SetupPetAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetupPetAck::~SetupPetAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.SetupPetAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetupPetAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetupPetAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetupPetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.SetupPetAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupPetAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetupPetAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.SetupPetAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.SetupPetAck)
  return target;
}

size_t SetupPetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.SetupPetAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupPetAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetupPetAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupPetAck::GetClassData() const { return &_class_data_; }


void SetupPetAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetupPetAck*>(&to_msg);
  auto& from = static_cast<const SetupPetAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.SetupPetAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupPetAck::CopyFrom(const SetupPetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.SetupPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupPetAck::IsInitialized() const {
  return true;
}

void SetupPetAck::InternalSwap(SetupPetAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupPetAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[65]);
}

// ===================================================================

class UnsetPetReq::_Internal {
 public:
};

UnsetPetReq::UnsetPetReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetPetReq)
}
UnsetPetReq::UnsetPetReq(const UnsetPetReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetPetReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.petguid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.petguid_ = from._impl_.petguid_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetPetReq)
}

inline void UnsetPetReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.petguid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetPetReq::~UnsetPetReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetPetReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetPetReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetPetReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetPetReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetPetReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.petguid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPetReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 PetGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.petguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetPetReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetPetReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_petguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetPetReq)
  return target;
}

size_t UnsetPetReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetPetReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 PetGuid = 1;
  if (this->_internal_petguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_petguid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetPetReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetPetReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetPetReq::GetClassData() const { return &_class_data_; }


void UnsetPetReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetPetReq*>(&to_msg);
  auto& from = static_cast<const UnsetPetReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetPetReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_petguid() != 0) {
    _this->_internal_set_petguid(from._internal_petguid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetPetReq::CopyFrom(const UnsetPetReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetPetReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPetReq::IsInitialized() const {
  return true;
}

void UnsetPetReq::InternalSwap(UnsetPetReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.petguid_, other->_impl_.petguid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPetReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[66]);
}

// ===================================================================

class UnsetPetAck::_Internal {
 public:
};

UnsetPetAck::UnsetPetAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UnsetPetAck)
}
UnsetPetAck::UnsetPetAck(const UnsetPetAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UnsetPetAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UnsetPetAck)
}

inline void UnsetPetAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UnsetPetAck::~UnsetPetAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.UnsetPetAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnsetPetAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnsetPetAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnsetPetAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.UnsetPetAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsetPetAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsetPetAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.UnsetPetAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.UnsetPetAck)
  return target;
}

size_t UnsetPetAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.UnsetPetAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsetPetAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UnsetPetAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsetPetAck::GetClassData() const { return &_class_data_; }


void UnsetPetAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UnsetPetAck*>(&to_msg);
  auto& from = static_cast<const UnsetPetAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.UnsetPetAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsetPetAck::CopyFrom(const UnsetPetAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.UnsetPetAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsetPetAck::IsInitialized() const {
  return true;
}

void UnsetPetAck::InternalSwap(UnsetPetAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsetPetAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[67]);
}

// ===================================================================

class StoreBuyReq::_Internal {
 public:
};

StoreBuyReq::StoreBuyReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.StoreBuyReq)
}
StoreBuyReq::StoreBuyReq(const StoreBuyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreBuyReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.storetype_){}
    , decltype(_impl_.storeid_){}
    , decltype(_impl_.buynum_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.storetype_, &from._impl_.storetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buynum_) -
    reinterpret_cast<char*>(&_impl_.storetype_)) + sizeof(_impl_.buynum_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.StoreBuyReq)
}

inline void StoreBuyReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.storetype_){0}
    , decltype(_impl_.storeid_){0}
    , decltype(_impl_.buynum_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreBuyReq::~StoreBuyReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.StoreBuyReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreBuyReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StoreBuyReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreBuyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.StoreBuyReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.storetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buynum_) -
      reinterpret_cast<char*>(&_impl_.storetype_)) + sizeof(_impl_.buynum_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreBuyReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 StoreType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.storetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 StoreID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.storeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 BuyNum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.buynum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreBuyReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.StoreBuyReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 StoreType = 1;
  if (this->_internal_storetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_storetype(), target);
  }

  // int32 StoreID = 2;
  if (this->_internal_storeid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_storeid(), target);
  }

  // int32 BuyNum = 3;
  if (this->_internal_buynum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_buynum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.StoreBuyReq)
  return target;
}

size_t StoreBuyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.StoreBuyReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 StoreType = 1;
  if (this->_internal_storetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_storetype());
  }

  // int32 StoreID = 2;
  if (this->_internal_storeid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_storeid());
  }

  // int32 BuyNum = 3;
  if (this->_internal_buynum() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buynum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreBuyReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreBuyReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreBuyReq::GetClassData() const { return &_class_data_; }


void StoreBuyReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreBuyReq*>(&to_msg);
  auto& from = static_cast<const StoreBuyReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.StoreBuyReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_storetype() != 0) {
    _this->_internal_set_storetype(from._internal_storetype());
  }
  if (from._internal_storeid() != 0) {
    _this->_internal_set_storeid(from._internal_storeid());
  }
  if (from._internal_buynum() != 0) {
    _this->_internal_set_buynum(from._internal_buynum());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreBuyReq::CopyFrom(const StoreBuyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.StoreBuyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreBuyReq::IsInitialized() const {
  return true;
}

void StoreBuyReq::InternalSwap(StoreBuyReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreBuyReq, _impl_.buynum_)
      + sizeof(StoreBuyReq::_impl_.buynum_)
      - PROTOBUF_FIELD_OFFSET(StoreBuyReq, _impl_.storetype_)>(
          reinterpret_cast<char*>(&_impl_.storetype_),
          reinterpret_cast<char*>(&other->_impl_.storetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreBuyReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[68]);
}

// ===================================================================

class StoreBuyAck::_Internal {
 public:
};

StoreBuyAck::StoreBuyAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.StoreBuyAck)
}
StoreBuyAck::StoreBuyAck(const StoreBuyAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StoreBuyAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.retcode_ = from._impl_.retcode_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.StoreBuyAck)
}

inline void StoreBuyAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.retcode_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StoreBuyAck::~StoreBuyAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.StoreBuyAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreBuyAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StoreBuyAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StoreBuyAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.StoreBuyAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.retcode_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StoreBuyAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 RetCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.retcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreBuyAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.StoreBuyAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_retcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.StoreBuyAck)
  return target;
}

size_t StoreBuyAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.StoreBuyAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 RetCode = 1;
  if (this->_internal_retcode() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StoreBuyAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StoreBuyAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StoreBuyAck::GetClassData() const { return &_class_data_; }


void StoreBuyAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StoreBuyAck*>(&to_msg);
  auto& from = static_cast<const StoreBuyAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.StoreBuyAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_retcode() != 0) {
    _this->_internal_set_retcode(from._internal_retcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StoreBuyAck::CopyFrom(const StoreBuyAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.StoreBuyAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreBuyAck::IsInitialized() const {
  return true;
}

void StoreBuyAck::InternalSwap(StoreBuyAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.retcode_, other->_impl_.retcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StoreBuyAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[69]);
}

// ===================================================================

class ObjectChangeNotify::_Internal {
 public:
};

ObjectChangeNotify::ObjectChangeNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.ObjectChangeNotify)
}
ObjectChangeNotify::ObjectChangeNotify(const ObjectChangeNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ObjectChangeNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strvalue_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.intvalue1_){}
    , decltype(_impl_.intvalue2_){}
    , decltype(_impl_.changetype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.strvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strvalue().empty()) {
    _this->_impl_.strvalue_.Set(from._internal_strvalue(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.changetype_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.changetype_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.ObjectChangeNotify)
}

inline void ObjectChangeNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.strvalue_){}
    , decltype(_impl_.roleid_){int64_t{0}}
    , decltype(_impl_.intvalue1_){int64_t{0}}
    , decltype(_impl_.intvalue2_){int64_t{0}}
    , decltype(_impl_.changetype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.strvalue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.strvalue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ObjectChangeNotify::~ObjectChangeNotify() {
  // @@protoc_insertion_point(destructor:symphony.proto.ObjectChangeNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObjectChangeNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strvalue_.Destroy();
}

void ObjectChangeNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ObjectChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.ObjectChangeNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strvalue_.ClearToEmpty();
  ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.changetype_) -
      reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.changetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectChangeNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 RoleID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ChangeType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.changetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IntValue1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.intvalue1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 IntValue2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.intvalue2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string StrValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_strvalue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.ObjectChangeNotify.StrValue"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObjectChangeNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.ObjectChangeNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // int32 ChangeType = 2;
  if (this->_internal_changetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_changetype(), target);
  }

  // int64 IntValue1 = 3;
  if (this->_internal_intvalue1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_intvalue1(), target);
  }

  // int64 IntValue2 = 4;
  if (this->_internal_intvalue2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_intvalue2(), target);
  }

  // string StrValue = 5;
  if (!this->_internal_strvalue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strvalue().data(), static_cast<int>(this->_internal_strvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.ObjectChangeNotify.StrValue");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.ObjectChangeNotify)
  return target;
}

size_t ObjectChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.ObjectChangeNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string StrValue = 5;
  if (!this->_internal_strvalue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strvalue());
  }

  // int64 RoleID = 1;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  // int64 IntValue1 = 3;
  if (this->_internal_intvalue1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_intvalue1());
  }

  // int64 IntValue2 = 4;
  if (this->_internal_intvalue2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_intvalue2());
  }

  // int32 ChangeType = 2;
  if (this->_internal_changetype() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_changetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObjectChangeNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ObjectChangeNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObjectChangeNotify::GetClassData() const { return &_class_data_; }


void ObjectChangeNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ObjectChangeNotify*>(&to_msg);
  auto& from = static_cast<const ObjectChangeNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.ObjectChangeNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strvalue().empty()) {
    _this->_internal_set_strvalue(from._internal_strvalue());
  }
  if (from._internal_roleid() != 0) {
    _this->_internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_intvalue1() != 0) {
    _this->_internal_set_intvalue1(from._internal_intvalue1());
  }
  if (from._internal_intvalue2() != 0) {
    _this->_internal_set_intvalue2(from._internal_intvalue2());
  }
  if (from._internal_changetype() != 0) {
    _this->_internal_set_changetype(from._internal_changetype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObjectChangeNotify::CopyFrom(const ObjectChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.ObjectChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectChangeNotify::IsInitialized() const {
  return true;
}

void ObjectChangeNotify::InternalSwap(ObjectChangeNotify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.strvalue_, lhs_arena,
      &other->_impl_.strvalue_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectChangeNotify, _impl_.changetype_)
      + sizeof(ObjectChangeNotify::_impl_.changetype_)
      - PROTOBUF_FIELD_OFFSET(ObjectChangeNotify, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectChangeNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[70]);
}

// ===================================================================

class HitEffectItem::_Internal {
 public:
};

HitEffectItem::HitEffectItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.HitEffectItem)
}
HitEffectItem::HitEffectItem(const HitEffectItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitEffectItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.castguid_){}
    , decltype(_impl_.targetguid_){}
    , decltype(_impl_.hurtvalue_){}
    , decltype(_impl_.crit_){}
    , decltype(_impl_.hitactionid_){}
    , decltype(_impl_.hiteffectid_){}
    , decltype(_impl_.hitdistance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.castguid_, &from._impl_.castguid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hitdistance_) -
    reinterpret_cast<char*>(&_impl_.castguid_)) + sizeof(_impl_.hitdistance_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.HitEffectItem)
}

inline void HitEffectItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.castguid_){uint64_t{0u}}
    , decltype(_impl_.targetguid_){uint64_t{0u}}
    , decltype(_impl_.hurtvalue_){0}
    , decltype(_impl_.crit_){false}
    , decltype(_impl_.hitactionid_){0u}
    , decltype(_impl_.hiteffectid_){0u}
    , decltype(_impl_.hitdistance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitEffectItem::~HitEffectItem() {
  // @@protoc_insertion_point(destructor:symphony.proto.HitEffectItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitEffectItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitEffectItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitEffectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.HitEffectItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.castguid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hitdistance_) -
      reinterpret_cast<char*>(&_impl_.castguid_)) + sizeof(_impl_.hitdistance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitEffectItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 CastGuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.castguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 TargetGuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.targetguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 HurtValue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hurtvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Crit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.crit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HitActionID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hitactionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 HitEffectID = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hiteffectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float HitDistance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.hitdistance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitEffectItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.HitEffectItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 CastGuid = 1;
  if (this->_internal_castguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_castguid(), target);
  }

  // uint64 TargetGuid = 2;
  if (this->_internal_targetguid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_targetguid(), target);
  }

  // int32 HurtValue = 3;
  if (this->_internal_hurtvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hurtvalue(), target);
  }

  // bool Crit = 4;
  if (this->_internal_crit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_crit(), target);
  }

  // uint32 HitActionID = 5;
  if (this->_internal_hitactionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hitactionid(), target);
  }

  // uint32 HitEffectID = 6;
  if (this->_internal_hiteffectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hiteffectid(), target);
  }

  // float HitDistance = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hitdistance = this->_internal_hitdistance();
  uint32_t raw_hitdistance;
  memcpy(&raw_hitdistance, &tmp_hitdistance, sizeof(tmp_hitdistance));
  if (raw_hitdistance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_hitdistance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.HitEffectItem)
  return target;
}

size_t HitEffectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.HitEffectItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 CastGuid = 1;
  if (this->_internal_castguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_castguid());
  }

  // uint64 TargetGuid = 2;
  if (this->_internal_targetguid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_targetguid());
  }

  // int32 HurtValue = 3;
  if (this->_internal_hurtvalue() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hurtvalue());
  }

  // bool Crit = 4;
  if (this->_internal_crit() != 0) {
    total_size += 1 + 1;
  }

  // uint32 HitActionID = 5;
  if (this->_internal_hitactionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hitactionid());
  }

  // uint32 HitEffectID = 6;
  if (this->_internal_hiteffectid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hiteffectid());
  }

  // float HitDistance = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hitdistance = this->_internal_hitdistance();
  uint32_t raw_hitdistance;
  memcpy(&raw_hitdistance, &tmp_hitdistance, sizeof(tmp_hitdistance));
  if (raw_hitdistance != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitEffectItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitEffectItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitEffectItem::GetClassData() const { return &_class_data_; }


void HitEffectItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitEffectItem*>(&to_msg);
  auto& from = static_cast<const HitEffectItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.HitEffectItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_castguid() != 0) {
    _this->_internal_set_castguid(from._internal_castguid());
  }
  if (from._internal_targetguid() != 0) {
    _this->_internal_set_targetguid(from._internal_targetguid());
  }
  if (from._internal_hurtvalue() != 0) {
    _this->_internal_set_hurtvalue(from._internal_hurtvalue());
  }
  if (from._internal_crit() != 0) {
    _this->_internal_set_crit(from._internal_crit());
  }
  if (from._internal_hitactionid() != 0) {
    _this->_internal_set_hitactionid(from._internal_hitactionid());
  }
  if (from._internal_hiteffectid() != 0) {
    _this->_internal_set_hiteffectid(from._internal_hiteffectid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_hitdistance = from._internal_hitdistance();
  uint32_t raw_hitdistance;
  memcpy(&raw_hitdistance, &tmp_hitdistance, sizeof(tmp_hitdistance));
  if (raw_hitdistance != 0) {
    _this->_internal_set_hitdistance(from._internal_hitdistance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitEffectItem::CopyFrom(const HitEffectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.HitEffectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEffectItem::IsInitialized() const {
  return true;
}

void HitEffectItem::InternalSwap(HitEffectItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitEffectItem, _impl_.hitdistance_)
      + sizeof(HitEffectItem::_impl_.hitdistance_)
      - PROTOBUF_FIELD_OFFSET(HitEffectItem, _impl_.castguid_)>(
          reinterpret_cast<char*>(&_impl_.castguid_),
          reinterpret_cast<char*>(&other->_impl_.castguid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitEffectItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[71]);
}

// ===================================================================

class HitEffectNtf::_Internal {
 public:
};

HitEffectNtf::HitEffectNtf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.HitEffectNtf)
}
HitEffectNtf::HitEffectNtf(const HitEffectNtf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitEffectNtf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){from._impl_.itemlist_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.HitEffectNtf)
}

inline void HitEffectNtf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.itemlist_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitEffectNtf::~HitEffectNtf() {
  // @@protoc_insertion_point(destructor:symphony.proto.HitEffectNtf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitEffectNtf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.itemlist_.~RepeatedPtrField();
}

void HitEffectNtf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitEffectNtf::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.HitEffectNtf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.itemlist_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitEffectNtf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .symphony.proto.HitEffectItem ItemList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitEffectNtf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.HitEffectNtf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .symphony.proto.HitEffectItem ItemList = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_itemlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_itemlist(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.HitEffectNtf)
  return target;
}

size_t HitEffectNtf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.HitEffectNtf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .symphony.proto.HitEffectItem ItemList = 1;
  total_size += 1UL * this->_internal_itemlist_size();
  for (const auto& msg : this->_impl_.itemlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitEffectNtf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitEffectNtf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitEffectNtf::GetClassData() const { return &_class_data_; }


void HitEffectNtf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitEffectNtf*>(&to_msg);
  auto& from = static_cast<const HitEffectNtf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.HitEffectNtf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.itemlist_.MergeFrom(from._impl_.itemlist_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitEffectNtf::CopyFrom(const HitEffectNtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.HitEffectNtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitEffectNtf::IsInitialized() const {
  return true;
}

void HitEffectNtf::InternalSwap(HitEffectNtf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.itemlist_.InternalSwap(&other->_impl_.itemlist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitEffectNtf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[72]);
}

// ===================================================================

class UseItemReq::_Internal {
 public:
};

UseItemReq::UseItemReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseItemReq)
}
UseItemReq::UseItemReq(const UseItemReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UseItemReq* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseItemReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseItemReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseItemReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UseItemReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[73]);
}

// ===================================================================

class UseItemAck::_Internal {
 public:
};

UseItemAck::UseItemAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:symphony.proto.UseItemAck)
}
UseItemAck::UseItemAck(const UseItemAck& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  UseItemAck* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.UseItemAck)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UseItemAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UseItemAck::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata UseItemAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[74]);
}

// ===================================================================

class MsgGetRandomNameReq::_Internal {
 public:
};

MsgGetRandomNameReq::MsgGetRandomNameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.MsgGetRandomNameReq)
}
MsgGetRandomNameReq::MsgGetRandomNameReq(const MsgGetRandomNameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgGetRandomNameReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sex_ = from._impl_.sex_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.MsgGetRandomNameReq)
}

inline void MsgGetRandomNameReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgGetRandomNameReq::~MsgGetRandomNameReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.MsgGetRandomNameReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgGetRandomNameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgGetRandomNameReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgGetRandomNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.MsgGetRandomNameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sex_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetRandomNameReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Sex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.sex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgGetRandomNameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.MsgGetRandomNameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Sex = 1;
  if (this->_internal_sex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.MsgGetRandomNameReq)
  return target;
}

size_t MsgGetRandomNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.MsgGetRandomNameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Sex = 1;
  if (this->_internal_sex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgGetRandomNameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgGetRandomNameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgGetRandomNameReq::GetClassData() const { return &_class_data_; }


void MsgGetRandomNameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgGetRandomNameReq*>(&to_msg);
  auto& from = static_cast<const MsgGetRandomNameReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.MsgGetRandomNameReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sex() != 0) {
    _this->_internal_set_sex(from._internal_sex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgGetRandomNameReq::CopyFrom(const MsgGetRandomNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.MsgGetRandomNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetRandomNameReq::IsInitialized() const {
  return true;
}

void MsgGetRandomNameReq::InternalSwap(MsgGetRandomNameReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sex_, other->_impl_.sex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetRandomNameReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[75]);
}

// ===================================================================

class MsgGetRandomNameAck::_Internal {
 public:
};

MsgGetRandomNameAck::MsgGetRandomNameAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.MsgGetRandomNameAck)
}
MsgGetRandomNameAck::MsgGetRandomNameAck(const MsgGetRandomNameAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgGetRandomNameAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:symphony.proto.MsgGetRandomNameAck)
}

inline void MsgGetRandomNameAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgGetRandomNameAck::~MsgGetRandomNameAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.MsgGetRandomNameAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgGetRandomNameAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void MsgGetRandomNameAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgGetRandomNameAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.MsgGetRandomNameAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgGetRandomNameAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.MsgGetRandomNameAck.Name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgGetRandomNameAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.MsgGetRandomNameAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.MsgGetRandomNameAck.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.MsgGetRandomNameAck)
  return target;
}

size_t MsgGetRandomNameAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.MsgGetRandomNameAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgGetRandomNameAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgGetRandomNameAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgGetRandomNameAck::GetClassData() const { return &_class_data_; }


void MsgGetRandomNameAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgGetRandomNameAck*>(&to_msg);
  auto& from = static_cast<const MsgGetRandomNameAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.MsgGetRandomNameAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgGetRandomNameAck::CopyFrom(const MsgGetRandomNameAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.MsgGetRandomNameAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgGetRandomNameAck::IsInitialized() const {
  return true;
}

void MsgGetRandomNameAck::InternalSwap(MsgGetRandomNameAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgGetRandomNameAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[76]);
}

// ===================================================================

class Msg_DbErrorCountNty::_Internal {
 public:
};

Msg_DbErrorCountNty::Msg_DbErrorCountNty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_DbErrorCountNty)
}
Msg_DbErrorCountNty::Msg_DbErrorCountNty(const Msg_DbErrorCountNty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_DbErrorCountNty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcount_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.errorcount_ = from._impl_.errorcount_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_DbErrorCountNty)
}

inline void Msg_DbErrorCountNty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errorcount_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_DbErrorCountNty::~Msg_DbErrorCountNty() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_DbErrorCountNty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_DbErrorCountNty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_DbErrorCountNty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_DbErrorCountNty::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_DbErrorCountNty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errorcount_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_DbErrorCountNty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ErrorCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.errorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_DbErrorCountNty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_DbErrorCountNty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ErrorCount = 1;
  if (this->_internal_errorcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_errorcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_DbErrorCountNty)
  return target;
}

size_t Msg_DbErrorCountNty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_DbErrorCountNty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 ErrorCount = 1;
  if (this->_internal_errorcount() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_errorcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_DbErrorCountNty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_DbErrorCountNty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_DbErrorCountNty::GetClassData() const { return &_class_data_; }


void Msg_DbErrorCountNty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_DbErrorCountNty*>(&to_msg);
  auto& from = static_cast<const Msg_DbErrorCountNty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_DbErrorCountNty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_errorcount() != 0) {
    _this->_internal_set_errorcount(from._internal_errorcount());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_DbErrorCountNty::CopyFrom(const Msg_DbErrorCountNty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_DbErrorCountNty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_DbErrorCountNty::IsInitialized() const {
  return true;
}

void Msg_DbErrorCountNty::InternalSwap(Msg_DbErrorCountNty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.errorcount_, other->_impl_.errorcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_DbErrorCountNty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[77]);
}

// ===================================================================

class Msg_GameParamReq::_Internal {
 public:
};

Msg_GameParamReq::Msg_GameParamReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_GameParamReq)
}
Msg_GameParamReq::Msg_GameParamReq(const Msg_GameParamReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_GameParamReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientver_){}
    , decltype(_impl_.channel_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.clientver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_clientver().empty()) {
    _this->_impl_.clientver_.Set(from._internal_clientver(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_GameParamReq)
}

inline void Msg_GameParamReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientver_){}
    , decltype(_impl_.channel_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.clientver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.clientver_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Msg_GameParamReq::~Msg_GameParamReq() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_GameParamReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_GameParamReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientver_.Destroy();
}

void Msg_GameParamReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_GameParamReq::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_GameParamReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientver_.ClearToEmpty();
  _impl_.channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GameParamReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ClientVer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.Msg_GameParamReq.ClientVer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GameParamReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_GameParamReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // string ClientVer = 2;
  if (!this->_internal_clientver().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientver().data(), static_cast<int>(this->_internal_clientver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.Msg_GameParamReq.ClientVer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_GameParamReq)
  return target;
}

size_t Msg_GameParamReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_GameParamReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ClientVer = 2;
  if (!this->_internal_clientver().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientver());
  }

  // int32 Channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GameParamReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_GameParamReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GameParamReq::GetClassData() const { return &_class_data_; }


void Msg_GameParamReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_GameParamReq*>(&to_msg);
  auto& from = static_cast<const Msg_GameParamReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_GameParamReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_clientver().empty()) {
    _this->_internal_set_clientver(from._internal_clientver());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GameParamReq::CopyFrom(const Msg_GameParamReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_GameParamReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameParamReq::IsInitialized() const {
  return true;
}

void Msg_GameParamReq::InternalSwap(Msg_GameParamReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.clientver_, lhs_arena,
      &other->_impl_.clientver_, rhs_arena
  );
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GameParamReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[78]);
}

// ===================================================================

class Msg_GameParamAck::_Internal {
 public:
};

Msg_GameParamAck::Msg_GameParamAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.Msg_GameParamAck)
}
Msg_GameParamAck::Msg_GameParamAck(const Msg_GameParamAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg_GameParamAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paramkey_){from._impl_.paramkey_}
    , decltype(_impl_.paramvalue_){from._impl_.paramvalue_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:symphony.proto.Msg_GameParamAck)
}

inline void Msg_GameParamAck::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paramkey_){arena}
    , decltype(_impl_.paramvalue_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Msg_GameParamAck::~Msg_GameParamAck() {
  // @@protoc_insertion_point(destructor:symphony.proto.Msg_GameParamAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg_GameParamAck::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paramkey_.~RepeatedPtrField();
  _impl_.paramvalue_.~RepeatedPtrField();
}

void Msg_GameParamAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg_GameParamAck::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.Msg_GameParamAck)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paramkey_.Clear();
  _impl_.paramvalue_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_GameParamAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string ParamKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paramkey();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.Msg_GameParamAck.ParamKey"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string ParamValue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paramvalue();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "symphony.proto.Msg_GameParamAck.ParamValue"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg_GameParamAck::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.Msg_GameParamAck)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ParamKey = 1;
  for (int i = 0, n = this->_internal_paramkey_size(); i < n; i++) {
    const auto& s = this->_internal_paramkey(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.Msg_GameParamAck.ParamKey");
    target = stream->WriteString(1, s, target);
  }

  // repeated string ParamValue = 2;
  for (int i = 0, n = this->_internal_paramvalue_size(); i < n; i++) {
    const auto& s = this->_internal_paramvalue(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "symphony.proto.Msg_GameParamAck.ParamValue");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.Msg_GameParamAck)
  return target;
}

size_t Msg_GameParamAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.Msg_GameParamAck)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ParamKey = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.paramkey_.size());
  for (int i = 0, n = _impl_.paramkey_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.paramkey_.Get(i));
  }

  // repeated string ParamValue = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.paramvalue_.size());
  for (int i = 0, n = _impl_.paramvalue_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.paramvalue_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_GameParamAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg_GameParamAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_GameParamAck::GetClassData() const { return &_class_data_; }


void Msg_GameParamAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg_GameParamAck*>(&to_msg);
  auto& from = static_cast<const Msg_GameParamAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.Msg_GameParamAck)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paramkey_.MergeFrom(from._impl_.paramkey_);
  _this->_impl_.paramvalue_.MergeFrom(from._impl_.paramvalue_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_GameParamAck::CopyFrom(const Msg_GameParamAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.Msg_GameParamAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameParamAck::IsInitialized() const {
  return true;
}

void Msg_GameParamAck::InternalSwap(Msg_GameParamAck* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paramkey_.InternalSwap(&other->_impl_.paramkey_);
  _impl_.paramvalue_.InternalSwap(&other->_impl_.paramvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_GameParamAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_getter, &descriptor_table_symphony_2fproto_2fmsg_5fgame_2eproto_once,
      file_level_metadata_symphony_2fproto_2fmsg_5fgame_2eproto[79]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::GmStopServerReq*
Arena::CreateMaybeMessage< ::symphony::proto::GmStopServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::GmStopServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::GmStopServerAck*
Arena::CreateMaybeMessage< ::symphony::proto::GmStopServerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::GmStopServerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SvrRegToSvrReq*
Arena::CreateMaybeMessage< ::symphony::proto::SvrRegToSvrReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SvrRegToSvrReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SvrRegToSvrAck*
Arena::CreateMaybeMessage< ::symphony::proto::SvrRegToSvrAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SvrRegToSvrAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleDisconnectReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleDisconnectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleDisconnectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleDisconnectAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleDisconnectAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleDisconnectAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleReconnectReq*
Arena::CreateMaybeMessage< ::symphony::proto::RoleReconnectReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleReconnectReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleReconnectAck*
Arena::CreateMaybeMessage< ::symphony::proto::RoleReconnectAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleReconnectAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RemoveConnectNty*
Arena::CreateMaybeMessage< ::symphony::proto::RemoveConnectNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RemoveConnectNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CreateNewSceneReq*
Arena::CreateMaybeMessage< ::symphony::proto::CreateNewSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CreateNewSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CreateNewSceneAck*
Arena::CreateMaybeMessage< ::symphony::proto::CreateNewSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CreateNewSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::EnterSceneReq*
Arena::CreateMaybeMessage< ::symphony::proto::EnterSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::EnterSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::EnterSceneAck*
Arena::CreateMaybeMessage< ::symphony::proto::EnterSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::EnterSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::BackToCityReq*
Arena::CreateMaybeMessage< ::symphony::proto::BackToCityReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::BackToCityReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::BackToCityAck*
Arena::CreateMaybeMessage< ::symphony::proto::BackToCityAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::BackToCityAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LeaveSceneReq*
Arena::CreateMaybeMessage< ::symphony::proto::LeaveSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LeaveSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LeaveSceneAck*
Arena::CreateMaybeMessage< ::symphony::proto::LeaveSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LeaveSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::AbortSceneReq*
Arena::CreateMaybeMessage< ::symphony::proto::AbortSceneReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::AbortSceneReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::AbortSceneAck*
Arena::CreateMaybeMessage< ::symphony::proto::AbortSceneAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::AbortSceneAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::AbortSceneNty*
Arena::CreateMaybeMessage< ::symphony::proto::AbortSceneNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::AbortSceneNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransRoleData*
Arena::CreateMaybeMessage< ::symphony::proto::TransRoleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransRoleData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransPetData*
Arena::CreateMaybeMessage< ::symphony::proto::TransPetData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransPetData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransPartnerData*
Arena::CreateMaybeMessage< ::symphony::proto::TransPartnerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransPartnerData >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransferDataItem*
Arena::CreateMaybeMessage< ::symphony::proto::TransferDataItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransferDataItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransferDataReq*
Arena::CreateMaybeMessage< ::symphony::proto::TransferDataReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransferDataReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::TransferDataAck*
Arena::CreateMaybeMessage< ::symphony::proto::TransferDataAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::TransferDataAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::NotifyIntoScene*
Arena::CreateMaybeMessage< ::symphony::proto::NotifyIntoScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::NotifyIntoScene >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::NearByRoleItem*
Arena::CreateMaybeMessage< ::symphony::proto::NearByRoleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::NearByRoleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CopyInsItem*
Arena::CreateMaybeMessage< ::symphony::proto::CopyInsItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CopyInsItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CopyReportReq*
Arena::CreateMaybeMessage< ::symphony::proto::CopyReportReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CopyReportReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseHpBottleReq*
Arena::CreateMaybeMessage< ::symphony::proto::UseHpBottleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseHpBottleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseHpBottleAck*
Arena::CreateMaybeMessage< ::symphony::proto::UseHpBottleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseHpBottleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseMpBottleReq*
Arena::CreateMaybeMessage< ::symphony::proto::UseMpBottleReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseMpBottleReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseMpBottleAck*
Arena::CreateMaybeMessage< ::symphony::proto::UseMpBottleAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseMpBottleAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ChatMessageReq*
Arena::CreateMaybeMessage< ::symphony::proto::ChatMessageReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ChatMessageReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ChatMessageAck*
Arena::CreateMaybeMessage< ::symphony::proto::ChatMessageAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ChatMessageAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ChatMessageNty*
Arena::CreateMaybeMessage< ::symphony::proto::ChatMessageNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ChatMessageNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CommonReq*
Arena::CreateMaybeMessage< ::symphony::proto::CommonReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CommonReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::CommonAck*
Arena::CreateMaybeMessage< ::symphony::proto::CommonAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::CommonAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::BroadMessageNotify*
Arena::CreateMaybeMessage< ::symphony::proto::BroadMessageNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::BroadMessageNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicRegToLoginReq*
Arena::CreateMaybeMessage< ::symphony::proto::LogicRegToLoginReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicRegToLoginReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicRegToLoginAck*
Arena::CreateMaybeMessage< ::symphony::proto::LogicRegToLoginAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicRegToLoginAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicRegToDbSvrReq*
Arena::CreateMaybeMessage< ::symphony::proto::LogicRegToDbSvrReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicRegToDbSvrReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicRegToDbSvrAck*
Arena::CreateMaybeMessage< ::symphony::proto::LogicRegToDbSvrAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicRegToDbSvrAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicUpdateInfoReq*
Arena::CreateMaybeMessage< ::symphony::proto::LogicUpdateInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicUpdateInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::LogicUpdateInfoAck*
Arena::CreateMaybeMessage< ::symphony::proto::LogicUpdateInfoAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::LogicUpdateInfoAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupEquipReq*
Arena::CreateMaybeMessage< ::symphony::proto::SetupEquipReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupEquipReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupEquipAck*
Arena::CreateMaybeMessage< ::symphony::proto::SetupEquipAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupEquipAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_GiftCodeReq*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_GiftCodeReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_GiftCodeReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_GiftCodeAck*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_GiftCodeAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_GiftCodeAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetEquipReq*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetEquipReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetEquipReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetEquipAck*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetEquipAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetEquipAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupGemReq*
Arena::CreateMaybeMessage< ::symphony::proto::SetupGemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupGemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupGemAck*
Arena::CreateMaybeMessage< ::symphony::proto::SetupGemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupGemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetGemReq*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetGemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetGemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetGemAck*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetGemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetGemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupPartnerReq*
Arena::CreateMaybeMessage< ::symphony::proto::SetupPartnerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupPartnerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupPartnerAck*
Arena::CreateMaybeMessage< ::symphony::proto::SetupPartnerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupPartnerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetPartnerReq*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetPartnerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetPartnerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetPartnerAck*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetPartnerAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetPartnerAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupMountReq*
Arena::CreateMaybeMessage< ::symphony::proto::SetupMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupMountAck*
Arena::CreateMaybeMessage< ::symphony::proto::SetupMountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupMountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetMountReq*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetMountReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetMountReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetMountAck*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetMountAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetMountAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupPetReq*
Arena::CreateMaybeMessage< ::symphony::proto::SetupPetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupPetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::SetupPetAck*
Arena::CreateMaybeMessage< ::symphony::proto::SetupPetAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::SetupPetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetPetReq*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetPetReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetPetReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UnsetPetAck*
Arena::CreateMaybeMessage< ::symphony::proto::UnsetPetAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UnsetPetAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::StoreBuyReq*
Arena::CreateMaybeMessage< ::symphony::proto::StoreBuyReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::StoreBuyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::StoreBuyAck*
Arena::CreateMaybeMessage< ::symphony::proto::StoreBuyAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::StoreBuyAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::ObjectChangeNotify*
Arena::CreateMaybeMessage< ::symphony::proto::ObjectChangeNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::ObjectChangeNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::HitEffectItem*
Arena::CreateMaybeMessage< ::symphony::proto::HitEffectItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::HitEffectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::HitEffectNtf*
Arena::CreateMaybeMessage< ::symphony::proto::HitEffectNtf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::HitEffectNtf >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseItemReq*
Arena::CreateMaybeMessage< ::symphony::proto::UseItemReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseItemReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::UseItemAck*
Arena::CreateMaybeMessage< ::symphony::proto::UseItemAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::UseItemAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::MsgGetRandomNameReq*
Arena::CreateMaybeMessage< ::symphony::proto::MsgGetRandomNameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::MsgGetRandomNameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::MsgGetRandomNameAck*
Arena::CreateMaybeMessage< ::symphony::proto::MsgGetRandomNameAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::MsgGetRandomNameAck >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_DbErrorCountNty*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_DbErrorCountNty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_DbErrorCountNty >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_GameParamReq*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_GameParamReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_GameParamReq >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::Msg_GameParamAck*
Arena::CreateMaybeMessage< ::symphony::proto::Msg_GameParamAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::Msg_GameParamAck >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
