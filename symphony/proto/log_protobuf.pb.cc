// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: symphony/proto/log_protobuf.proto

#include "symphony/proto/log_protobuf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace symphony {
namespace proto {
PROTOBUF_CONSTEXPR AccountCreateInfo::AccountCreateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}} {}
struct AccountCreateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountCreateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountCreateInfoDefaultTypeInternal() {}
  union {
    AccountCreateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountCreateInfoDefaultTypeInternal _AccountCreateInfo_default_instance_;
PROTOBUF_CONSTEXPR AccountLoginInfo::AccountLoginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.openid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}} {}
struct AccountLoginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountLoginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountLoginInfoDefaultTypeInternal() {}
  union {
    AccountLoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountLoginInfoDefaultTypeInternal _AccountLoginInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleChatInfo::RoleChatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/int64_t{0}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.viplevel_)*/0
  , /*decltype(_impl_.areaid_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}
  , /*decltype(_impl_.targetid_)*/int64_t{0}
  , /*decltype(_impl_.targetvip_)*/0
  , /*decltype(_impl_.chatchl_)*/0} {}
struct RoleChatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleChatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleChatInfoDefaultTypeInternal() {}
  union {
    RoleChatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleChatInfoDefaultTypeInternal _RoleChatInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleCreateInfo::RoleCreateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/int64_t{0}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.areaid_)*/0
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}} {}
struct RoleCreateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleCreateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleCreateInfoDefaultTypeInternal() {}
  union {
    RoleCreateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleCreateInfoDefaultTypeInternal _RoleCreateInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleLoginInfo::RoleLoginInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/int64_t{0}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}
  , /*decltype(_impl_.viplevel_)*/0
  , /*decltype(_impl_.areaid_)*/0} {}
struct RoleLoginInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLoginInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLoginInfoDefaultTypeInternal() {}
  union {
    RoleLoginInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLoginInfoDefaultTypeInternal _RoleLoginInfo_default_instance_;
PROTOBUF_CONSTEXPR RoleLogoutInfo::RoleLogoutInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rolename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.idfa_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imei_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.imodel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roleid_)*/int64_t{0}
  , /*decltype(_impl_.accountid_)*/int64_t{0}
  , /*decltype(_impl_.channel_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.optime_)*/int64_t{0}
  , /*decltype(_impl_.viplevel_)*/0
  , /*decltype(_impl_.areaid_)*/0} {}
struct RoleLogoutInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoleLogoutInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoleLogoutInfoDefaultTypeInternal() {}
  union {
    RoleLogoutInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoleLogoutInfoDefaultTypeInternal _RoleLogoutInfo_default_instance_;
}  // namespace proto
}  // namespace symphony
static ::_pb::Metadata file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_symphony_2fproto_2flog_5fprotobuf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_symphony_2fproto_2flog_5fprotobuf_2eproto = nullptr;

const uint32_t TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.imodel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountCreateInfo, _impl_.uuid_),
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.openid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::AccountLoginInfo, _impl_.imodel_),
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.rolename_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.viplevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.areaid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.targetid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.targetvip_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.targetname_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleChatInfo, _impl_.chatchl_),
  3,
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  9,
  10,
  2,
  11,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.areaid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.rolename_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.imodel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleCreateInfo, _impl_.uuid_),
  5,
  6,
  7,
  8,
  9,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.viplevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.areaid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.rolename_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLoginInfo, _impl_.imodel_),
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.roleid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.accountid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.viplevel_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.optime_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.areaid_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.rolename_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.idfa_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.imei_),
  PROTOBUF_FIELD_OFFSET(::symphony::proto::RoleLogoutInfo, _impl_.imodel_),
  4,
  5,
  6,
  7,
  9,
  8,
  10,
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::symphony::proto::AccountCreateInfo)},
  { 26, 42, -1, sizeof(::symphony::proto::AccountLoginInfo)},
  { 52, 70, -1, sizeof(::symphony::proto::RoleChatInfo)},
  { 82, 98, -1, sizeof(::symphony::proto::RoleCreateInfo)},
  { 108, 126, -1, sizeof(::symphony::proto::RoleLoginInfo)},
  { 138, 155, -1, sizeof(::symphony::proto::RoleLogoutInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::symphony::proto::_AccountCreateInfo_default_instance_._instance,
  &::symphony::proto::_AccountLoginInfo_default_instance_._instance,
  &::symphony::proto::_RoleChatInfo_default_instance_._instance,
  &::symphony::proto::_RoleCreateInfo_default_instance_._instance,
  &::symphony::proto::_RoleLoginInfo_default_instance_._instance,
  &::symphony::proto::_RoleLogoutInfo_default_instance_._instance,
};

const char descriptor_table_protodef_symphony_2fproto_2flog_5fprotobuf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!symphony/proto/log_protobuf.proto\022\016sym"
  "phony.proto\"\256\001\n\021AccountCreateInfo\022\021\n\tacc"
  "ountid\030\001 \002(\003\022\017\n\007version\030\002 \001(\005\022\017\n\007channel"
  "\030\003 \001(\005\022\016\n\006optime\030\004 \002(\003\022\016\n\006imodel\030\005 \001(\t\022\014"
  "\n\004imei\030\006 \001(\t\022\n\n\002ip\030\007 \002(\t\022\016\n\006openid\030\010 \001(\t"
  "\022\014\n\004idfa\030\t \001(\t\022\014\n\004uuid\030\n \001(\t\"\255\001\n\020Account"
  "LoginInfo\022\021\n\taccountid\030\001 \002(\003\022\017\n\007version\030"
  "\002 \001(\005\022\017\n\007channel\030\003 \001(\005\022\016\n\006optime\030\004 \002(\003\022\n"
  "\n\002ip\030\005 \002(\t\022\016\n\006openid\030\006 \001(\t\022\014\n\004uuid\030\007 \001(\t"
  "\022\014\n\004idfa\030\010 \001(\t\022\014\n\004imei\030\t \001(\t\022\016\n\006imodel\030\n"
  " \001(\t\"\332\001\n\014RoleChatInfo\022\016\n\006roleid\030\001 \002(\003\022\r\n"
  "\005level\030\002 \001(\005\022\020\n\010rolename\030\003 \001(\t\022\020\n\010viplev"
  "el\030\004 \001(\005\022\016\n\006areaid\030\005 \001(\005\022\017\n\007channel\030\006 \001("
  "\005\022\014\n\004text\030\007 \001(\t\022\016\n\006optime\030\010 \002(\003\022\020\n\010targe"
  "tid\030\t \001(\003\022\021\n\ttargetvip\030\n \001(\005\022\022\n\ntargetna"
  "me\030\013 \001(\t\022\017\n\007chatchl\030\014 \001(\005\"\260\001\n\016RoleCreate"
  "Info\022\016\n\006roleid\030\001 \002(\003\022\021\n\taccountid\030\002 \002(\003\022"
  "\016\n\006areaid\030\003 \001(\005\022\017\n\007channel\030\004 \001(\005\022\016\n\006opti"
  "me\030\005 \002(\003\022\020\n\010rolename\030\006 \001(\t\022\016\n\006imodel\030\007 \001"
  "(\t\022\014\n\004imei\030\010 \001(\t\022\014\n\004idfa\030\t \001(\t\022\014\n\004uuid\030\n"
  " \001(\t\"\320\001\n\rRoleLoginInfo\022\016\n\006roleid\030\001 \002(\003\022\021"
  "\n\taccountid\030\002 \002(\003\022\017\n\007channel\030\003 \001(\005\022\r\n\005le"
  "vel\030\004 \001(\005\022\020\n\010viplevel\030\005 \001(\005\022\016\n\006optime\030\006 "
  "\002(\003\022\016\n\006areaid\030\007 \001(\005\022\020\n\010rolename\030\010 \001(\t\022\014\n"
  "\004uuid\030\t \001(\t\022\014\n\004idfa\030\n \001(\t\022\014\n\004imei\030\013 \001(\t\022"
  "\016\n\006imodel\030\014 \001(\t\"\303\001\n\016RoleLogoutInfo\022\016\n\006ro"
  "leid\030\001 \002(\003\022\021\n\taccountid\030\002 \002(\003\022\017\n\007channel"
  "\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\020\n\010viplevel\030\005 \001(\005\022"
  "\016\n\006optime\030\006 \002(\003\022\016\n\006areaid\030\007 \001(\005\022\020\n\010rolen"
  "ame\030\010 \001(\t\022\014\n\004idfa\030\n \001(\t\022\014\n\004imei\030\013 \001(\t\022\016\n"
  "\006imodel\030\014 \001(\t"
  ;
static ::_pbi::once_flag descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto = {
    false, false, 1213, descriptor_table_protodef_symphony_2fproto_2flog_5fprotobuf_2eproto,
    "symphony/proto/log_protobuf.proto",
    &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_symphony_2fproto_2flog_5fprotobuf_2eproto::offsets,
    file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto, file_level_enum_descriptors_symphony_2fproto_2flog_5fprotobuf_2eproto,
    file_level_service_descriptors_symphony_2fproto_2flog_5fprotobuf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter() {
  return &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_symphony_2fproto_2flog_5fprotobuf_2eproto(&descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto);
namespace symphony {
namespace proto {

// ===================================================================

class AccountCreateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountCreateInfo>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_openid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000244) ^ 0x00000244) != 0;
  }
};

AccountCreateInfo::AccountCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.AccountCreateInfo)
}
AccountCreateInfo::AccountCreateInfo(const AccountCreateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountCreateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_openid()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optime_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.optime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.AccountCreateInfo)
}

inline void AccountCreateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
  };
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountCreateInfo::~AccountCreateInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.AccountCreateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountCreateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imodel_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.ip_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.uuid_.Destroy();
}

void AccountCreateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountCreateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.AccountCreateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.openid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optime_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.optime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountCreateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string openid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.openid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountCreateInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountCreateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.AccountCreateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 accountid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // required int64 optime = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_optime(), target);
  }

  // optional string imodel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_imodel(), target);
  }

  // optional string imei = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.imei");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_imei(), target);
  }

  // required string ip = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip(), target);
  }

  // optional string openid = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.openid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_openid(), target);
  }

  // optional string idfa = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_idfa(), target);
  }

  // optional string uuid = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountCreateInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.AccountCreateInfo)
  return target;
}

size_t AccountCreateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.AccountCreateInfo)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t AccountCreateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.AccountCreateInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000244) ^ 0x00000244) == 0) {  // All required fields are present.
    // required string ip = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string imodel = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

    // optional string imei = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional string openid = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_openid());
    }

    // optional string idfa = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string uuid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountCreateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountCreateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountCreateInfo::GetClassData() const { return &_class_data_; }


void AccountCreateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountCreateInfo*>(&to_msg);
  auto& from = static_cast<const AccountCreateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.AccountCreateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_openid(from._internal_openid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCreateInfo::CopyFrom(const AccountCreateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.AccountCreateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreateInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AccountCreateInfo::InternalSwap(AccountCreateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountCreateInfo, _impl_.optime_)
      + sizeof(AccountCreateInfo::_impl_.optime_)
      - PROTOBUF_FIELD_OFFSET(AccountCreateInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[0]);
}

// ===================================================================

class AccountLoginInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<AccountLoginInfo>()._impl_._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_openid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000241) ^ 0x00000241) != 0;
  }
};

AccountLoginInfo::AccountLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.AccountLoginInfo)
}
AccountLoginInfo::AccountLoginInfo(const AccountLoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AccountLoginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_openid()) {
    _this->_impl_.openid_.Set(from._internal_openid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.accountid_, &from._impl_.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optime_) -
    reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.optime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.AccountLoginInfo)
}

inline void AccountLoginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.openid_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.version_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.openid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.openid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AccountLoginInfo::~AccountLoginInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.AccountLoginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AccountLoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
  _impl_.openid_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.imodel_.Destroy();
}

void AccountLoginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AccountLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.AccountLoginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.openid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.accountid_)) + sizeof(_impl_.version_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optime_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.optime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccountLoginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string openid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_openid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.openid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.AccountLoginInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AccountLoginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.AccountLoginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 accountid = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_accountid(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // required int64 optime = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_optime(), target);
  }

  // required string ip = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // optional string openid = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_openid().data(), static_cast<int>(this->_internal_openid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.openid");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_openid(), target);
  }

  // optional string uuid = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_uuid(), target);
  }

  // optional string idfa = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_idfa(), target);
  }

  // optional string imei = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.imei");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_imei(), target);
  }

  // optional string imodel = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.AccountLoginInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_imodel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.AccountLoginInfo)
  return target;
}

size_t AccountLoginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.AccountLoginInfo)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t AccountLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.AccountLoginInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000241) ^ 0x00000241) == 0) {  // All required fields are present.
    // required string ip = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required int64 accountid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 4;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string openid = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_openid());
    }

    // optional string uuid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional string idfa = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string imei = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string imodel = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccountLoginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AccountLoginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccountLoginInfo::GetClassData() const { return &_class_data_; }


void AccountLoginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AccountLoginInfo*>(&to_msg);
  auto& from = static_cast<const AccountLoginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.AccountLoginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_openid(from._internal_openid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccountLoginInfo::CopyFrom(const AccountLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.AccountLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountLoginInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void AccountLoginInfo::InternalSwap(AccountLoginInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.openid_, lhs_arena,
      &other->_impl_.openid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountLoginInfo, _impl_.optime_)
      + sizeof(AccountLoginInfo::_impl_.optime_)
      - PROTOBUF_FIELD_OFFSET(AccountLoginInfo, _impl_.accountid_)>(
          reinterpret_cast<char*>(&_impl_.accountid_),
          reinterpret_cast<char*>(&other->_impl_.accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountLoginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[1]);
}

// ===================================================================

class RoleChatInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleChatInfo>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_targetid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_targetvip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_targetname(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chatchl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000108) ^ 0x00000108) != 0;
  }
};

RoleChatInfo::RoleChatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleChatInfo)
}
RoleChatInfo::RoleChatInfo(const RoleChatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleChatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.targetname_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.viplevel_){}
    , decltype(_impl_.areaid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}
    , decltype(_impl_.targetid_){}
    , decltype(_impl_.targetvip_){}
    , decltype(_impl_.chatchl_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rolename()) {
    _this->_impl_.rolename_.Set(from._internal_rolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_targetname()) {
    _this->_impl_.targetname_.Set(from._internal_targetname(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chatchl_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.chatchl_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleChatInfo)
}

inline void RoleChatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.text_){}
    , decltype(_impl_.targetname_){}
    , decltype(_impl_.roleid_){int64_t{0}}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.viplevel_){0}
    , decltype(_impl_.areaid_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
    , decltype(_impl_.targetid_){int64_t{0}}
    , decltype(_impl_.targetvip_){0}
    , decltype(_impl_.chatchl_){0}
  };
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleChatInfo::~RoleChatInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleChatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleChatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rolename_.Destroy();
  _impl_.text_.Destroy();
  _impl_.targetname_.Destroy();
}

void RoleChatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleChatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.targetname_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.channel_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.optime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chatchl_) -
        reinterpret_cast<char*>(&_impl_.optime_)) + sizeof(_impl_.chatchl_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleChatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rolename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleChatInfo.rolename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 viplevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_viplevel(&has_bits);
          _impl_.viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 areaid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_areaid(&has_bits);
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleChatInfo.text");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 targetid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_targetid(&has_bits);
          _impl_.targetid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 targetvip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_targetvip(&has_bits);
          _impl_.targetvip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string targetname = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_targetname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleChatInfo.targetname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 chatchl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_chatchl(&has_bits);
          _impl_.chatchl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleChatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleChatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 roleid = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // optional int32 level = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // optional string rolename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleChatInfo.rolename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_rolename(), target);
  }

  // optional int32 viplevel = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_viplevel(), target);
  }

  // optional int32 areaid = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_areaid(), target);
  }

  // optional int32 channel = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_channel(), target);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleChatInfo.text");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_text(), target);
  }

  // required int64 optime = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_optime(), target);
  }

  // optional int64 targetid = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_targetid(), target);
  }

  // optional int32 targetvip = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_targetvip(), target);
  }

  // optional string targetname = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_targetname().data(), static_cast<int>(this->_internal_targetname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleChatInfo.targetname");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_targetname(), target);
  }

  // optional int32 chatchl = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_chatchl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleChatInfo)
  return target;
}

size_t RoleChatInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.RoleChatInfo)
  size_t total_size = 0;

  if (_internal_has_roleid()) {
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t RoleChatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleChatInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000108) ^ 0x00000108) == 0) {  // All required fields are present.
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());

    // required int64 optime = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rolename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rolename());
    }

    // optional string text = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional string targetname = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_targetname());
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional int32 level = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

    // optional int32 viplevel = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_viplevel());
    }

    // optional int32 areaid = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
    }

    // optional int32 channel = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

  }
  if (cached_has_bits & 0x00000e00u) {
    // optional int64 targetid = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_targetid());
    }

    // optional int32 targetvip = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_targetvip());
    }

    // optional int32 chatchl = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chatchl());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleChatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleChatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleChatInfo::GetClassData() const { return &_class_data_; }


void RoleChatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleChatInfo*>(&to_msg);
  auto& from = static_cast<const RoleChatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleChatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rolename(from._internal_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_targetname(from._internal_targetname());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.viplevel_ = from._impl_.viplevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.areaid_ = from._impl_.areaid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.targetid_ = from._impl_.targetid_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.targetvip_ = from._impl_.targetvip_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.chatchl_ = from._impl_.chatchl_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleChatInfo::CopyFrom(const RoleChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChatInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoleChatInfo::InternalSwap(RoleChatInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rolename_, lhs_arena,
      &other->_impl_.rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetname_, lhs_arena,
      &other->_impl_.targetname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleChatInfo, _impl_.chatchl_)
      + sizeof(RoleChatInfo::_impl_.chatchl_)
      - PROTOBUF_FIELD_OFFSET(RoleChatInfo, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleChatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[2]);
}

// ===================================================================

class RoleCreateInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleCreateInfo>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000260) ^ 0x00000260) != 0;
  }
};

RoleCreateInfo::RoleCreateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleCreateInfo)
}
RoleCreateInfo::RoleCreateInfo(const RoleCreateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleCreateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.areaid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.optime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rolename()) {
    _this->_impl_.rolename_.Set(from._internal_rolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.optime_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.optime_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleCreateInfo)
}

inline void RoleCreateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.roleid_){int64_t{0}}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.areaid_){0}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.optime_){int64_t{0}}
  };
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleCreateInfo::~RoleCreateInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleCreateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleCreateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rolename_.Destroy();
  _impl_.imodel_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.uuid_.Destroy();
}

void RoleCreateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleCreateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleCreateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.areaid_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.areaid_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.optime_) -
        reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.optime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleCreateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 areaid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_areaid(&has_bits);
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rolename = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateInfo.rolename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleCreateInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleCreateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleCreateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 roleid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // required int64 accountid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_accountid(), target);
  }

  // optional int32 areaid = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_areaid(), target);
  }

  // optional int32 channel = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_channel(), target);
  }

  // required int64 optime = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_optime(), target);
  }

  // optional string rolename = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateInfo.rolename");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_rolename(), target);
  }

  // optional string imodel = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_imodel(), target);
  }

  // optional string imei = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateInfo.imei");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_imei(), target);
  }

  // optional string idfa = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_idfa(), target);
  }

  // optional string uuid = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleCreateInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleCreateInfo)
  return target;
}

size_t RoleCreateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.RoleCreateInfo)
  size_t total_size = 0;

  if (_internal_has_roleid()) {
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t RoleCreateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleCreateInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000260) ^ 0x00000260) == 0) {  // All required fields are present.
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());

    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 5;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rolename = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rolename());
    }

    // optional string imodel = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

    // optional string imei = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string idfa = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string uuid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

  }
  // optional int32 areaid = 3;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
  }

  // optional int32 channel = 4;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleCreateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleCreateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleCreateInfo::GetClassData() const { return &_class_data_; }


void RoleCreateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleCreateInfo*>(&to_msg);
  auto& from = static_cast<const RoleCreateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleCreateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rolename(from._internal_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.areaid_ = from._impl_.areaid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleCreateInfo::CopyFrom(const RoleCreateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleCreateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCreateInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoleCreateInfo::InternalSwap(RoleCreateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rolename_, lhs_arena,
      &other->_impl_.rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleCreateInfo, _impl_.optime_)
      + sizeof(RoleCreateInfo::_impl_.optime_)
      - PROTOBUF_FIELD_OFFSET(RoleCreateInfo, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleCreateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[3]);
}

// ===================================================================

class RoleLoginInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleLoginInfo>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000260) ^ 0x00000260) != 0;
  }
};

RoleLoginInfo::RoleLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleLoginInfo)
}
RoleLoginInfo::RoleLoginInfo(const RoleLoginInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLoginInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.optime_){}
    , decltype(_impl_.viplevel_){}
    , decltype(_impl_.areaid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rolename()) {
    _this->_impl_.rolename_.Set(from._internal_rolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areaid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.areaid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleLoginInfo)
}

inline void RoleLoginInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.roleid_){int64_t{0}}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.optime_){int64_t{0}}
    , decltype(_impl_.viplevel_){0}
    , decltype(_impl_.areaid_){0}
  };
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleLoginInfo::~RoleLoginInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleLoginInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLoginInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rolename_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.imodel_.Destroy();
}

void RoleLoginInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLoginInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleLoginInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channel_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.channel_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.areaid_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.areaid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLoginInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 viplevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_viplevel(&has_bits);
          _impl_.viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 areaid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_areaid(&has_bits);
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rolename = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLoginInfo.rolename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string uuid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLoginInfo.uuid");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLoginInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLoginInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLoginInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLoginInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleLoginInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 roleid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // required int64 accountid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_accountid(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // optional int32 viplevel = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_viplevel(), target);
  }

  // required int64 optime = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_optime(), target);
  }

  // optional int32 areaid = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_areaid(), target);
  }

  // optional string rolename = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLoginInfo.rolename");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rolename(), target);
  }

  // optional string uuid = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLoginInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_uuid(), target);
  }

  // optional string idfa = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLoginInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_idfa(), target);
  }

  // optional string imei = 11;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLoginInfo.imei");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_imei(), target);
  }

  // optional string imodel = 12;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLoginInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_imodel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleLoginInfo)
  return target;
}

size_t RoleLoginInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.RoleLoginInfo)
  size_t total_size = 0;

  if (_internal_has_roleid()) {
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t RoleLoginInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleLoginInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000260) ^ 0x00000260) == 0) {  // All required fields are present.
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());

    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rolename = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rolename());
    }

    // optional string uuid = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional string idfa = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string imei = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string imodel = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

  }
  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  if (cached_has_bits & 0x00000c00u) {
    // optional int32 viplevel = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_viplevel());
    }

    // optional int32 areaid = 7;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLoginInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLoginInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLoginInfo::GetClassData() const { return &_class_data_; }


void RoleLoginInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLoginInfo*>(&to_msg);
  auto& from = static_cast<const RoleLoginInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleLoginInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rolename(from._internal_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.viplevel_ = from._impl_.viplevel_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.areaid_ = from._impl_.areaid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLoginInfo::CopyFrom(const RoleLoginInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleLoginInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLoginInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoleLoginInfo::InternalSwap(RoleLoginInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rolename_, lhs_arena,
      &other->_impl_.rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleLoginInfo, _impl_.areaid_)
      + sizeof(RoleLoginInfo::_impl_.areaid_)
      - PROTOBUF_FIELD_OFFSET(RoleLoginInfo, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLoginInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[4]);
}

// ===================================================================

class RoleLogoutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RoleLogoutInfo>()._impl_._has_bits_);
  static void set_has_roleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_viplevel(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_optime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_areaid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rolename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_idfa(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imei(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imodel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000130) ^ 0x00000130) != 0;
  }
};

RoleLogoutInfo::RoleLogoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:symphony.proto.RoleLogoutInfo)
}
RoleLogoutInfo::RoleLogoutInfo(const RoleLogoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoleLogoutInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.roleid_){}
    , decltype(_impl_.accountid_){}
    , decltype(_impl_.channel_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.optime_){}
    , decltype(_impl_.viplevel_){}
    , decltype(_impl_.areaid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_rolename()) {
    _this->_impl_.rolename_.Set(from._internal_rolename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_idfa()) {
    _this->_impl_.idfa_.Set(from._internal_idfa(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imei()) {
    _this->_impl_.imei_.Set(from._internal_imei(), 
      _this->GetArenaForAllocation());
  }
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_imodel()) {
    _this->_impl_.imodel_.Set(from._internal_imodel(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.roleid_, &from._impl_.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.areaid_) -
    reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.areaid_));
  // @@protoc_insertion_point(copy_constructor:symphony.proto.RoleLogoutInfo)
}

inline void RoleLogoutInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rolename_){}
    , decltype(_impl_.idfa_){}
    , decltype(_impl_.imei_){}
    , decltype(_impl_.imodel_){}
    , decltype(_impl_.roleid_){int64_t{0}}
    , decltype(_impl_.accountid_){int64_t{0}}
    , decltype(_impl_.channel_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.optime_){int64_t{0}}
    , decltype(_impl_.viplevel_){0}
    , decltype(_impl_.areaid_){0}
  };
  _impl_.rolename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.rolename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.idfa_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.idfa_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imei_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imei_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imodel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.imodel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoleLogoutInfo::~RoleLogoutInfo() {
  // @@protoc_insertion_point(destructor:symphony.proto.RoleLogoutInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoleLogoutInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rolename_.Destroy();
  _impl_.idfa_.Destroy();
  _impl_.imei_.Destroy();
  _impl_.imodel_.Destroy();
}

void RoleLogoutInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoleLogoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:symphony.proto.RoleLogoutInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.rolename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.idfa_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.imei_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.imodel_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.roleid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.level_) -
        reinterpret_cast<char*>(&_impl_.roleid_)) + sizeof(_impl_.level_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.optime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.areaid_) -
        reinterpret_cast<char*>(&_impl_.optime_)) + sizeof(_impl_.areaid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoleLogoutInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 roleid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_roleid(&has_bits);
          _impl_.roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 accountid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accountid(&has_bits);
          _impl_.accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 viplevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_viplevel(&has_bits);
          _impl_.viplevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 optime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_optime(&has_bits);
          _impl_.optime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 areaid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_areaid(&has_bits);
          _impl_.areaid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string rolename = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_rolename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLogoutInfo.rolename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string idfa = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_idfa();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLogoutInfo.idfa");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imei = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_imei();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLogoutInfo.imei");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string imodel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_imodel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "symphony.proto.RoleLogoutInfo.imodel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoleLogoutInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:symphony.proto.RoleLogoutInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 roleid = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roleid(), target);
  }

  // required int64 accountid = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_accountid(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional int32 level = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  // optional int32 viplevel = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_viplevel(), target);
  }

  // required int64 optime = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_optime(), target);
  }

  // optional int32 areaid = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_areaid(), target);
  }

  // optional string rolename = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rolename().data(), static_cast<int>(this->_internal_rolename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLogoutInfo.rolename");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_rolename(), target);
  }

  // optional string idfa = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_idfa().data(), static_cast<int>(this->_internal_idfa().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLogoutInfo.idfa");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_idfa(), target);
  }

  // optional string imei = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imei().data(), static_cast<int>(this->_internal_imei().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLogoutInfo.imei");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_imei(), target);
  }

  // optional string imodel = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_imodel().data(), static_cast<int>(this->_internal_imodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "symphony.proto.RoleLogoutInfo.imodel");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_imodel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:symphony.proto.RoleLogoutInfo)
  return target;
}

size_t RoleLogoutInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:symphony.proto.RoleLogoutInfo)
  size_t total_size = 0;

  if (_internal_has_roleid()) {
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());
  }

  if (_internal_has_accountid()) {
    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());
  }

  if (_internal_has_optime()) {
    // required int64 optime = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());
  }

  return total_size;
}
size_t RoleLogoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:symphony.proto.RoleLogoutInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000130) ^ 0x00000130) == 0) {  // All required fields are present.
    // required int64 roleid = 1;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roleid());

    // required int64 accountid = 2;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_accountid());

    // required int64 optime = 6;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_optime());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string rolename = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rolename());
    }

    // optional string idfa = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_idfa());
    }

    // optional string imei = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imei());
    }

    // optional string imodel = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_imodel());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional int32 channel = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

    // optional int32 level = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
    }

  }
  if (cached_has_bits & 0x00000600u) {
    // optional int32 viplevel = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_viplevel());
    }

    // optional int32 areaid = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_areaid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoleLogoutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoleLogoutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoleLogoutInfo::GetClassData() const { return &_class_data_; }


void RoleLogoutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoleLogoutInfo*>(&to_msg);
  auto& from = static_cast<const RoleLogoutInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:symphony.proto.RoleLogoutInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_rolename(from._internal_rolename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_idfa(from._internal_idfa());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_imei(from._internal_imei());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_imodel(from._internal_imodel());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.roleid_ = from._impl_.roleid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.accountid_ = from._impl_.accountid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.optime_ = from._impl_.optime_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.viplevel_ = from._impl_.viplevel_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.areaid_ = from._impl_.areaid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoleLogoutInfo::CopyFrom(const RoleLogoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:symphony.proto.RoleLogoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleLogoutInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RoleLogoutInfo::InternalSwap(RoleLogoutInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.rolename_, lhs_arena,
      &other->_impl_.rolename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.idfa_, lhs_arena,
      &other->_impl_.idfa_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imei_, lhs_arena,
      &other->_impl_.imei_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.imodel_, lhs_arena,
      &other->_impl_.imodel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoleLogoutInfo, _impl_.areaid_)
      + sizeof(RoleLogoutInfo::_impl_.areaid_)
      - PROTOBUF_FIELD_OFFSET(RoleLogoutInfo, _impl_.roleid_)>(
          reinterpret_cast<char*>(&_impl_.roleid_),
          reinterpret_cast<char*>(&other->_impl_.roleid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoleLogoutInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_getter, &descriptor_table_symphony_2fproto_2flog_5fprotobuf_2eproto_once,
      file_level_metadata_symphony_2fproto_2flog_5fprotobuf_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace symphony
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::symphony::proto::AccountCreateInfo*
Arena::CreateMaybeMessage< ::symphony::proto::AccountCreateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::AccountCreateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::AccountLoginInfo*
Arena::CreateMaybeMessage< ::symphony::proto::AccountLoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::AccountLoginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleChatInfo*
Arena::CreateMaybeMessage< ::symphony::proto::RoleChatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleChatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleCreateInfo*
Arena::CreateMaybeMessage< ::symphony::proto::RoleCreateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleCreateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleLoginInfo*
Arena::CreateMaybeMessage< ::symphony::proto::RoleLoginInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleLoginInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::symphony::proto::RoleLogoutInfo*
Arena::CreateMaybeMessage< ::symphony::proto::RoleLogoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::symphony::proto::RoleLogoutInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
